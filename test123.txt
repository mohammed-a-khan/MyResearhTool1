/**
 * Check if data exists using stored procedure.
 * Parameters can include null values and numeric values.
 * 
 * @param procedureName the stored procedure name (without sp_ prefix)
 * @param parameterList comma-separated list of parameter names or values (e.g., "dealId, null, 0, reportDate")
 */
@QAFTestStep(description = "user checks if data exists using stored procedure {procedureName} with parameters {parameterList}")
public void checkDataExistsUsingStoredProcedure(String procedureName, String parameterList) {
    logger.info("Checking data using stored procedure: " + procedureName);
    
    try {
        // Parse parameters
        String[] params = parameterList.split(",");
        List<Object> paramValues = new ArrayList<>();
        
        for (String param : params) {
            param = param.trim();
            
            if ("null".equalsIgnoreCase(param)) {
                // Handle null value
                paramValues.add(null);
                logger.debug("Parameter: null");
            } else if (param.matches("-?\\d+")) {
                // Handle numeric value
                paramValues.add(Integer.parseInt(param));
                logger.debug("Parameter (numeric): " + param);
            } else if (param.matches("-?\\d*\\.\\d+")) {
                // Handle decimal value
                paramValues.add(Double.parseDouble(param));
                logger.debug("Parameter (decimal): " + param);
            } else {
                // Handle as parameter name from test context
                Object value = TestContextManager.getTestDataValue(param);
                paramValues.add(value);
                logger.debug("Parameter " + param + " = " + value);
            }
        }
        
        // Execute stored procedure - returns List<Map<String, Object>>
        List<Map<String, Object>> results = DatabaseUtil.executeStoredProcedure(procedureName, paramValues);
        
        // Determine if data exists
        boolean dataExists = false;
        
        // Check if we have any results
        if (results != null && !results.isEmpty()) {
            // If stored procedure returns a count or single value result
            Map<String, Object> firstRow = results.get(0);
            if (firstRow != null && !firstRow.isEmpty()) {
                // Get the first value from the result (usually count or exists flag)
                Object firstValue = firstRow.values().iterator().next();
                
                if (firstValue instanceof Boolean) {
                    dataExists = (Boolean) firstValue;
                } else if (firstValue instanceof Number) {
                    dataExists = ((Number) firstValue).intValue() > 0;
                } else if (firstValue instanceof String) {
                    // Handle string results like "Y"/"N" or numeric strings
                    String strValue = firstValue.toString();
                    if ("Y".equalsIgnoreCase(strValue) || "YES".equalsIgnoreCase(strValue) || "TRUE".equalsIgnoreCase(strValue)) {
                        dataExists = true;
                    } else if (strValue.matches("\\d+")) {
                        dataExists = Integer.parseInt(strValue) > 0;
                    }
                } else {
                    // For any other non-null result, consider data exists
                    dataExists = true;
                }
            }
        }
        
        // Store result in context
        TestContextManager.setTestData("data.exists", dataExists);
        TestContextManager.setTestData("skip.ui.setup", dataExists);
        
        Reporter.log("Stored procedure check result: Data exists = " + dataExists);
        
        if (dataExists) {
            Reporter.log("Test data already exists. UI setup can be skipped.");
        } else {
            Reporter.log("No test data found. UI setup is required.");
        }
        
    } catch (Exception e) {
        logger.error("Error checking data with stored procedure: " + procedureName, e);
        Reporter.log("Error during stored procedure check: " + e.getMessage());
        // On error, assume data doesn't exist
        TestContextManager.setTestData("data.exists", false);
        TestContextManager.setTestData("skip.ui.setup", false);
    }
}

/**
 * Check if data exists in database using a query from properties.
 * 
 * @param queryKey the property key for the query (e.g., "query.check.testdata")
 * @param parameterList comma-separated list of parameter names or values
 */
@QAFTestStep(description = "user checks if data exists in database using query {queryKey} with parameters {parameterList}")
public void checkDataExistsUsingQuery(String queryKey, String parameterList) {
    logger.info("Checking data using query key: " + queryKey);
    
    try {
        // Get query from properties
        String query = ConfigurationManager.getBundle().getString(queryKey);
        if (query == null || query.isEmpty()) {
            throw new RuntimeException("Query not found for key: " + queryKey);
        }
        logger.info("Query: " + query);
        
        // Parse parameters
        String[] params = parameterList.split(",");
        List<Object> paramValues = new ArrayList<>();
        
        for (String param : params) {
            param = param.trim();
            
            if ("null".equalsIgnoreCase(param)) {
                // Handle null value
                paramValues.add(null);
                logger.debug("Parameter: null");
            } else if (param.matches("-?\\d+")) {
                // Handle numeric value
                paramValues.add(Integer.parseInt(param));
                logger.debug("Parameter (numeric): " + param);
            } else if (param.matches("-?\\d*\\.\\d+")) {
                // Handle decimal value
                paramValues.add(Double.parseDouble(param));
                logger.debug("Parameter (decimal): " + param);
            } else {
                // Handle as parameter name from test context
                Object value = TestContextManager.getTestDataValue(param);
                paramValues.add(value);
                logger.debug("Parameter " + param + " = " + value);
            }
        }
        
        // Execute query - returns List<Map<String, Object>>
        List<Map<String, Object>> results = DatabaseUtil.executeSelectQuery(query, paramValues);
        
        // Determine if data exists
        boolean dataExists = false;
        
        // If query is COUNT query
        if (query.toUpperCase().contains("COUNT(*)") || query.toUpperCase().contains("COUNT(1)")) {
            if (results != null && !results.isEmpty()) {
                Map<String, Object> firstRow = results.get(0);
                if (firstRow != null && !firstRow.isEmpty()) {
                    Object count = firstRow.values().iterator().next();
                    if (count != null) {
                        if (count instanceof Number) {
                            dataExists = ((Number) count).intValue() > 0;
                        } else {
                            dataExists = Integer.parseInt(count.toString()) > 0;
                        }
                    }
                }
            }
        } else {
            // For regular SELECT queries, check if any rows returned
            dataExists = results != null && !results.isEmpty();
        }
        
        // Store result in context
        TestContextManager.setTestData("data.exists", dataExists);
        TestContextManager.setTestData("skip.ui.setup", dataExists);
        
        Reporter.log("Query check result: Data exists = " + dataExists);
        
        if (dataExists) {
            Reporter.log("Test data already exists. UI setup can be skipped.");
        } else {
            Reporter.log("No test data found. UI setup is required.");
        }
        
    } catch (Exception e) {
        logger.error("Error checking data with query: " + queryKey, e);
        Reporter.log("Error during query check: " + e.getMessage());
        // On error, assume data doesn't exist
        TestContextManager.setTestData("data.exists", false);
        TestContextManager.setTestData("skip.ui.setup", false);
    }
}

/**
 * Optional: A step to check if UI setup should be skipped based on data existence check.
 */
@QAFTestStep(description = "user skips UI setup if test data exists")
public void skipUISetupIfDataExists() {
    Object dataExists = TestContextManager.getTestDataValue("data.exists");
    
    if (dataExists != null && (Boolean) dataExists) {
        logger.info("Skipping UI setup as test data already exists");
        Reporter.log("Skipping UI setup - using existing test data");
        
        // This will skip the remaining steps in the scenario
        throw new SkipException("Test data already exists in database, skipping UI setup");
    }
}

/**
 * Optional: A step to check if data exists (for conditional logic).
 */
@QAFTestStep(description = "user verifies if test data exists")
public boolean verifyTestDataExists() {
    Object dataExists = TestContextManager.getTestDataValue("data.exists");
    boolean exists = dataExists != null && (Boolean) dataExists;
    
    Reporter.log("Test data exists: " + exists);
    return exists;
}
