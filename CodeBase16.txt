templates/pipeline/java_selenium_testng.yml
--------------------------------------------------

# Azure DevOps Pipeline for CSTestForge Selenium Java TestNG Project
# File: templates/pipeline/java_selenium_testng.yml

# Trigger configuration
trigger:
  branches:
    include:
      - main
      - develop
      - feature/*
      - release/*
  paths:
    include:
      - src/**
      - pom.xml
      - testng.xml
    exclude:
      - README.md
      - docs/**

# PR trigger configuration
pr:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - src/**
      - pom.xml
      - testng.xml
    exclude:
      - README.md
      - docs/**

# Pipeline variables
variables:
  # Maven Configuration
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  # Test Configuration
  TEST_RESULTS_DIR: '$(System.DefaultWorkingDirectory)/target/surefire-reports'
  TEST_REPORTS_DIR: '$(System.DefaultWorkingDirectory)/target/cstestforge-reports'
  SCREENSHOT_DIR: '$(System.DefaultWorkingDirectory)/target/screenshots'
  # Test Execution Configuration
  BROWSER: 'chrome'
  HEADLESS: 'true'
  WINDOW_SIZE: '1920,1080'
  BASE_URL: 'https://demo.cstestforge.dev'
  IMPLICIT_WAIT: '10'
  EXPLICIT_WAIT: '30'
  RETRY_COUNT: '2'
  THREAD_COUNT: '3'
  # Test Suites Configuration
  SMOKE_SUITE: 'smoke'
  REGRESSION_SUITE: 'regression'
  # Default Environment
  ENV: 'qa'

# Define pipeline stages
stages:
  - stage: Build
    displayName: 'Build and Compile'
    jobs:
      - job: BuildJob
        displayName: 'Build Maven Project'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up JDK
          - task: JavaToolInstaller@0
            displayName: 'Set up JDK 17'
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
          
          # Cache Maven packages
          - task: Cache@2
            displayName: 'Cache Maven packages'
            inputs:
              key: 'maven | "$(Agent.OS)" | pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)
          
          # Build with Maven
          - task: Maven@3
            displayName: 'Build with Maven'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean compile'
              options: '-B -Dmaven.test.skip=true $(MAVEN_OPTS)'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
          
          # Run CheckStyle
          - task: Maven@3
            displayName: 'Run CheckStyle'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'checkstyle:checkstyle'
              options: '-B $(MAVEN_OPTS)'
              publishJUnitResults: false
          
          # Run SpotBugs
          - task: Maven@3
            displayName: 'Run SpotBugs'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'spotbugs:spotbugs'
              options: '-B $(MAVEN_OPTS)'
              publishJUnitResults: false
          
          # Publish quality reports
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish code coverage'
            inputs:
              codeCoverageTool: 'JaCoCo'
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/target/site/jacoco/jacoco.xml'
              reportDirectory: '$(System.DefaultWorkingDirectory)/target/site/jacoco'
              failIfCoverageEmpty: false
          
          # Publish artifacts
          - task: PublishPipelineArtifact@1
            displayName: 'Publish compiled artifacts'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/target'
              artifact: 'compiled-artifacts'
              publishLocation: 'pipeline'

  - stage: Test
    displayName: 'Run Tests'
    dependsOn: Build
    jobs:
      - job: SmokeTest
        displayName: 'Run Smoke Tests'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up JDK
          - task: JavaToolInstaller@0
            displayName: 'Set up JDK 17'
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
          
          # Cache Maven packages
          - task: Cache@2
            displayName: 'Cache Maven packages'
            inputs:
              key: 'maven | "$(Agent.OS)" | pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)
          
          # Download compiled artifacts
          - task: DownloadPipelineArtifact@2
            displayName: 'Download compiled artifacts'
            inputs:
              artifactName: 'compiled-artifacts'
              targetPath: '$(System.DefaultWorkingDirectory)/target'
          
          # Install Chrome
          - task: Bash@3
            displayName: 'Install Chrome'
            inputs:
              targetType: 'inline'
              script: |
                wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
                echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
                sudo apt-get update
                sudo apt-get install -y google-chrome-stable
          
          # Install ChromeDriver
          - task: Bash@3
            displayName: 'Install ChromeDriver'
            inputs:
              targetType: 'inline'
              script: |
                CHROME_VERSION=$(google-chrome --version | cut -d ' ' -f 3 | cut -d '.' -f 1)
                CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION")
                curl -L -O "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
                unzip chromedriver_linux64.zip
                chmod +x chromedriver
                sudo mv chromedriver /usr/local/bin/
          
          # Run smoke tests
          - task: Maven@3
            displayName: 'Run smoke tests'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'test'
              options: '-B -Dgroups=$(SMOKE_SUITE) -Dbrowser=$(BROWSER) -Dheadless=$(HEADLESS) -DwindowSize=$(WINDOW_SIZE) -DbaseUrl=$(BASE_URL) -DimplicitWait=$(IMPLICIT_WAIT) -DexplicitWait=$(EXPLICIT_WAIT) -DretryCount=$(RETRY_COUNT) -DthreadCount=$(THREAD_COUNT) -Denv=$(ENV) $(MAVEN_OPTS)'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              testRunTitle: 'Smoke Tests'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
              isJacocoCoverageReportXML: false
          
          # Publish smoke test reports
          - task: PublishPipelineArtifact@1
            displayName: 'Publish smoke test reports'
            condition: always()
            inputs:
              targetPath: '$(TEST_REPORTS_DIR)'
              artifact: 'smoke-test-reports'
              publishLocation: 'pipeline'
          
          # Publish screenshots
          - task: PublishPipelineArtifact@1
            displayName: 'Publish screenshots'
            condition: failed()
            inputs:
              targetPath: '$(SCREENSHOT_DIR)'
              artifact: 'smoke-test-screenshots'
              publishLocation: 'pipeline'
      
      - job: RegressionTest
        displayName: 'Run Regression Tests'
        dependsOn: SmokeTest
        condition: succeeded()
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up JDK
          - task: JavaToolInstaller@0
            displayName: 'Set up JDK 17'
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
          
          # Cache Maven packages
          - task: Cache@2
            displayName: 'Cache Maven packages'
            inputs:
              key: 'maven | "$(Agent.OS)" | pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)
          
          # Download compiled artifacts
          - task: DownloadPipelineArtifact@2
            displayName: 'Download compiled artifacts'
            inputs:
              artifactName: 'compiled-artifacts'
              targetPath: '$(System.DefaultWorkingDirectory)/target'
          
          # Install Chrome
          - task: Bash@3
            displayName: 'Install Chrome'
            inputs:
              targetType: 'inline'
              script: |
                wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
                echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
                sudo apt-get update
                sudo apt-get install -y google-chrome-stable
          
          # Install ChromeDriver
          - task: Bash@3
            displayName: 'Install ChromeDriver'
            inputs:
              targetType: 'inline'
              script: |
                CHROME_VERSION=$(google-chrome --version | cut -d ' ' -f 3 | cut -d '.' -f 1)
                CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION")
                curl -L -O "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
                unzip chromedriver_linux64.zip
                chmod +x chromedriver
                sudo mv chromedriver /usr/local/bin/
          
          # Run regression tests
          - task: Maven@3
            displayName: 'Run regression tests'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'test'
              options: '-B -Dgroups=$(REGRESSION_SUITE) -Dbrowser=$(BROWSER) -Dheadless=$(HEADLESS) -DwindowSize=$(WINDOW_SIZE) -DbaseUrl=$(BASE_URL) -DimplicitWait=$(IMPLICIT_WAIT) -DexplicitWait=$(EXPLICIT_WAIT) -DretryCount=$(RETRY_COUNT) -DthreadCount=$(THREAD_COUNT) -Denv=$(ENV) $(MAVEN_OPTS)'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              testRunTitle: 'Regression Tests'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
              isJacocoCoverageReportXML: false
          
          # Publish regression test reports
          - task: PublishPipelineArtifact@1
            displayName: 'Publish regression test reports'
            condition: always()
            inputs:
              targetPath: '$(TEST_REPORTS_DIR)'
              artifact: 'regression-test-reports'
              publishLocation: 'pipeline'
          
          # Publish screenshots
          - task: PublishPipelineArtifact@1
            displayName: 'Publish screenshots'
            condition: failed()
            inputs:
              targetPath: '$(SCREENSHOT_DIR)'
              artifact: 'regression-test-screenshots'
              publishLocation: 'pipeline'
  
  - stage: Notify
    displayName: 'Notification'
    dependsOn: Test
    condition: always()
    jobs:
      - job: SendNotification
        displayName: 'Send Notifications'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Generate notification
          - task: PowerShell@2
            displayName: 'Generate notification'
            inputs:
              targetType: 'inline'
              script: |
                # Get build status
                $buildStatus = "$(Agent.JobStatus)"
                $buildId = "$(Build.BuildId)"
                $buildNumber = "$(Build.BuildNumber)"
                $buildUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
                $buildReason = "$(Build.Reason)"
                $buildRequestedFor = "$(Build.RequestedFor)"
                
                # Create notification message
                $message = "Build: $buildNumber`r`n"
                $message += "Status: $buildStatus`r`n"
                $message += "Reason: $buildReason`r`n"
                $message += "Requested by: $buildRequestedFor`r`n"
                $message += "Details: $buildUrl`r`n"
                
                Write-Host "##vso[task.setvariable variable=NotificationMessage]$message"
          
          # Send email notification
          - task: SendEmail@1
            displayName: 'Send email notification'
            condition: always()
            inputs:
              To: '$(NotificationEmail)'
              From: 'azuredevops@cstestforge.dev'
              Subject: 'CSTestForge Build $(Build.BuildNumber) - $(Agent.JobStatus)'
              Body: '$(NotificationMessage)'
              SmtpServer: '$(SmtpServer)'
              SmtpUsername: '$(SmtpUsername)'
              SmtpPassword: '$(SmtpPassword)'
              UseSsl: true
          
          # Post Teams notification
          - task: PowerShell@2
            displayName: 'Post Teams notification'
            condition: always()
            inputs:
              targetType: 'inline'
              script: |
                $body = @{
                  "@type" = "MessageCard"
                  "@context" = "http://schema.org/extensions"
                  "themeColor" = if ("$(Agent.JobStatus)" -eq "Succeeded") { "00FF00" } else { "FF0000" }
                  "summary" = "CSTestForge Build $(Build.BuildNumber) - $(Agent.JobStatus)"
                  "sections" = @(
                    @{
                      "activityTitle" = "CSTestForge Build $(Build.BuildNumber) - $(Agent.JobStatus)"
                      "activitySubtitle" = "Pipeline: $(Build.DefinitionName)"
                      "activityImage" = "https://raw.githubusercontent.com/microsoft/azure-pipelines-tasks/master/Tasks/PublishTestResultsV2/icon.png"
                      "facts" = @(
                        @{
                          "name" = "Status"
                          "value" = "$(Agent.JobStatus)"
                        },
                        @{
                          "name" = "Reason"
                          "value" = "$(Build.Reason)"
                        },
                        @{
                          "name" = "Requested by"
                          "value" = "$(Build.RequestedFor)"
                        },
                        @{
                          "name" = "Repository"
                          "value" = "$(Build.Repository.Name)"
                        },
                        @{
                          "name" = "Branch"
                          "value" = "$(Build.SourceBranchName)"
                        }
                      )
                    }
                  )
                  "potentialAction" = @(
                    @{
                      "@type" = "OpenUri"
                      "name" = "View Build Results"
                      "targets" = @(
                        @{
                          "os" = "default"
                          "uri" = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
                        }
                      )
                    }
                  )
                }
                
                $jsonBody = ConvertTo-Json -InputObject $body -Depth 10
                
                $parameters = @{
                  Uri = "$(TeamsWebhookUrl)"
                  Method = "POST"
                  Body = $jsonBody
                  ContentType = "application/json"
                }
                
                Invoke-RestMethod @parameters


templates/pipeline/java_selenium_bdd.yml
----------------------------------------------
# Azure DevOps Pipeline for CSTestForge Selenium Java BDD Project
# File: templates/pipeline/java_selenium_bdd.yml

# Trigger configuration
trigger:
  branches:
    include:
      - main
      - develop
      - feature/*
      - release/*
  paths:
    include:
      - src/**
      - pom.xml
      - src/test/resources/features/**
    exclude:
      - README.md
      - docs/**

# PR trigger configuration
pr:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - src/**
      - pom.xml
      - src/test/resources/features/**
    exclude:
      - README.md
      - docs/**

# Pipeline variables
variables:
  # Maven Configuration
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  # Test Configuration
  TEST_RESULTS_DIR: '$(System.DefaultWorkingDirectory)/target/cucumber-reports'
  CUCUMBER_REPORTS_DIR: '$(System.DefaultWorkingDirectory)/target/cucumber-html-reports'
  CSTESTFORGE_REPORTS_DIR: '$(System.DefaultWorkingDirectory)/target/cstestforge-reports'
  SCREENSHOT_DIR: '$(System.DefaultWorkingDirectory)/target/screenshots'
  # Test Execution Configuration
  BROWSER: 'chrome'
  HEADLESS: 'true'
  WINDOW_SIZE: '1920,1080'
  BASE_URL: 'https://demo.cstestforge.dev'
  IMPLICIT_WAIT: '10'
  EXPLICIT_WAIT: '30'
  RETRY_COUNT: '2'
  THREAD_COUNT: '3'
  # Test Tags Configuration
  SMOKE_TAGS: '@smoke'
  REGRESSION_TAGS: '@regression'
  # Default Environment
  ENV: 'qa'

# Define pipeline stages
stages:
  - stage: Build
    displayName: 'Build and Compile'
    jobs:
      - job: BuildJob
        displayName: 'Build Maven Project'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up JDK
          - task: JavaToolInstaller@0
            displayName: 'Set up JDK 17'
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
          
          # Cache Maven packages
          - task: Cache@2
            displayName: 'Cache Maven packages'
            inputs:
              key: 'maven | "$(Agent.OS)" | pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)
          
          # Build with Maven
          - task: Maven@3
            displayName: 'Build with Maven'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean compile'
              options: '-B -Dmaven.test.skip=true $(MAVEN_OPTS)'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
          
          # Run CheckStyle
          - task: Maven@3
            displayName: 'Run CheckStyle'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'checkstyle:checkstyle'
              options: '-B $(MAVEN_OPTS)'
              publishJUnitResults: false
          
          # Validate Cucumber features
          - task: Maven@3
            displayName: 'Validate Cucumber Features'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'validate'
              options: '-B -Dcucumber.features=validate $(MAVEN_OPTS)'
              publishJUnitResults: false
          
          # Publish artifacts
          - task: PublishPipelineArtifact@1
            displayName: 'Publish compiled artifacts'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/target'
              artifact: 'compiled-artifacts'
              publishLocation: 'pipeline'

  - stage: Test
    displayName: 'Run Tests'
    dependsOn: Build
    jobs:
      - job: SmokeTest
        displayName: 'Run Smoke Tests'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up JDK
          - task: JavaToolInstaller@0
            displayName: 'Set up JDK 17'
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
          
          # Cache Maven packages
          - task: Cache@2
            displayName: 'Cache Maven packages'
            inputs:
              key: 'maven | "$(Agent.OS)" | pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)
          
          # Download compiled artifacts
          - task: DownloadPipelineArtifact@2
            displayName: 'Download compiled artifacts'
            inputs:
              artifactName: 'compiled-artifacts'
              targetPath: '$(System.DefaultWorkingDirectory)/target'
          
          # Install Chrome
          - task: Bash@3
            displayName: 'Install Chrome'
            inputs:
              targetType: 'inline'
              script: |
                wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
                echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
                sudo apt-get update
                sudo apt-get install -y google-chrome-stable
          
          # Install ChromeDriver
          - task: Bash@3
            displayName: 'Install ChromeDriver'
            inputs:
              targetType: 'inline'
              script: |
                CHROME_VERSION=$(google-chrome --version | cut -d ' ' -f 3 | cut -d '.' -f 1)
                CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION")
                curl -L -O "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
                unzip chromedriver_linux64.zip
                chmod +x chromedriver
                sudo mv chromedriver /usr/local/bin/
          
          # Run smoke tests
          - task: Maven@3
            displayName: 'Run smoke tests'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'test'
              options: '-B -Dcucumber.filter.tags="$(SMOKE_TAGS)" -Dbrowser=$(BROWSER) -Dheadless=$(HEADLESS) -DwindowSize=$(WINDOW_SIZE) -DbaseUrl=$(BASE_URL) -DimplicitWait=$(IMPLICIT_WAIT) -DexplicitWait=$(EXPLICIT_WAIT) -DretryCount=$(RETRY_COUNT) -DthreadCount=$(THREAD_COUNT) -Denv=$(ENV) $(MAVEN_OPTS)'
              publishJUnitResults: true
              testResultsFiles: '**/cucumber-reports/cucumber.xml'
              testRunTitle: 'Smoke Tests'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
              isJacocoCoverageReportXML: false
          
          # Publish Cucumber reports
          - task: PublishCucumberReport@1
            displayName: 'Publish Cucumber reports'
            condition: always()
            inputs:
              jsonDir: '$(System.DefaultWorkingDirectory)/target/cucumber-reports'
              outputPath: '$(System.DefaultWorkingDirectory)/target/cucumber-html-reports'
              theme: 'bootstrap'
              reportSuiteAsScenarios: true
              title: 'CSTestForge Smoke Tests'
          
          # Publish CSTestForge reports
          - task: PublishPipelineArtifact@1
            displayName: 'Publish CSTestForge reports'
            condition: always()
            inputs:
              targetPath: '$(CSTESTFORGE_REPORTS_DIR)'
              artifact: 'smoke-test-cstestforge-reports'
              publishLocation: 'pipeline'
          
          # Publish screenshots
          - task: PublishPipelineArtifact@1
            displayName: 'Publish screenshots'
            condition: failed()
            inputs:
              targetPath: '$(SCREENSHOT_DIR)'
              artifact: 'smoke-test-screenshots'
              publishLocation: 'pipeline'
      
      - job: RegressionTest
        displayName: 'Run Regression Tests'
        dependsOn: SmokeTest
        condition: succeeded()
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up JDK
          - task: JavaToolInstaller@0
            displayName: 'Set up JDK 17'
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
          
          # Cache Maven packages
          - task: Cache@2
            displayName: 'Cache Maven packages'
            inputs:
              key: 'maven | "$(Agent.OS)" | pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)
          
          # Download compiled artifacts
          - task: DownloadPipelineArtifact@2
            displayName: 'Download compiled artifacts'
            inputs:
              artifactName: 'compiled-artifacts'
              targetPath: '$(System.DefaultWorkingDirectory)/target'
          
          # Install Chrome
          - task: Bash@3
            displayName: 'Install Chrome'
            inputs:
              targetType: 'inline'
              script: |
                wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
                echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
                sudo apt-get update
                sudo apt-get install -y google-chrome-stable
          
          # Install ChromeDriver
          - task: Bash@3
            displayName: 'Install ChromeDriver'
            inputs:
              targetType: 'inline'
              script: |
                CHROME_VERSION=$(google-chrome --version | cut -d ' ' -f 3 | cut -d '.' -f 1)
                CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION")
                curl -L -O "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
                unzip chromedriver_linux64.zip
                chmod +x chromedriver
                sudo mv chromedriver /usr/local/bin/
          
          # Run regression tests in parallel
          - task: Maven@3
            displayName: 'Run regression tests'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'test'
              options: '-B -Dcucumber.filter.tags="$(REGRESSION_TAGS)" -Dbrowser=$(BROWSER) -Dheadless=$(HEADLESS) -DwindowSize=$(WINDOW_SIZE) -DbaseUrl=$(BASE_URL) -DimplicitWait=$(IMPLICIT_WAIT) -DexplicitWait=$(EXPLICIT_WAIT) -DretryCount=$(RETRY_COUNT) -Dcucumber.execution.parallel.enabled=true -Dcucumber.execution.parallel.config.strategy=fixed -Dcucumber.execution.parallel.config.fixed.parallelism=$(THREAD_COUNT) -Denv=$(ENV) $(MAVEN_OPTS)'
              publishJUnitResults: true
              testResultsFiles: '**/cucumber-reports/cucumber.xml'
              testRunTitle: 'Regression Tests'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
              isJacocoCoverageReportXML: false
          
          # Publish Cucumber reports
          - task: PublishCucumberReport@1
            displayName: 'Publish Cucumber reports'
            condition: always()
            inputs:
              jsonDir: '$(System.DefaultWorkingDirectory)/target/cucumber-reports'
              outputPath: '$(System.DefaultWorkingDirectory)/target/cucumber-html-reports'
              theme: 'bootstrap'
              reportSuiteAsScenarios: true
              title: 'CSTestForge Regression Tests'
          
          # Publish CSTestForge reports
          - task: PublishPipelineArtifact@1
            displayName: 'Publish CSTestForge reports'
            condition: always()
            inputs:
              targetPath: '$(CSTESTFORGE_REPORTS_DIR)'
              artifact: 'regression-test-cstestforge-reports'
              publishLocation: 'pipeline'
          
          # Publish screenshots
          - task: PublishPipelineArtifact@1
            displayName: 'Publish screenshots'
            condition: failed()
            inputs:
              targetPath: '$(SCREENSHOT_DIR)'
              artifact: 'regression-test-screenshots'
              publishLocation: 'pipeline'
  
  - stage: GenerateAnalysis
    displayName: 'Generate Analysis'
    dependsOn: Test
    condition: succeededOrFailed()
    jobs:
      - job: TestAnalysis
        displayName: 'Generate Test Analysis'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Download test results
          - task: DownloadPipelineArtifact@2
            displayName: 'Download test results'
            inputs:
              artifactName: 'smoke-test-cstestforge-reports'
              targetPath: '$(System.DefaultWorkingDirectory)/smoke-reports'
          
          - task: DownloadPipelineArtifact@2
            displayName: 'Download regression test results'
            inputs:
              artifactName: 'regression-test-cstestforge-reports'
              targetPath: '$(System.DefaultWorkingDirectory)/regression-reports'
          
          # Generate analysis report
          - task: Maven@3
            displayName: 'Generate analysis report'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'exec:java'
              options: '-B -Dexec.mainClass=com.cstestforge.reporting.AnalysisReportGenerator -Dexec.args="--smoke-dir=$(System.DefaultWorkingDirectory)/smoke-reports --regression-dir=$(System.DefaultWorkingDirectory)/regression-reports --output-dir=$(System.DefaultWorkingDirectory)/analysis-report" $(MAVEN_OPTS)'
              publishJUnitResults: false
          
          # Publish analysis report
          - task: PublishPipelineArtifact@1
            displayName: 'Publish analysis report'
            condition: always()
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/analysis-report'
              artifact: 'test-analysis-report'
              publishLocation: 'pipeline'
          
          # Publish HTML report
          - task: PublishHtmlReport@1
            displayName: 'Publish HTML analysis report'
            inputs:
              reportDir: '$(System.DefaultWorkingDirectory)/analysis-report'
              tabName: 'Test Analysis'
  
  - stage: Notify
    displayName: 'Notification'
    dependsOn: GenerateAnalysis
    condition: always()
    jobs:
      - job: SendNotification
        displayName: 'Send Notifications'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Generate notification
          - task: PowerShell@2
            displayName: 'Generate notification'
            inputs:
              targetType: 'inline'
              script: |
                # Get build status
                $buildStatus = "$(Agent.JobStatus)"
                $buildId = "$(Build.BuildId)"
                $buildNumber = "$(Build.BuildNumber)"
                $buildUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
                $buildReason = "$(Build.Reason)"
                $buildRequestedFor = "$(Build.RequestedFor)"
                
                # Create notification message
                $message = "Build: $buildNumber`r`n"
                $message += "Status: $buildStatus`r`n"
                $message += "Reason: $buildReason`r`n"
                $message += "Requested by: $buildRequestedFor`r`n"
                $message += "Details: $buildUrl`r`n"
                
                Write-Host "##vso[task.setvariable variable=NotificationMessage]$message"
          
          # Send email notification
          - task: SendEmail@1
            displayName: 'Send email notification'
            condition: always()
            inputs:
              To: '$(NotificationEmail)'
              From: 'azuredevops@cstestforge.dev'
              Subject: 'CSTestForge BDD Build $(Build.BuildNumber) - $(Agent.JobStatus)'
              Body: '$(NotificationMessage)'
              SmtpServer: '$(SmtpServer)'
              SmtpUsername: '$(SmtpUsername)'
              SmtpPassword: '$(SmtpPassword)'
              UseSsl: true
          
          # Post Teams notification
          - task: PowerShell@2
            displayName: 'Post Teams notification'
            condition: always()
            inputs:
              targetType: 'inline'
              script: |
                $body = @{
                  "@type" = "MessageCard"
                  "@context" = "http://schema.org/extensions"
                  "themeColor" = if ("$(Agent.JobStatus)" -eq "Succeeded") { "00FF00" } else { "FF0000" }
                  "summary" = "CSTestForge BDD Build $(Build.BuildNumber) - $(Agent.JobStatus)"
                  "sections" = @(
                    @{
                      "activityTitle" = "CSTestForge BDD Build $(Build.BuildNumber) - $(Agent.JobStatus)"
                      "activitySubtitle" = "Pipeline: $(Build.DefinitionName)"
                      "activityImage" = "https://raw.githubusercontent.com/microsoft/azure-pipelines-tasks/master/Tasks/PublishTestResultsV2/icon.png"
                      "facts" = @(
                        @{
                          "name" = "Status"
                          "value" = "$(Agent.JobStatus)"
                        },
                        @{
                          "name" = "Reason"
                          "value" = "$(Build.Reason)"
                        },
                        @{
                          "name" = "Requested by"
                          "value" = "$(Build.RequestedFor)"
                        },
                        @{
                          "name" = "Repository"
                          "value" = "$(Build.Repository.Name)"
                        },
                        @{
                          "name" = "Branch"
                          "value" = "$(Build.SourceBranchName)"
                        }
                      )
                    }
                  )
                  "potentialAction" = @(
                    @{
                      "@type" = "OpenUri"
                      "name" = "View Build Results"
                      "targets" = @(
                        @{
                          "os" = "default"
                          "uri" = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
                        }
                      )
                    },
                    @{
                      "@type" = "OpenUri"
                      "name" = "View Test Analysis"
                      "targets" = @(
                        @{
                          "os" = "default"
                          "uri" = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=ms.vss-test-web.test-result-details"
                        }
                      )
                    }
                  )
                }
                
                $jsonBody = ConvertTo-Json -InputObject $body -Depth 10
                
                $parameters = @{
                  Uri = "$(TeamsWebhookUrl)"
                  Method = "POST"
                  Body = $jsonBody
                  ContentType = "application/json"
                }
                
                Invoke-RestMethod @parameters



templates/pipeline/java_playwright_testng.yml
--------------------------------------------------------

# Azure DevOps Pipeline for CSTestForge Playwright Java TestNG Project
# File: templates/pipeline/java_playwright_testng.yml

# Trigger configuration
trigger:
  branches:
    include:
      - main
      - develop
      - feature/*
      - release/*
  paths:
    include:
      - src/**
      - pom.xml
      - testng.xml
    exclude:
      - README.md
      - docs/**

# PR trigger configuration
pr:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - src/**
      - pom.xml
      - testng.xml
    exclude:
      - README.md
      - docs/**

# Pipeline variables
variables:
  # Maven Configuration
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  # Test Configuration
  TEST_RESULTS_DIR: '$(System.DefaultWorkingDirectory)/target/surefire-reports'
  TEST_REPORTS_DIR: '$(System.DefaultWorkingDirectory)/target/cstestforge-reports'
  SCREENSHOT_DIR: '$(System.DefaultWorkingDirectory)/target/screenshots'
  VIDEO_DIR: '$(System.DefaultWorkingDirectory)/target/videos'
  TRACE_DIR: '$(System.DefaultWorkingDirectory)/target/traces'
  # Test Execution Configuration
  BROWSER: 'chromium'
  HEADLESS: 'true'
  WINDOW_SIZE: '1920,1080'
  BASE_URL: 'https://demo.cstestforge.dev'
  TIMEOUT: '30000'
  TRACE: 'on-failure'
  VIDEO: 'on-failure'
  RETRY_COUNT: '2'
  THREAD_COUNT: '3'
  # Test Suites Configuration
  SMOKE_SUITE: 'smoke'
  REGRESSION_SUITE: 'regression'
  # Default Environment
  ENV: 'qa'

# Define pipeline stages
stages:
  - stage: Build
    displayName: 'Build and Compile'
    jobs:
      - job: BuildJob
        displayName: 'Build Maven Project'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up JDK
          - task: JavaToolInstaller@0
            displayName: 'Set up JDK 17'
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
          
          # Cache Maven packages
          - task: Cache@2
            displayName: 'Cache Maven packages'
            inputs:
              key: 'maven | "$(Agent.OS)" | pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)
          
          # Build with Maven
          - task: Maven@3
            displayName: 'Build with Maven'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean compile'
              options: '-B -Dmaven.test.skip=true $(MAVEN_OPTS)'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
          
          # Run CheckStyle
          - task: Maven@3
            displayName: 'Run CheckStyle'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'checkstyle:checkstyle'
              options: '-B $(MAVEN_OPTS)'
              publishJUnitResults: false
          
          # Run SpotBugs
          - task: Maven@3
            displayName: 'Run SpotBugs'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'spotbugs:spotbugs'
              options: '-B $(MAVEN_OPTS)'
              publishJUnitResults: false
          
          # Publish quality reports
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish code coverage'
            inputs:
              codeCoverageTool: 'JaCoCo'
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/target/site/jacoco/jacoco.xml'
              reportDirectory: '$(System.DefaultWorkingDirectory)/target/site/jacoco'
              failIfCoverageEmpty: false
          
          # Publish artifacts
          - task: PublishPipelineArtifact@1
            displayName: 'Publish compiled artifacts'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/target'
              artifact: 'compiled-artifacts'
              publishLocation: 'pipeline'

  - stage: InstallPlaywright
    displayName: 'Install Playwright'
    dependsOn: Build
    jobs:
      - job: InstallPlaywrightJob
        displayName: 'Install Playwright Dependencies'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up JDK
          - task: JavaToolInstaller@0
            displayName: 'Set up JDK 17'
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
          
          # Cache Maven packages
          - task: Cache@2
            displayName: 'Cache Maven packages'
            inputs:
              key: 'maven | "$(Agent.OS)" | pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)
          
          # Download compiled artifacts
          - task: DownloadPipelineArtifact@2
            displayName: 'Download compiled artifacts'
            inputs:
              artifactName: 'compiled-artifacts'
              targetPath: '$(System.DefaultWorkingDirectory)/target'
          
          # Cache Playwright browsers
          - task: Cache@2
            displayName: 'Cache Playwright browsers'
            inputs:
              key: 'playwright-browsers | "$(Agent.OS)" | pom.xml'
              restoreKeys: |
                playwright-browsers | "$(Agent.OS)"
              path: '~/.cache/ms-playwright'
          
          # Install Playwright browsers
          - task: Maven@3
            displayName: 'Install Playwright browsers'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'exec:java'
              options: '-B -Dexec.mainClass=com.microsoft.playwright.CLI -Dexec.args="install --with-deps chromium firefox webkit" $(MAVEN_OPTS)'
              publishJUnitResults: false
          
          # Verify Playwright installation
          - task: Maven@3
            displayName: 'Verify Playwright installation'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'exec:java'
              options: '-B -Dexec.mainClass=com.cstestforge.util.PlaywrightVersionChecker $(MAVEN_OPTS)'
              publishJUnitResults: false
          
          # Publish Playwright cache
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Playwright cache'
            inputs:
              targetPath: '~/.cache/ms-playwright'
              artifact: 'playwright-cache'
              publishLocation: 'pipeline'

  - stage: Test
    displayName: 'Run Tests'
    dependsOn: InstallPlaywright
    jobs:
      - job: SmokeTest
        displayName: 'Run Smoke Tests'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up JDK
          - task: JavaToolInstaller@0
            displayName: 'Set up JDK 17'
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
          
          # Cache Maven packages
          - task: Cache@2
            displayName: 'Cache Maven packages'
            inputs:
              key: 'maven | "$(Agent.OS)" | pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)
          
          # Download compiled artifacts
          - task: DownloadPipelineArtifact@2
            displayName: 'Download compiled artifacts'
            inputs:
              artifactName: 'compiled-artifacts'
              targetPath: '$(System.DefaultWorkingDirectory)/target'
          
          # Download Playwright cache
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Playwright cache'
            inputs:
              artifactName: 'playwright-cache'
              targetPath: '~/.cache/ms-playwright'
          
          # Run smoke tests
          - task: Maven@3
            displayName: 'Run smoke tests'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'test'
              options: '-B -Dgroups=$(SMOKE_SUITE) -Dbrowser=$(BROWSER) -Dheadless=$(HEADLESS) -DwindowSize=$(WINDOW_SIZE) -DbaseUrl=$(BASE_URL) -Dtimeout=$(TIMEOUT) -Dtrace=$(TRACE) -Dvideo=$(VIDEO) -DretryCount=$(RETRY_COUNT) -DthreadCount=$(THREAD_COUNT) -Denv=$(ENV) $(MAVEN_OPTS)'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              testRunTitle: 'Playwright Smoke Tests'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
              isJacocoCoverageReportXML: false
          
          # Publish CSTestForge reports
          - task: PublishPipelineArtifact@1
            displayName: 'Publish test reports'
            condition: always()
            inputs:
              targetPath: '$(TEST_REPORTS_DIR)'
              artifact: 'smoke-test-reports'
              publishLocation: 'pipeline'
          
          # Publish screenshots
          - task: PublishPipelineArtifact@1
            displayName: 'Publish screenshots'
            condition: failed()
            inputs:
              targetPath: '$(SCREENSHOT_DIR)'
              artifact: 'smoke-test-screenshots'
              publishLocation: 'pipeline'
          
          # Publish videos
          - task: PublishPipelineArtifact@1
            displayName: 'Publish videos'
            condition: failed()
            inputs:
              targetPath: '$(VIDEO_DIR)'
              artifact: 'smoke-test-videos'
              publishLocation: 'pipeline'
          
          # Publish traces
          - task: PublishPipelineArtifact@1
            displayName: 'Publish traces'
            condition: failed()
            inputs:
              targetPath: '$(TRACE_DIR)'
              artifact: 'smoke-test-traces'
              publishLocation: 'pipeline'
      
      - job: RegressionTest
        displayName: 'Run Regression Tests'
        dependsOn: SmokeTest
        condition: succeeded()
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up JDK
          - task: JavaToolInstaller@0
            displayName: 'Set up JDK 17'
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
          
          # Cache Maven packages
          - task: Cache@2
            displayName: 'Cache Maven packages'
            inputs:
              key: 'maven | "$(Agent.OS)" | pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)
          
          # Download compiled artifacts
          - task: DownloadPipelineArtifact@2
            displayName: 'Download compiled artifacts'
            inputs:
              artifactName: 'compiled-artifacts'
              targetPath: '$(System.DefaultWorkingDirectory)/target'
          
          # Download Playwright cache
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Playwright cache'
            inputs:
              artifactName: 'playwright-cache'
              targetPath: '~/.cache/ms-playwright'
          
          # Run regression tests in parallel
          - task: Maven@3
            displayName: 'Run regression tests'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'test'
              options: '-B -Dgroups=$(REGRESSION_SUITE) -Dbrowser=$(BROWSER) -Dheadless=$(HEADLESS) -DwindowSize=$(WINDOW_SIZE) -DbaseUrl=$(BASE_URL) -Dtimeout=$(TIMEOUT) -Dtrace=$(TRACE) -Dvideo=$(VIDEO) -DretryCount=$(RETRY_COUNT) -DthreadCount=$(THREAD_COUNT) -Denv=$(ENV) -Dparallel=methods -DthreadCount=$(THREAD_COUNT) $(MAVEN_OPTS)'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              testRunTitle: 'Playwright Regression Tests'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
              isJacocoCoverageReportXML: false
          
          # Publish CSTestForge reports
          - task: PublishPipelineArtifact@1
            displayName: 'Publish test reports'
            condition: always()
            inputs:
              targetPath: '$(TEST_REPORTS_DIR)'
              artifact: 'regression-test-reports'
              publishLocation: 'pipeline'
          
          # Publish screenshots
          - task: PublishPipelineArtifact@1
            displayName: 'Publish screenshots'
            condition: failed()
            inputs:
              targetPath: '$(SCREENSHOT_DIR)'
              artifact: 'regression-test-screenshots'
              publishLocation: 'pipeline'
          
          # Publish videos
          - task: PublishPipelineArtifact@1
            displayName: 'Publish videos'
            condition: failed()
            inputs:
              targetPath: '$(VIDEO_DIR)'
              artifact: 'regression-test-videos'
              publishLocation: 'pipeline'
          
          # Publish traces
          - task: PublishPipelineArtifact@1
            displayName: 'Publish traces'
            condition: failed()
            inputs:
              targetPath: '$(TRACE_DIR)'
              artifact: 'regression-test-traces'
              publishLocation: 'pipeline'
  
  - stage: TraceViewer
    displayName: 'Deploy Trace Viewer'
    dependsOn: Test
    condition: succeededOrFailed()
    jobs:
      - job: DeployTraceViewer
        displayName: 'Deploy Playwright Trace Viewer'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Download traces
          - task: DownloadPipelineArtifact@2
            displayName: 'Download smoke test traces'
            condition: succeededOrFailed()
            inputs:
              artifactName: 'smoke-test-traces'
              targetPath: '$(System.DefaultWorkingDirectory)/traces/smoke'
          
          - task: DownloadPipelineArtifact@2
            displayName: 'Download regression test traces'
            condition: succeededOrFailed()
            inputs:
              artifactName: 'regression-test-traces'
              targetPath: '$(System.DefaultWorkingDirectory)/traces/regression'
          
          # Set up Node.js
          - task: NodeTool@0
            displayName: 'Set up Node.js'
            inputs:
              versionSpec: '18.x'
          
          # Install Playwright CLI
          - task: Bash@3
            displayName: 'Install Playwright CLI'
            inputs:
              targetType: 'inline'
              script: |
                npm init -y
                npm install @playwright/test
                npx playwright install chromium
          
          # Create trace viewer index page
          - task: Bash@3
            displayName: 'Create trace viewer index'
            inputs:
              targetType: 'inline'
              script: |
                mkdir -p $(System.DefaultWorkingDirectory)/trace-viewer
                
                # Create HTML index
                cat > $(System.DefaultWorkingDirectory)/trace-viewer/index.html << 'EOF'
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>CSTestForge Playwright Trace Viewer</title>
                    <style>
                        body {
                            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
                            margin: 0;
                            padding: 20px;
                            background-color: #f5f5f5;
                            color: #333;
                        }
                        h1 {
                            color: #C54B8C;
                            margin-bottom: 20px;
                        }
                        h2 {
                            color: #4B8CC5;
                            margin-top: 30px;
                            margin-bottom: 15px;
                        }
                        .container {
                            max-width: 1200px;
                            margin: 0 auto;
                            background-color: white;
                            padding: 30px;
                            border-radius: 8px;
                            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
                        }
                        .trace-list {
                            list-style: none;
                            padding: 0;
                        }
                        .trace-item {
                            margin-bottom: 10px;
                            padding: 10px;
                            background-color: #f9f9f9;
                            border-radius: 4px;
                            border-left: 3px solid #C54B8C;
                        }
                        .trace-item a {
                            color: #C54B8C;
                            text-decoration: none;
                            font-weight: 500;
                        }
                        .trace-item a:hover {
                            text-decoration: underline;
                        }
                        .instructions {
                            background-color: #e9f5ff;
                            padding: 15px;
                            border-radius: 4px;
                            margin-bottom: 20px;
                            border-left: 3px solid #4B8CC5;
                        }
                        .instructions h3 {
                            margin-top: 0;
                            color: #4B8CC5;
                        }
                        .instructions code {
                            background-color: #f0f0f0;
                            padding: 2px 5px;
                            border-radius: 3px;
                            font-family: monospace;
                        }
                        .no-traces {
                            color: #888;
                            font-style: italic;
                        }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <h1>CSTestForge Playwright Trace Viewer</h1>
                        
                        <div class="instructions">
                            <h3>How to View Traces</h3>
                            <p>
                                1. Click on a trace link below to download the trace file<br>
                                2. Use the Playwright Trace Viewer to open the file:<br>
                                <code>npx playwright show-trace path/to/trace.zip</code>
                            </p>
                        </div>
                        
                        <h2>Smoke Test Traces</h2>
                        <div id="smoke-traces">
                            <!-- Smoke test traces will be populated here -->
                        </div>
                        
                        <h2>Regression Test Traces</h2>
                        <div id="regression-traces">
                            <!-- Regression test traces will be populated here -->
                        </div>
                    </div>
                    
                    <script>
                        // Generate trace lists
                        async function generateTraceList() {
                            async function loadTraces(path, containerId) {
                                try {
                                    const response = await fetch(`${path}/traces.json`);
                                    const traces = await response.json();
                                    
                                    const container = document.getElementById(containerId);
                                    
                                    if (traces.length === 0) {
                                        container.innerHTML = '<p class="no-traces">No traces available</p>';
                                        return;
                                    }
                                    
                                    const list = document.createElement('ul');
                                    list.className = 'trace-list';
                                    
                                    traces.forEach(trace => {
                                        const item = document.createElement('li');
                                        item.className = 'trace-item';
                                        
                                        const link = document.createElement('a');
                                        link.href = `${path}/${trace.file}`;
                                        link.textContent = trace.name;
                                        link.download = trace.file;
                                        
                                        item.appendChild(link);
                                        list.appendChild(item);
                                    });
                                    
                                    container.appendChild(list);
                                } catch (error) {
                                    const container = document.getElementById(containerId);
                                    container.innerHTML = '<p class="no-traces">No traces available</p>';
                                }
                            }
                            
                            await loadTraces('smoke', 'smoke-traces');
                            await loadTraces('regression', 'regression-traces');
                        }
                        
                        document.addEventListener('DOMContentLoaded', generateTraceList);
                    </script>
                </body>
                </html>
                EOF
                
                # Create traces.json for both directories
                function create_traces_json() {
                    local dir=$1
                    local output_file="${dir}/traces.json"
                    local traces=()
                    
                    # Find all trace files
                    if [ -d "$dir" ]; then
                        for file in "${dir}"/*.zip; do
                            if [ -f "$file" ]; then
                                filename=$(basename "$file")
                                name="${filename%.zip}"
                                traces+=("{\"name\":\"${name}\",\"file\":\"${filename}\"}")
                            fi
                        done
                    fi
                    
                    # Create JSON array
                    echo "[" > "$output_file"
                    IFS=','
                    echo "${traces[*]}" >> "$output_file"
                    echo "]" >> "$output_file"
                }
                
                mkdir -p $(System.DefaultWorkingDirectory)/trace-viewer/smoke
                mkdir -p $(System.DefaultWorkingDirectory)/trace-viewer/regression
                
                # Copy trace files
                cp -r $(System.DefaultWorkingDirectory)/traces/smoke/*.zip $(System.DefaultWorkingDirectory)/trace-viewer/smoke/ 2>/dev/null || true
                cp -r $(System.DefaultWorkingDirectory)/traces/regression/*.zip $(System.DefaultWorkingDirectory)/trace-viewer/regression/ 2>/dev/null || true
                
                # Create trace indices
                create_traces_json "$(System.DefaultWorkingDirectory)/trace-viewer/smoke"
                create_traces_json "$(System.DefaultWorkingDirectory)/trace-viewer/regression"
          
          # Publish trace viewer
          - task: PublishPipelineArtifact@1
            displayName: 'Publish trace viewer'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/trace-viewer'
              artifact: 'trace-viewer'
              publishLocation: 'pipeline'
          
          # Deploy to Azure Storage
          - task: AzureCLI@2
            displayName: 'Deploy trace viewer to Azure Storage'
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
            inputs:
              azureSubscription: 'AzureServiceConnection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Create storage account if it doesn't exist
                az storage account create --name cstestforgetraces --resource-group CSTestForge --location eastus --sku Standard_LRS --kind StorageV2
                
                # Create container if it doesn't exist
                az storage container create --name traces --account-name cstestforgetraces --public-access blob
                
                # Upload files
                az storage blob upload-batch --account-name cstestforgetraces --destination traces --source "$(System.DefaultWorkingDirectory)/trace-viewer" --overwrite true
                
                # Generate SAS token
                end_date=$(date -u -d "30 days" '+%Y-%m-%dT%H:%MZ')
                sas_token=$(az storage container generate-sas --account-name cstestforgetraces --name traces --permissions r --expiry $end_date -o tsv)
                
                # Get container URL
                container_url=$(az storage container show --account-name cstestforgetraces --name traces --query "properties.publicAccess" -o tsv)
                
                if [ "$container_url" == "blob" ]; then
                  url="https://cstestforgetraces.blob.core.windows.net/traces"
                else
                  url="https://cstestforgetraces.blob.core.windows.net/traces?$sas_token"
                fi
                
                echo "##vso[task.setvariable variable=TraceViewerUrl;isOutput=true]$url"
  
  - stage: Notify
    displayName: 'Notification'
    dependsOn: 
      - Test
      - TraceViewer
    condition: always()
    jobs:
      - job: SendNotification
        displayName: 'Send Notifications'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Generate notification
          - task: PowerShell@2
            displayName: 'Generate notification'
            inputs:
              targetType: 'inline'
              script: |
                # Get build status
                $buildStatus = "$(Agent.JobStatus)"
                $buildId = "$(Build.BuildId)"
                $buildNumber = "$(Build.BuildNumber)"
                $buildUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
                $buildReason = "$(Build.Reason)"
                $buildRequestedFor = "$(Build.RequestedFor)"
                
                # Create notification message
                $message = "Build: $buildNumber`r`n"
                $message += "Status: $buildStatus`r`n"
                $message += "Reason: $buildReason`r`n"
                $message += "Requested by: $buildRequestedFor`r`n"
                $message += "Details: $buildUrl`r`n"
                
                # Add trace viewer URL if available
                $traceViewerUrl = "$(dependencies.TraceViewer.outputs['DeployTraceViewer.TraceViewerUrl'])"
                if ($traceViewerUrl) {
                    $message += "Trace Viewer: $traceViewerUrl`r`n"
                }
                
                Write-Host "##vso[task.setvariable variable=NotificationMessage]$message"
          
          # Send email notification
          - task: SendEmail@1
            displayName: 'Send email notification'
            condition: always()
            inputs:
              To: '$(NotificationEmail)'
              From: 'azuredevops@cstestforge.dev'
              Subject: 'CSTestForge Playwright Build $(Build.BuildNumber) - $(Agent.JobStatus)'
              Body: '$(NotificationMessage)'
              SmtpServer: '$(SmtpServer)'
              SmtpUsername: '$(SmtpUsername)'
              SmtpPassword: '$(SmtpPassword)'
              UseSsl: true
          
          # Post Teams notification
          - task: PowerShell@2
            displayName: 'Post Teams notification'
            condition: always()
            inputs:
              targetType: 'inline'
              script: |
                $body = @{
                  "@type" = "MessageCard"
                  "@context" = "http://schema.org/extensions"
                  "themeColor" = if ("$(Agent.JobStatus)" -eq "Succeeded") { "00FF00" } else { "FF0000" }
                  "summary" = "CSTestForge Playwright Build $(Build.BuildNumber) - $(Agent.JobStatus)"
                  "sections" = @(
                    @{
                      "activityTitle" = "CSTestForge Playwright Build $(Build.BuildNumber) - $(Agent.JobStatus)"
                      "activitySubtitle" = "Pipeline: $(Build.DefinitionName)"
                      "activityImage" = "https://raw.githubusercontent.com/microsoft/playwright/main/docs/src/assets/images/playwright-logo.svg"
                      "facts" = @(
                        @{
                          "name" = "Status"
                          "value" = "$(Agent.JobStatus)"
                        },
                        @{
                          "name" = "Browser"
                          "value" = "$(BROWSER)"
                        },
                        @{
                          "name" = "Reason"
                          "value" = "$(Build.Reason)"
                        },
                        @{
                          "name" = "Requested by"
                          "value" = "$(Build.RequestedFor)"
                        },
                        @{
                          "name" = "Repository"
                          "value" = "$(Build.Repository.Name)"
                        },
                        @{
                          "name" = "Branch"
                          "value" = "$(Build.SourceBranchName)"
                        }
                      )
                    }
                  )
                  "potentialAction" = @(
                    @{
                      "@type" = "OpenUri"
                      "name" = "View Build Results"
                      "targets" = @(
                        @{
                          "os" = "default"
                          "uri" = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
                        }
                      )
                    }
                  )
                }
                
                # Add trace viewer action if available
                $traceViewerUrl = "$(dependencies.TraceViewer.outputs['DeployTraceViewer.TraceViewerUrl'])"
                if ($traceViewerUrl) {
                    $traceViewerAction = @{
                      "@type" = "OpenUri"
                      "name" = "View Playwright Traces"
                      "targets" = @(
                        @{
                          "os" = "default"
                          "uri" = $traceViewerUrl
                        }
                      )
                    }
                    
                    $body.potentialAction += $traceViewerAction
                }
                
                $jsonBody = ConvertTo-Json -InputObject $body -Depth 10
                
                $parameters = @{
                  Uri = "$(TeamsWebhookUrl)"
                  Method = "POST"
                  Body = $jsonBody
                  ContentType = "application/json"
                }
                
                Invoke-RestMethod @parameters


templates/pipeline/java_playwright_bdd.yml
-------------------------------------------------

# Azure DevOps Pipeline for CSTestForge Playwright Java BDD Project
# File: templates/pipeline/java_playwright_bdd.yml

# Trigger configuration
trigger:
  branches:
    include:
      - main
      - develop
      - feature/*
      - release/*
  paths:
    include:
      - src/**
      - pom.xml
      - src/test/resources/features/**
    exclude:
      - README.md
      - docs/**

# PR trigger configuration
pr:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - src/**
      - pom.xml
      - src/test/resources/features/**
    exclude:
      - README.md
      - docs/**

# Pipeline variables
variables:
  # Maven Configuration
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  # Test Configuration
  TEST_RESULTS_DIR: '$(System.DefaultWorkingDirectory)/target/cucumber-reports'
  CUCUMBER_REPORTS_DIR: '$(System.DefaultWorkingDirectory)/target/cucumber-html-reports'
  CSTESTFORGE_REPORTS_DIR: '$(System.DefaultWorkingDirectory)/target/cstestforge-reports'
  SCREENSHOT_DIR: '$(System.DefaultWorkingDirectory)/target/screenshots'
  VIDEO_DIR: '$(System.DefaultWorkingDirectory)/target/videos'
  TRACE_DIR: '$(System.DefaultWorkingDirectory)/target/traces'
  # Test Execution Configuration
  BROWSER: 'chromium'
  HEADLESS: 'true'
  WINDOW_SIZE: '1920,1080'
  BASE_URL: 'https://demo.cstestforge.dev'
  TIMEOUT: '30000'
  TRACE: 'on-failure'
  VIDEO: 'on-failure'
  RETRY_COUNT: '2'
  THREAD_COUNT: '3'
  # Test Tags Configuration
  SMOKE_TAGS: '@smoke'
  REGRESSION_TAGS: '@regression'
  # Default Environment
  ENV: 'qa'

# Define pipeline stages
stages:
  - stage: Build
    displayName: 'Build and Compile'
    jobs:
      - job: BuildJob
        displayName: 'Build Maven Project'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up JDK
          - task: JavaToolInstaller@0
            displayName: 'Set up JDK 17'
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
          
          # Cache Maven packages
          - task: Cache@2
            displayName: 'Cache Maven packages'
            inputs:
              key: 'maven | "$(Agent.OS)" | pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)
          
          # Build with Maven
          - task: Maven@3
            displayName: 'Build with Maven'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean compile'
              options: '-B -Dmaven.test.skip=true $(MAVEN_OPTS)'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
          
          # Run CheckStyle
          - task: Maven@3
            displayName: 'Run CheckStyle'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'checkstyle:checkstyle'
              options: '-B $(MAVEN_OPTS)'
              publishJUnitResults: false
          
          # Validate Cucumber features
          - task: Maven@3
            displayName: 'Validate Cucumber Features'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'validate'
              options: '-B -Dcucumber.features=validate $(MAVEN_OPTS)'
              publishJUnitResults: false
          
          # Publish artifacts
          - task: PublishPipelineArtifact@1
            displayName: 'Publish compiled artifacts'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/target'
              artifact: 'compiled-artifacts'
              publishLocation: 'pipeline'

  - stage: InstallPlaywright
    displayName: 'Install Playwright'
    dependsOn: Build
    jobs:
      - job: InstallPlaywrightJob
        displayName: 'Install Playwright Dependencies'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up JDK
          - task: JavaToolInstaller@0
            displayName: 'Set up JDK 17'
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
          
          # Cache Maven packages
          - task: Cache@2
            displayName: 'Cache Maven packages'
            inputs:
              key: 'maven | "$(Agent.OS)" | pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)
          
          # Download compiled artifacts
          - task: DownloadPipelineArtifact@2
            displayName: 'Download compiled artifacts'
            inputs:
              artifactName: 'compiled-artifacts'
              targetPath: '$(System.DefaultWorkingDirectory)/target'
          
          # Cache Playwright browsers
          - task: Cache@2
            displayName: 'Cache Playwright browsers'
            inputs:
              key: 'playwright-browsers | "$(Agent.OS)" | pom.xml'
              restoreKeys: |
                playwright-browsers | "$(Agent.OS)"
              path: '~/.cache/ms-playwright'
          
          # Install Playwright browsers
          - task: Maven@3
            displayName: 'Install Playwright browsers'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'exec:java'
              options: '-B -Dexec.mainClass=com.microsoft.playwright.CLI -Dexec.args="install --with-deps chromium firefox webkit" $(MAVEN_OPTS)'
              publishJUnitResults: false
          
          # Verify Playwright installation
          - task: Maven@3
            displayName: 'Verify Playwright installation'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'exec:java'
              options: '-B -Dexec.mainClass=com.cstestforge.util.PlaywrightVersionChecker $(MAVEN_OPTS)'
              publishJUnitResults: false
          
          # Publish Playwright cache
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Playwright cache'
            inputs:
              targetPath: '~/.cache/ms-playwright'
              artifact: 'playwright-cache'
              publishLocation: 'pipeline'

  - stage: Test
    displayName: 'Run Tests'
    dependsOn: InstallPlaywright
    jobs:
      - job: SmokeTest
        displayName: 'Run Smoke Tests'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up JDK
          - task: JavaToolInstaller@0
            displayName: 'Set up JDK 17'
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
          
          # Cache Maven packages
          - task: Cache@2
            displayName: 'Cache Maven packages'
            inputs:
              key: 'maven | "$(Agent.OS)" | pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)
          
          # Download compiled artifacts
          - task: DownloadPipelineArtifact@2
            displayName: 'Download compiled artifacts'
            inputs:
              artifactName: 'compiled-artifacts'
              targetPath: '$(System.DefaultWorkingDirectory)/target'
          
          # Download Playwright cache
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Playwright cache'
            inputs:
              artifactName: 'playwright-cache'
              targetPath: '~/.cache/ms-playwright'
          
          # Run smoke tests
          - task: Maven@3
            displayName: 'Run smoke tests'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'test'
              options: '-B -Dcucumber.filter.tags="$(SMOKE_TAGS)" -Dbrowser=$(BROWSER) -Dheadless=$(HEADLESS) -DwindowSize=$(WINDOW_SIZE) -DbaseUrl=$(BASE_URL) -Dtimeout=$(TIMEOUT) -Dtrace=$(TRACE) -Dvideo=$(VIDEO) -DretryCount=$(RETRY_COUNT) -DthreadCount=$(THREAD_COUNT) -Denv=$(ENV) $(MAVEN_OPTS)'
              publishJUnitResults: true
              testResultsFiles: '**/cucumber-reports/cucumber.xml'
              testRunTitle: 'Playwright Smoke Tests'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
              isJacocoCoverageReportXML: false
          
          # Publish Cucumber reports
          - task: PublishCucumberReport@1
            displayName: 'Publish Cucumber reports'
            condition: always()
            inputs:
              jsonDir: '$(System.DefaultWorkingDirectory)/target/cucumber-reports'
              outputPath: '$(System.DefaultWorkingDirectory)/target/cucumber-html-reports'
              theme: 'bootstrap'
              reportSuiteAsScenarios: true
              title: 'CSTestForge Playwright Smoke Tests'
          
          # Publish CSTestForge reports
          - task: PublishPipelineArtifact@1
            displayName: 'Publish CSTestForge reports'
            condition: always()
            inputs:
              targetPath: '$(CSTESTFORGE_REPORTS_DIR)'
              artifact: 'smoke-test-cstestforge-reports'
              publishLocation: 'pipeline'
          
          # Publish screenshots
          - task: PublishPipelineArtifact@1
            displayName: 'Publish screenshots'
            condition: failed()
            inputs:
              targetPath: '$(SCREENSHOT_DIR)'
              artifact: 'smoke-test-screenshots'
              publishLocation: 'pipeline'
          
          # Publish videos
          - task: PublishPipelineArtifact@1
            displayName: 'Publish videos'
            condition: failed()
            inputs:
              targetPath: '$(VIDEO_DIR)'
              artifact: 'smoke-test-videos'
              publishLocation: 'pipeline'
          
          # Publish traces
          - task: PublishPipelineArtifact@1
            displayName: 'Publish traces'
            condition: failed()
            inputs:
              targetPath: '$(TRACE_DIR)'
              artifact: 'smoke-test-traces'
              publishLocation: 'pipeline'
      
      - job: RegressionTest
        displayName: 'Run Regression Tests'
        dependsOn: SmokeTest
        condition: succeeded()
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up JDK
          - task: JavaToolInstaller@0
            displayName: 'Set up JDK 17'
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
          
          # Cache Maven packages
          - task: Cache@2
            displayName: 'Cache Maven packages'
            inputs:
              key: 'maven | "$(Agent.OS)" | pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)
          
          # Download compiled artifacts
          - task: DownloadPipelineArtifact@2
            displayName: 'Download compiled artifacts'
            inputs:
              artifactName: 'compiled-artifacts'
              targetPath: '$(System.DefaultWorkingDirectory)/target'
          
          # Download Playwright cache
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Playwright cache'
            inputs:
              artifactName: 'playwright-cache'
              targetPath: '~/.cache/ms-playwright'
          
          # Run regression tests in parallel
          - task: Maven@3
            displayName: 'Run regression tests'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'test'
              options: '-B -Dcucumber.filter.tags="$(REGRESSION_TAGS)" -Dbrowser=$(BROWSER) -Dheadless=$(HEADLESS) -DwindowSize=$(WINDOW_SIZE) -DbaseUrl=$(BASE_URL) -Dtimeout=$(TIMEOUT) -Dtrace=$(TRACE) -Dvideo=$(VIDEO) -DretryCount=$(RETRY_COUNT) -Dcucumber.execution.parallel.enabled=true -Dcucumber.execution.parallel.config.strategy=fixed -Dcucumber.execution.parallel.config.fixed.parallelism=$(THREAD_COUNT) -Denv=$(ENV) $(MAVEN_OPTS)'
              publishJUnitResults: true
              testResultsFiles: '**/cucumber-reports/cucumber.xml'
              testRunTitle: 'Playwright Regression Tests'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
              isJacocoCoverageReportXML: false
          
          # Publish Cucumber reports
          - task: PublishCucumberReport@1
            displayName: 'Publish Cucumber reports'
            condition: always()
            inputs:
              jsonDir: '$(System.DefaultWorkingDirectory)/target/cucumber-reports'
              outputPath: '$(System.DefaultWorkingDirectory)/target/cucumber-html-reports'
              theme: 'bootstrap'
              reportSuiteAsScenarios: true
              title: 'CSTestForge Playwright Regression Tests'
          
          # Publish CSTestForge reports
          - task: PublishPipelineArtifact@1
            displayName: 'Publish CSTestForge reports'
            condition: always()
            inputs:
              targetPath: '$(CSTESTFORGE_REPORTS_DIR)'
              artifact: 'regression-test-cstestforge-reports'
              publishLocation: 'pipeline'
          
          # Publish screenshots
          - task: PublishPipelineArtifact@1
            displayName: 'Publish screenshots'
            condition: failed()
            inputs:
              targetPath: '$(SCREENSHOT_DIR)'
              artifact: 'regression-test-screenshots'
              publishLocation: 'pipeline'
          
          # Publish videos
          - task: PublishPipelineArtifact@1
            displayName: 'Publish videos'
            condition: failed()
            inputs:
              targetPath: '$(VIDEO_DIR)'
              artifact: 'regression-test-videos'
              publishLocation: 'pipeline'
          
          # Publish traces
          - task: PublishPipelineArtifact@1
            displayName: 'Publish traces'
            condition: failed()
            inputs:
              targetPath: '$(TRACE_DIR)'
              artifact: 'regression-test-traces'
              publishLocation: 'pipeline'
  
  - stage: GenerateAnalysis
    displayName: 'Generate Analysis'
    dependsOn: Test
    condition: succeededOrFailed()
    jobs:
      - job: TestAnalysis
        displayName: 'Generate Test Analysis'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Download test results
          - task: DownloadPipelineArtifact@2
            displayName: 'Download test results'
            inputs:
              artifactName: 'smoke-test-cstestforge-reports'
              targetPath: '$(System.DefaultWorkingDirectory)/smoke-reports'
          
          - task: DownloadPipelineArtifact@2
            displayName: 'Download regression test results'
            inputs:
              artifactName: 'regression-test-cstestforge-reports'
              targetPath: '$(System.DefaultWorkingDirectory)/regression-reports'
          
          # Generate analysis report
          - task: Maven@3
            displayName: 'Generate analysis report'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'exec:java'
              options: '-B -Dexec.mainClass=com.cstestforge.reporting.AnalysisReportGenerator -Dexec.args="--smoke-dir=$(System.DefaultWorkingDirectory)/smoke-reports --regression-dir=$(System.DefaultWorkingDirectory)/regression-reports --output-dir=$(System.DefaultWorkingDirectory)/analysis-report" $(MAVEN_OPTS)'
              publishJUnitResults: false
          
          # Publish analysis report
          - task: PublishPipelineArtifact@1
            displayName: 'Publish analysis report'
            condition: always()
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/analysis-report'
              artifact: 'test-analysis-report'
              publishLocation: 'pipeline'
          
          # Publish HTML report
          - task: PublishHtmlReport@1
            displayName: 'Publish HTML analysis report'
            inputs:
              reportDir: '$(System.DefaultWorkingDirectory)/analysis-report'
              tabName: 'Test Analysis'
  
  - stage: TraceViewer
    displayName: 'Deploy Trace Viewer'
    dependsOn: Test
    condition: succeededOrFailed()
    jobs:
      - job: DeployTraceViewer
        displayName: 'Deploy Playwright Trace Viewer'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Download traces
          - task: DownloadPipelineArtifact@2
            displayName: 'Download smoke test traces'
            condition: succeededOrFailed()
            inputs:
              artifactName: 'smoke-test-traces'
              targetPath: '$(System.DefaultWorkingDirectory)/traces/smoke'
          
          - task: DownloadPipelineArtifact@2
            displayName: 'Download regression test traces'
            condition: succeededOrFailed()
            inputs:
              artifactName: 'regression-test-traces'
              targetPath: '$(System.DefaultWorkingDirectory)/traces/regression'
          
          # Set up Node.js
          - task: NodeTool@0
            displayName: 'Set up Node.js'
            inputs:
              versionSpec: '18.x'
          
          # Install Playwright CLI
          - task: Bash@3
            displayName: 'Install Playwright CLI'
            inputs:
              targetType: 'inline'
              script: |
                npm init -y
                npm install @playwright/test
                npx playwright install chromium
          
          # Create trace viewer index page
          - task: Bash@3
            displayName: 'Create trace viewer index'
            inputs:
              targetType: 'inline'
              script: |
                mkdir -p $(System.DefaultWorkingDirectory)/trace-viewer
                
                # Create HTML index
                cat > $(System.DefaultWorkingDirectory)/trace-viewer/index.html << 'EOF'
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>CSTestForge Playwright Trace Viewer</title>
                    <style>
                        body {
                            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
                            margin: 0;
                            padding: 20px;
                            background-color: #f5f5f5;
                            color: #333;
                        }
                        h1 {
                            color: #C54B8C;
                            margin-bottom: 20px;
                        }
                        h2 {
                            color: #4B8CC5;
                            margin-top: 30px;
                            margin-bottom: 15px;
                        }
                        .container {
                            max-width: 1200px;
                            margin: 0 auto;
                            background-color: white;
                            padding: 30px;
                            border-radius: 8px;
                            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
                        }
                        .trace-list {
                            list-style: none;
                            padding: 0;
                        }
                        .trace-item {
                            margin-bottom: 10px;
                            padding: 10px;
                            background-color: #f9f9f9;
                            border-radius: 4px;
                            border-left: 3px solid #C54B8C;
                        }
                        .trace-item a {
                            color: #C54B8C;
                            text-decoration: none;
                            font-weight: 500;
                        }
                        .trace-item a:hover {
                            text-decoration: underline;
                        }
                        .instructions {
                            background-color: #e9f5ff;
                            padding: 15px;
                            border-radius: 4px;
                            margin-bottom: 20px;
                            border-left: 3px solid #4B8CC5;
                        }
                        .instructions h3 {
                            margin-top: 0;
                            color: #4B8CC5;
                        }
                        .instructions code {
                            background-color: #f0f0f0;
                            padding: 2px 5px;
                            border-radius: 3px;
                            font-family: monospace;
                        }
                        .no-traces {
                            color: #888;
                            font-style: italic;
                        }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <h1>CSTestForge Playwright Trace Viewer</h1>
                        
                        <div class="instructions">
                            <h3>How to View Traces</h3>
                            <p>
                                1. Click on a trace link below to download the trace file<br>
                                2. Use the Playwright Trace Viewer to open the file:<br>
                                <code>npx playwright show-trace path/to/trace.zip</code>
                            </p>
                        </div>
                        
                        <h2>Smoke Test Traces</h2>
                        <div id="smoke-traces">
                            <!-- Smoke test traces will be populated here -->
                        </div>
                        
                        <h2>Regression Test Traces</h2>
                        <div id="regression-traces">
                            <!-- Regression test traces will be populated here -->
                        </div>
                    </div>
                    
                    <script>
                        // Generate trace lists
                        async function generateTraceList() {
                            async function loadTraces(path, containerId) {
                                try {
                                    const response = await fetch(`${path}/traces.json`);
                                    const traces = await response.json();
                                    
                                    const container = document.getElementById(containerId);
                                    
                                    if (traces.length === 0) {
                                        container.innerHTML = '<p class="no-traces">No traces available</p>';
                                        return;
                                    }
                                    
                                    const list = document.createElement('ul');
                                    list.className = 'trace-list';
                                    
                                    traces.forEach(trace => {
                                        const item = document.createElement('li');
                                        item.className = 'trace-item';
                                        
                                        const link = document.createElement('a');
                                        link.href = `${path}/${trace.file}`;
                                        link.textContent = trace.name;
                                        link.download = trace.file;
                                        
                                        item.appendChild(link);
                                        list.appendChild(item);
                                    });
                                    
                                    container.appendChild(list);
                                } catch (error) {
                                    const container = document.getElementById(containerId);
                                    container.innerHTML = '<p class="no-traces">No traces available</p>';
                                }
                            }
                            
                            await loadTraces('smoke', 'smoke-traces');
                            await loadTraces('regression', 'regression-traces');
                        }
                        
                        document.addEventListener('DOMContentLoaded', generateTraceList);
                    </script>
                </body>
                </html>
                EOF
                
                # Create traces.json for both directories
                function create_traces_json() {
                    local dir=$1
                    local output_file="${dir}/traces.json"
                    local traces=()
                    
                    # Find all trace files
                    if [ -d "$dir" ]; then
                        for file in "${dir}"/*.zip; do
                            if [ -f "$file" ]; then
                                filename=$(basename "$file")
                                name="${filename%.zip}"
                                traces+=("{\"name\":\"${name}\",\"file\":\"${filename}\"}")
                            fi
                        done
                    fi
                    
                    # Create JSON array
                    echo "[" > "$output_file"
                    IFS=','
                    echo "${traces[*]}" >> "$output_file"
                    echo "]" >> "$output_file"
                }
                
                mkdir -p $(System.DefaultWorkingDirectory)/trace-viewer/smoke
                mkdir -p $(System.DefaultWorkingDirectory)/trace-viewer/regression
                
                # Copy trace files
                cp -r $(System.DefaultWorkingDirectory)/traces/smoke/*.zip $(System.DefaultWorkingDirectory)/trace-viewer/smoke/ 2>/dev/null || true
                cp -r $(System.DefaultWorkingDirectory)/traces/regression/*.zip $(System.DefaultWorkingDirectory)/trace-viewer/regression/ 2>/dev/null || true
                
                # Create trace indices
                create_traces_json "$(System.DefaultWorkingDirectory)/trace-viewer/smoke"
                create_traces_json "$(System.DefaultWorkingDirectory)/trace-viewer/regression"
          
          # Publish trace viewer
          - task: PublishPipelineArtifact@1
            displayName: 'Publish trace viewer'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/trace-viewer'
              artifact: 'trace-viewer'
              publishLocation: 'pipeline'
          
          # Deploy to Azure Storage
          - task: AzureCLI@2
            displayName: 'Deploy trace viewer to Azure Storage'
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
            inputs:
              azureSubscription: 'AzureServiceConnection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Create storage account if it doesn't exist
                az storage account create --name cstestforgetraces --resource-group CSTestForge --location eastus --sku Standard_LRS --kind StorageV2
                
                # Create container if it doesn't exist
                az storage container create --name bdd-traces --account-name cstestforgetraces --public-access blob
                
                # Upload files
                az storage blob upload-batch --account-name cstestforgetraces --destination bdd-traces --source "$(System.DefaultWorkingDirectory)/trace-viewer" --overwrite true
                
                # Generate SAS token
                end_date=$(date -u -d "30 days" '+%Y-%m-%dT%H:%MZ')
                sas_token=$(az storage container generate-sas --account-name cstestforgetraces --name bdd-traces --permissions r --expiry $end_date -o tsv)
                
                # Get container URL
                container_url=$(az storage container show --account-name cstestforgetraces --name bdd-traces --query "properties.publicAccess" -o tsv)
                
                if [ "$container_url" == "blob" ]; then
                  url="https://cstestforgetraces.blob.core.windows.net/bdd-traces"
                else
                  url="https://cstestforgetraces.blob.core.windows.net/bdd-traces?$sas_token"
                fi
                
                echo "##vso[task.setvariable variable=TraceViewerUrl;isOutput=true]$url"
  
  - stage: Notify
    displayName: 'Notification'
    dependsOn: 
      - GenerateAnalysis
      - TraceViewer
    condition: always()
    jobs:
      - job: SendNotification
        displayName: 'Send Notifications'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Generate notification
          - task: PowerShell@2
            displayName: 'Generate notification'
            inputs:
              targetType: 'inline'
              script: |
                # Get build status
                $buildStatus = "$(Agent.JobStatus)"
                $buildId = "$(Build.BuildId)"
                $buildId = "$(Build.BuildId)"
                $buildNumber = "$(Build.BuildNumber)"
                $buildUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
                $buildReason = "$(Build.Reason)"
                $buildRequestedFor = "$(Build.RequestedFor)"
                
                # Create notification message
                $message = "Build: $buildNumber`r`n"
                $message += "Status: $buildStatus`r`n"
                $message += "Reason: $buildReason`r`n"
                $message += "Requested by: $buildRequestedFor`r`n"
                $message += "Details: $buildUrl`r`n"
                
                # Add trace viewer URL if available
                $traceViewerUrl = "$(dependencies.TraceViewer.outputs['DeployTraceViewer.TraceViewerUrl'])"
                if ($traceViewerUrl) {
                    $message += "Trace Viewer: $traceViewerUrl`r`n"
                }
                
                # Add test analysis URL if available
                $analysisUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=ms.vss-test-web.test-result-details"
                $message += "Test Analysis: $analysisUrl`r`n"
                
                Write-Host "##vso[task.setvariable variable=NotificationMessage]$message"
          
          # Send email notification
          - task: SendEmail@1
            displayName: 'Send email notification'
            condition: always()
            inputs:
              To: '$(NotificationEmail)'
              From: 'azuredevops@cstestforge.dev'
              Subject: 'CSTestForge Playwright BDD Build $(Build.BuildNumber) - $(Agent.JobStatus)'
              Body: '$(NotificationMessage)'
              SmtpServer: '$(SmtpServer)'
              SmtpUsername: '$(SmtpUsername)'
              SmtpPassword: '$(SmtpPassword)'
              UseSsl: true
          
          # Post Teams notification
          - task: PowerShell@2
            displayName: 'Post Teams notification'
            condition: always()
            inputs:
              targetType: 'inline'
              script: |
                $body = @{
                  "@type" = "MessageCard"
                  "@context" = "http://schema.org/extensions"
                  "themeColor" = if ("$(Agent.JobStatus)" -eq "Succeeded") { "00FF00" } else { "FF0000" }
                  "summary" = "CSTestForge Playwright BDD Build $(Build.BuildNumber) - $(Agent.JobStatus)"
                  "sections" = @(
                    @{
                      "activityTitle" = "CSTestForge Playwright BDD Build $(Build.BuildNumber) - $(Agent.JobStatus)"
                      "activitySubtitle" = "Pipeline: $(Build.DefinitionName)"
                      "activityImage" = "https://raw.githubusercontent.com/microsoft/playwright/main/docs/src/assets/images/playwright-logo.svg"
                      "facts" = @(
                        @{
                          "name" = "Status"
                          "value" = "$(Agent.JobStatus)"
                        },
                        @{
                          "name" = "Browser"
                          "value" = "$(BROWSER)"
                        },
                        @{
                          "name" = "Reason"
                          "value" = "$(Build.Reason)"
                        },
                        @{
                          "name" = "Requested by"
                          "value" = "$(Build.RequestedFor)"
                        },
                        @{
                          "name" = "Repository"
                          "value" = "$(Build.Repository.Name)"
                        },
                        @{
                          "name" = "Branch"
                          "value" = "$(Build.SourceBranchName)"
                        }
                      )
                    }
                  )
                  "potentialAction" = @(
                    @{
                      "@type" = "OpenUri"
                      "name" = "View Build Results"
                      "targets" = @(
                        @{
                          "os" = "default"
                          "uri" = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
                        }
                      )
                    },
                    @{
                      "@type" = "OpenUri"
                      "name" = "View Test Analysis"
                      "targets" = @(
                        @{
                          "os" = "default"
                          "uri" = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=ms.vss-test-web.test-result-details"
                        }
                      )
                    },
                    @{
                      "@type" = "OpenUri"
                      "name" = "View Cucumber Reports"
                      "targets" = @(
                        @{
                          "os" = "default"
                          "uri" = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=artifacts&pathAsName=true&type=publishedArtifact"
                        }
                      )
                    }
                  )
                }
                
                # Add trace viewer action if available
                $traceViewerUrl = "$(dependencies.TraceViewer.outputs['DeployTraceViewer.TraceViewerUrl'])"
                if ($traceViewerUrl) {
                    $traceViewerAction = @{
                      "@type" = "OpenUri"
                      "name" = "View Playwright Traces"
                      "targets" = @(
                        @{
                          "os" = "default"
                          "uri" = $traceViewerUrl
                        }
                      )
                    }
                    
                    $body.potentialAction += $traceViewerAction
                }
                
                $jsonBody = ConvertTo-Json -InputObject $body -Depth 10
                
                $parameters = @{
                  Uri = "$(TeamsWebhookUrl)"
                  Method = "POST"
                  Body = $jsonBody
                  ContentType = "application/json"
                }
                
                Invoke-RestMethod @parameters


templates/pipeline/typescript_selenium_testng.yml
------------------------------------------------------

# Azure DevOps Pipeline for CSTestForge Selenium TypeScript TestNG Project
# File: templates/pipeline/typescript_selenium_testng.yml

# Trigger configuration
trigger:
  branches:
    include:
      - main
      - develop
      - feature/*
      - release/*
  paths:
    include:
      - src/**
      - package.json
      - tsconfig.json
    exclude:
      - README.md
      - docs/**

# PR trigger configuration
pr:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - src/**
      - package.json
      - tsconfig.json
    exclude:
      - README.md
      - docs/**

# Pipeline variables
variables:
  # Node.js Configuration
  NODE_VERSION: '18.x'
  NPM_CACHE_FOLDER: $(Pipeline.Workspace)/.npm
  # Test Configuration
  TEST_RESULTS_DIR: '$(System.DefaultWorkingDirectory)/reports/test-results'
  TEST_REPORTS_DIR: '$(System.DefaultWorkingDirectory)/reports/cstestforge-reports'
  SCREENSHOT_DIR: '$(System.DefaultWorkingDirectory)/reports/screenshots'
  LOG_DIR: '$(System.DefaultWorkingDirectory)/reports/logs'
  # Test Execution Configuration
  BROWSER: 'chrome'
  HEADLESS: 'true'
  WINDOW_SIZE: '1920,1080'
  BASE_URL: 'https://demo.cstestforge.dev'
  IMPLICIT_WAIT: '10000'
  EXPLICIT_WAIT: '30000'
  RETRY_COUNT: '2'
  THREAD_COUNT: '3'
  # Test Groups Configuration
  SMOKE_GROUP: 'smoke'
  REGRESSION_GROUP: 'regression'
  # Default Environment
  ENV: 'qa'

# Define pipeline stages
stages:
  - stage: Build
    displayName: 'Build and Compile'
    jobs:
      - job: BuildJob
        displayName: 'Build TypeScript Project'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up Node.js
          - task: NodeTool@0
            displayName: 'Set up Node.js $(NODE_VERSION)'
            inputs:
              versionSpec: '$(NODE_VERSION)'
          
          # Cache npm packages
          - task: Cache@2
            displayName: 'Cache npm packages'
            inputs:
              key: 'npm | "$(Agent.OS)" | package.json | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)" | package.json
                npm | "$(Agent.OS)"
              path: $(NPM_CACHE_FOLDER)
          
          # Install dependencies
          - task: Npm@1
            displayName: 'Install dependencies'
            inputs:
              command: 'install'
              workingDir: '$(System.DefaultWorkingDirectory)'
              verbose: false
          
          # Run lint
          - task: Npm@1
            displayName: 'Run lint'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run lint'
          
          # Build project
          - task: Npm@1
            displayName: 'Build project'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run build'
          
          # Create reports directory
          - task: Bash@3
            displayName: 'Create reports directory'
            inputs:
              targetType: 'inline'
              script: |
                mkdir -p $(TEST_RESULTS_DIR)
                mkdir -p $(TEST_REPORTS_DIR)
                mkdir -p $(SCREENSHOT_DIR)
                mkdir -p $(LOG_DIR)
          
          # Install WebDriver
          - task: Npm@1
            displayName: 'Install WebDriver'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run webdriver:update'
          
          # Publish build artifacts
          - task: PublishPipelineArtifact@1
            displayName: 'Publish build artifacts'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/dist'
              artifact: 'compiled-artifacts'
              publishLocation: 'pipeline'
          
          # Publish node_modules as artifact to preserve WebDriver binaries
          - task: PublishPipelineArtifact@1
            displayName: 'Publish node_modules'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/node_modules'
              artifact: 'node_modules'
              publishLocation: 'pipeline'

  - stage: Test
    displayName: 'Run Tests'
    dependsOn: Build
    jobs:
      - job: SmokeTest
        displayName: 'Run Smoke Tests'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up Node.js
          - task: NodeTool@0
            displayName: 'Set up Node.js $(NODE_VERSION)'
            inputs:
              versionSpec: '$(NODE_VERSION)'
          
          # Download build artifacts
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifactName: 'compiled-artifacts'
              targetPath: '$(System.DefaultWorkingDirectory)/dist'
          
          # Download node_modules
          - task: DownloadPipelineArtifact@2
            displayName: 'Download node_modules'
            inputs:
              artifactName: 'node_modules'
              targetPath: '$(System.DefaultWorkingDirectory)/node_modules'
          
          # Install Chrome
          - task: Bash@3
            displayName: 'Install Chrome'
            inputs:
              targetType: 'inline'
              script: |
                wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
                echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
                sudo apt-get update
                sudo apt-get install -y google-chrome-stable
                google-chrome --version
          
          # Create reports directory
          - task: Bash@3
            displayName: 'Create reports directory'
            inputs:
              targetType: 'inline'
              script: |
                mkdir -p $(TEST_RESULTS_DIR)
                mkdir -p $(TEST_REPORTS_DIR)
                mkdir -p $(SCREENSHOT_DIR)
                mkdir -p $(LOG_DIR)
          
          # Run smoke tests
          - task: Npm@1
            displayName: 'Run smoke tests'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run test:smoke -- --browser=$(BROWSER) --headless=$(HEADLESS) --windowSize=$(WINDOW_SIZE) --baseUrl=$(BASE_URL) --implicitWait=$(IMPLICIT_WAIT) --explicitWait=$(EXPLICIT_WAIT) --retryCount=$(RETRY_COUNT) --env=$(ENV)'
            continueOnError: true
          
          # Publish test results
          - task: PublishTestResults@2
            displayName: 'Publish test results'
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '$(TEST_RESULTS_DIR)/*.xml'
              mergeTestResults: true
              testRunTitle: 'Selenium TypeScript Smoke Tests'
              failTaskOnFailedTests: false
          
          # Publish CSTestForge reports
          - task: PublishPipelineArtifact@1
            displayName: 'Publish CSTestForge reports'
            condition: always()
            inputs:
              targetPath: '$(TEST_REPORTS_DIR)'
              artifact: 'smoke-test-reports'
              publishLocation: 'pipeline'
          
          # Publish screenshots
          - task: PublishPipelineArtifact@1
            displayName: 'Publish screenshots'
            condition: true
            inputs:
              targetPath: '$(SCREENSHOT_DIR)'
              artifact: 'smoke-test-screenshots'
              publishLocation: 'pipeline'
          
          # Publish logs
          - task: PublishPipelineArtifact@1
            displayName: 'Publish logs'
            condition: always()
            inputs:
              targetPath: '$(LOG_DIR)'
              artifact: 'smoke-test-logs'
              publishLocation: 'pipeline'
      
      - job: RegressionTest
        displayName: 'Run Regression Tests'
        dependsOn: SmokeTest
        condition: succeeded()
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up Node.js
          - task: NodeTool@0
            displayName: 'Set up Node.js $(NODE_VERSION)'
            inputs:
              versionSpec: '$(NODE_VERSION)'
          
          # Download build artifacts
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifactName: 'compiled-artifacts'
              targetPath: '$(System.DefaultWorkingDirectory)/dist'
          
          # Download node_modules
          - task: DownloadPipelineArtifact@2
            displayName: 'Download node_modules'
            inputs:
              artifactName: 'node_modules'
              targetPath: '$(System.DefaultWorkingDirectory)/node_modules'
          
          # Install Chrome
          - task: Bash@3
            displayName: 'Install Chrome'
            inputs:
              targetType: 'inline'
              script: |
                wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
                echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
                sudo apt-get update
                sudo apt-get install -y google-chrome-stable
                google-chrome --version
          
          # Create reports directory
          - task: Bash@3
            displayName: 'Create reports directory'
            inputs:
              targetType: 'inline'
              script: |
                mkdir -p $(TEST_RESULTS_DIR)
                mkdir -p $(TEST_REPORTS_DIR)
                mkdir -p $(SCREENSHOT_DIR)
                mkdir -p $(LOG_DIR)
          
          # Run regression tests in parallel
          - task: Npm@1
            displayName: 'Run regression tests'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run test:regression -- --browser=$(BROWSER) --headless=$(HEADLESS) --windowSize=$(WINDOW_SIZE) --baseUrl=$(BASE_URL) --implicitWait=$(IMPLICIT_WAIT) --explicitWait=$(EXPLICIT_WAIT) --retryCount=$(RETRY_COUNT) --threads=$(THREAD_COUNT) --env=$(ENV)'
            continueOnError: true
          
          # Publish test results
          - task: PublishTestResults@2
            displayName: 'Publish test results'
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '$(TEST_RESULTS_DIR)/*.xml'
              mergeTestResults: true
              testRunTitle: 'Selenium TypeScript Regression Tests'
              failTaskOnFailedTests: false
          
          # Publish CSTestForge reports
          - task: PublishPipelineArtifact@1
            displayName: 'Publish CSTestForge reports'
            condition: always()
            inputs:
              targetPath: '$(TEST_REPORTS_DIR)'
              artifact: 'regression-test-reports'
              publishLocation: 'pipeline'
          
          # Publish screenshots
          - task: PublishPipelineArtifact@1
            displayName: 'Publish screenshots'
            condition: true
            inputs:
              targetPath: '$(SCREENSHOT_DIR)'
              artifact: 'regression-test-screenshots'
              publishLocation: 'pipeline'
          
          # Publish logs
          - task: PublishPipelineArtifact@1
            displayName: 'Publish logs'
            condition: always()
            inputs:
              targetPath: '$(LOG_DIR)'
              artifact: 'regression-test-logs'
              publishLocation: 'pipeline'
  
  - stage: GenerateReports
    displayName: 'Generate Reports'
    dependsOn: Test
    condition: succeededOrFailed()
    jobs:
      - job: MergeReports
        displayName: 'Merge Test Reports'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up Node.js
          - task: NodeTool@0
            displayName: 'Set up Node.js $(NODE_VERSION)'
            inputs:
              versionSpec: '$(NODE_VERSION)'
          
          # Download all test reports
          - task: DownloadPipelineArtifact@2
            displayName: 'Download smoke test reports'
            inputs:
              artifactName: 'smoke-test-reports'
              targetPath: '$(System.DefaultWorkingDirectory)/reports/smoke'
          
          - task: DownloadPipelineArtifact@2
            displayName: 'Download regression test reports'
            inputs:
              artifactName: 'regression-test-reports'
              targetPath: '$(System.DefaultWorkingDirectory)/reports/regression'
          
          # Download screenshots
          - task: DownloadPipelineArtifact@2
            displayName: 'Download screenshots'
            inputs:
              artifactName: 'smoke-test-screenshots'
              targetPath: '$(System.DefaultWorkingDirectory)/reports/combined-screenshots/smoke'
          
          - task: DownloadPipelineArtifact@2
            displayName: 'Download regression screenshots'
            inputs:
              artifactName: 'regression-test-screenshots'
              targetPath: '$(System.DefaultWorkingDirectory)/reports/combined-screenshots/regression'
          
          # Download node_modules
          - task: DownloadPipelineArtifact@2
            displayName: 'Download node_modules'
            inputs:
              artifactName: 'node_modules'
              targetPath: '$(System.DefaultWorkingDirectory)/node_modules'
          
          # Create merged reports directory
          - task: Bash@3
            displayName: 'Create merged reports directory'
            inputs:
              targetType: 'inline'
              script: |
                mkdir -p $(System.DefaultWorkingDirectory)/reports/merged
          
          # Generate merged report
          - task: Npm@1
            displayName: 'Generate merged report'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run report:merge -- --smokeDir=$(System.DefaultWorkingDirectory)/reports/smoke --regressionDir=$(System.DefaultWorkingDirectory)/reports/regression --screenshotsDir=$(System.DefaultWorkingDirectory)/reports/combined-screenshots --outputDir=$(System.DefaultWorkingDirectory)/reports/merged'
          
          # Publish merged report
          - task: PublishPipelineArtifact@1
            displayName: 'Publish merged report'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/reports/merged'
              artifact: 'merged-report'
              publishLocation: 'pipeline'
          
          # Publish HTML report
          - task: PublishHtmlReport@1
            displayName: 'Publish HTML report'
            inputs:
              reportDir: '$(System.DefaultWorkingDirectory)/reports/merged/html'
              tabName: 'Test Report'
  
  - stage: Notify
    displayName: 'Notification'
    dependsOn: GenerateReports
    condition: always()
    jobs:
      - job: SendNotification
        displayName: 'Send Notifications'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Generate notification
          - task: PowerShell@2
            displayName: 'Generate notification'
            inputs:
              targetType: 'inline'
              script: |
                # Get build status
                $buildStatus = "$(Agent.JobStatus)"
                $buildId = "$(Build.BuildId)"
                $buildNumber = "$(Build.BuildNumber)"
                $buildUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
                $buildReason = "$(Build.Reason)"
                $buildRequestedFor = "$(Build.RequestedFor)"
                
                # Create notification message
                $message = "Build: $buildNumber`r`n"
                $message += "Status: $buildStatus`r`n"
                $message += "Reason: $buildReason`r`n"
                $message += "Requested by: $buildRequestedFor`r`n"
                $message += "Details: $buildUrl`r`n"
                
                # Add test report URL
                $reportUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=artifacts&pathAsName=true&type=publishedArtifact"
                $message += "Test Report: $reportUrl`r`n"
                
                Write-Host "##vso[task.setvariable variable=NotificationMessage]$message"
          
          # Send email notification
          - task: SendEmail@1
            displayName: 'Send email notification'
            condition: always()
            inputs:
              To: '$(NotificationEmail)'
              From: 'azuredevops@cstestforge.dev'
              Subject: 'CSTestForge TypeScript Selenium Build $(Build.BuildNumber) - $(Agent.JobStatus)'
              Body: '$(NotificationMessage)'
              SmtpServer: '$(SmtpServer)'
              SmtpUsername: '$(SmtpUsername)'
              SmtpPassword: '$(SmtpPassword)'
              UseSsl: true
          
          # Post Teams notification
          - task: PowerShell@2
            displayName: 'Post Teams notification'
            condition: always()
            inputs:
              targetType: 'inline'
              script: |
                $body = @{
                  "@type" = "MessageCard"
                  "@context" = "http://schema.org/extensions"
                  "themeColor" = if ("$(Agent.JobStatus)" -eq "Succeeded") { "00FF00" } else { "FF0000" }
                  "summary" = "CSTestForge TypeScript Selenium Build $(Build.BuildNumber) - $(Agent.JobStatus)"
                  "sections" = @(
                    @{
                      "activityTitle" = "CSTestForge TypeScript Selenium Build $(Build.BuildNumber) - $(Agent.JobStatus)"
                      "activitySubtitle" = "Pipeline: $(Build.DefinitionName)"
                      "activityImage" = "https://raw.githubusercontent.com/SeleniumHQ/selenium/trunk/common/images/selenium_logo_square_green.png"
                      "facts" = @(
                        @{
                          "name" = "Status"
                          "value" = "$(Agent.JobStatus)"
                        },
                        @{
                          "name" = "Browser"
                          "value" = "$(BROWSER)"
                        },
                        @{
                          "name" = "Reason"
                          "value" = "$(Build.Reason)"
                        },
                        @{
                          "name" = "Requested by"
                          "value" = "$(Build.RequestedFor)"
                        },
                        @{
                          "name" = "Repository"
                          "value" = "$(Build.Repository.Name)"
                        },
                        @{
                          "name" = "Branch"
                          "value" = "$(Build.SourceBranchName)"
                        }
                      )
                    }
                  )
                  "potentialAction" = @(
                    @{
                      "@type" = "OpenUri"
                      "name" = "View Build Results"
                      "targets" = @(
                        @{
                          "os" = "default"
                          "uri" = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
                        }
                      )
                    },
                    @{
                      "@type" = "OpenUri"
                      "name" = "View Test Report"
                      "targets" = @(
                        @{
                          "os" = "default"
                          "uri" = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=artifacts&pathAsName=true&type=publishedArtifact"
                        }
                      )
                    },
                    @{
                      "@type" = "OpenUri"
                      "name" = "View Test Results"
                      "targets" = @(
                        @{
                          "os" = "default"
                          "uri" = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=ms.vss-test-web.test-result-details"
                        }
                      )
                    }
                  )
                }
                
                $jsonBody = ConvertTo-Json -InputObject $body -Depth 10
                
                $parameters = @{
                  Uri = "$(TeamsWebhookUrl)"
                  Method = "POST"
                  Body = $jsonBody
                  ContentType = "application/json"
                }
                
                Invoke-RestMethod @parameters


templates/pipeline/typescript_selenium_bdd.yml
--------------------------------------------------

# Azure DevOps Pipeline for CSTestForge Selenium TypeScript BDD Project
# File: templates/pipeline/typescript_selenium_bdd.yml

# Trigger configuration
trigger:
  branches:
    include:
      - main
      - develop
      - feature/*
      - release/*
  paths:
    include:
      - src/**
      - features/**
      - package.json
      - tsconfig.json
      - cucumber.js
    exclude:
      - README.md
      - docs/**

# PR trigger configuration
pr:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - src/**
      - features/**
      - package.json
      - tsconfig.json
      - cucumber.js
    exclude:
      - README.md
      - docs/**

# Pipeline variables
variables:
  # Node.js Configuration
  NODE_VERSION: '18.x'
  NPM_CACHE_FOLDER: $(Pipeline.Workspace)/.npm
  # Test Configuration
  CUCUMBER_REPORTS_DIR: '$(System.DefaultWorkingDirectory)/reports/cucumber'
  CSTESTFORGE_REPORTS_DIR: '$(System.DefaultWorkingDirectory)/reports/cstestforge-reports'
  SCREENSHOT_DIR: '$(System.DefaultWorkingDirectory)/reports/screenshots'
  LOG_DIR: '$(System.DefaultWorkingDirectory)/reports/logs'
  # Test Execution Configuration
  BROWSER: 'chrome'
  HEADLESS: 'true'
  WINDOW_SIZE: '1920,1080'
  BASE_URL: 'https://demo.cstestforge.dev'
  TIMEOUT: '30000'
  RETRY_COUNT: '2'
  THREAD_COUNT: '3'
  # Test Tags Configuration
  SMOKE_TAGS: '@smoke'
  REGRESSION_TAGS: '@regression'
  # Default Environment
  ENV: 'qa'

# Define pipeline stages
stages:
  - stage: Build
    displayName: 'Build and Compile'
    jobs:
      - job: BuildJob
        displayName: 'Build TypeScript Project'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up Node.js
          - task: NodeTool@0
            displayName: 'Set up Node.js $(NODE_VERSION)'
            inputs:
              versionSpec: '$(NODE_VERSION)'
          
          # Cache npm packages
          - task: Cache@2
            displayName: 'Cache npm packages'
            inputs:
              key: 'npm | "$(Agent.OS)" | package.json | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)" | package.json
                npm | "$(Agent.OS)"
              path: $(NPM_CACHE_FOLDER)
          
          # Install dependencies
          - task: Npm@1
            displayName: 'Install dependencies'
            inputs:
              command: 'install'
              workingDir: '$(System.DefaultWorkingDirectory)'
              verbose: false
          
          # Run lint
          - task: Npm@1
            displayName: 'Run lint'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run lint'
          
          # Build project
          - task: Npm@1
            displayName: 'Build project'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run build'
          
          # Validate Cucumber features
          - task: Npm@1
            displayName: 'Validate Cucumber features'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run cucumber:validate'
          
          # Create reports directory
          - task: Bash@3
            displayName: 'Create reports directory'
            inputs:
              targetType: 'inline'
              script: |
                mkdir -p $(CUCUMBER_REPORTS_DIR)
                mkdir -p $(CSTESTFORGE_REPORTS_DIR)
                mkdir -p $(SCREENSHOT_DIR)
                mkdir -p $(LOG_DIR)
          
          # Install WebDriver
          - task: Npm@1
            displayName: 'Install WebDriver'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run webdriver:update'
          
          # Publish build artifacts
          - task: PublishPipelineArtifact@1
            displayName: 'Publish build artifacts'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/dist'
              artifact: 'compiled-artifacts'
              publishLocation: 'pipeline'
          
          # Publish node_modules as artifact to preserve WebDriver binaries
          - task: PublishPipelineArtifact@1
            displayName: 'Publish node_modules'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/node_modules'
              artifact: 'node_modules'
              publishLocation: 'pipeline'

  - stage: Test
    displayName: 'Run Tests'
    dependsOn: Build
    jobs:
      - job: SmokeTest
        displayName: 'Run Smoke Tests'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up Node.js
          - task: NodeTool@0
            displayName: 'Set up Node.js $(NODE_VERSION)'
            inputs:
              versionSpec: '$(NODE_VERSION)'
          
          # Download build artifacts
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifactName: 'compiled-artifacts'
              targetPath: '$(System.DefaultWorkingDirectory)/dist'
          
          # Download node_modules
          - task: DownloadPipelineArtifact@2
            displayName: 'Download node_modules'
            inputs:
              artifactName: 'node_modules'
              targetPath: '$(System.DefaultWorkingDirectory)/node_modules'
          
          # Install Chrome
          - task: Bash@3
            displayName: 'Install Chrome'
            inputs:
              targetType: 'inline'
              script: |
                wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
                echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
                sudo apt-get update
                sudo apt-get install -y google-chrome-stable
                google-chrome --version
          
          # Create reports directory
          - task: Bash@3
            displayName: 'Create reports directory'
            inputs:
              targetType: 'inline'
              script: |
                mkdir -p $(CUCUMBER_REPORTS_DIR)
                mkdir -p $(CSTESTFORGE_REPORTS_DIR)
                mkdir -p $(SCREENSHOT_DIR)
                mkdir -p $(LOG_DIR)
          
          # Run smoke tests
          - task: Npm@1
            displayName: 'Run smoke tests'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run cucumber -- --tags "$(SMOKE_TAGS)" --browser=$(BROWSER) --headless=$(HEADLESS) --windowSize=$(WINDOW_SIZE) --baseUrl=$(BASE_URL) --timeout=$(TIMEOUT) --retryCount=$(RETRY_COUNT) --env=$(ENV)'
            continueOnError: true
          
          # Generate Cucumber report
          - task: Npm@1
            displayName: 'Generate Cucumber report'
            condition: always()
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run report:cucumber'
          
          # Publish Cucumber reports
          - task: PublishCucumberReport@1
            displayName: 'Publish Cucumber reports'
            condition: always()
            inputs:
              jsonDir: '$(CUCUMBER_REPORTS_DIR)'
              outputPath: '$(System.DefaultWorkingDirectory)/reports/cucumber-html-reports'
              theme: 'bootstrap'
              reportSuiteAsScenarios: true
              title: 'CSTestForge Selenium TypeScript Smoke Tests'
          
          # Publish CSTestForge reports
          - task: PublishPipelineArtifact@1
            displayName: 'Publish CSTestForge reports'
            condition: always()
            inputs:
              targetPath: '$(CSTESTFORGE_REPORTS_DIR)'
              artifact: 'smoke-test-reports'
              publishLocation: 'pipeline'
          
          # Publish screenshots
          - task: PublishPipelineArtifact@1
            displayName: 'Publish screenshots'
            condition: true
            inputs:
              targetPath: '$(SCREENSHOT_DIR)'
              artifact: 'smoke-test-screenshots'
              publishLocation: 'pipeline'
          
          # Publish logs
          - task: PublishPipelineArtifact@1
            displayName: 'Publish logs'
            condition: always()
            inputs:
              targetPath: '$(LOG_DIR)'
              artifact: 'smoke-test-logs'
              publishLocation: 'pipeline'
      
      - job: RegressionTest
        displayName: 'Run Regression Tests'
        dependsOn: SmokeTest
        condition: succeeded()
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up Node.js
          - task: NodeTool@0
            displayName: 'Set up Node.js $(NODE_VERSION)'
            inputs:
              versionSpec: '$(NODE_VERSION)'
          
          # Download build artifacts
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifactName: 'compiled-artifacts'
              targetPath: '$(System.DefaultWorkingDirectory)/dist'
          
          # Download node_modules
          - task: DownloadPipelineArtifact@2
            displayName: 'Download node_modules'
            inputs:
              artifactName: 'node_modules'
              targetPath: '$(System.DefaultWorkingDirectory)/node_modules'
          
          # Install Chrome
          - task: Bash@3
            displayName: 'Install Chrome'
            inputs:
              targetType: 'inline'
              script: |
                wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
                echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
                sudo apt-get update
                sudo apt-get install -y google-chrome-stable
                google-chrome --version
          
          # Create reports directory
          - task: Bash@3
            displayName: 'Create reports directory'
            inputs:
              targetType: 'inline'
              script: |
                mkdir -p $(CUCUMBER_REPORTS_DIR)
                mkdir -p $(CSTESTFORGE_REPORTS_DIR)
                mkdir -p $(SCREENSHOT_DIR)
                mkdir -p $(LOG_DIR)
          
          # Run regression tests in parallel
          - task: Npm@1
            displayName: 'Run regression tests'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run cucumber:parallel -- --tags "$(REGRESSION_TAGS)" --browser=$(BROWSER) --headless=$(HEADLESS) --windowSize=$(WINDOW_SIZE) --baseUrl=$(BASE_URL) --timeout=$(TIMEOUT) --retryCount=$(RETRY_COUNT) --parallel=$(THREAD_COUNT) --env=$(ENV)'
            continueOnError: true
          
          # Generate Cucumber report
          - task: Npm@1
            displayName: 'Generate Cucumber report'
            condition: always()
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run report:cucumber'
          
          # Publish Cucumber reports
          - task: PublishCucumberReport@1
            displayName: 'Publish Cucumber reports'
            condition: always()
            inputs:
              jsonDir: '$(CUCUMBER_REPORTS_DIR)'
              outputPath: '$(System.DefaultWorkingDirectory)/reports/cucumber-html-reports'
              theme: 'bootstrap'
              reportSuiteAsScenarios: true
              title: 'CSTestForge Selenium TypeScript Regression Tests'
          
          # Publish CSTestForge reports
          - task: PublishPipelineArtifact@1
            displayName: 'Publish CSTestForge reports'
            condition: always()
            inputs:
              targetPath: '$(CSTESTFORGE_REPORTS_DIR)'
              artifact: 'regression-test-reports'
              publishLocation: 'pipeline'
          
          # Publish screenshots
          - task: PublishPipelineArtifact@1
            displayName: 'Publish screenshots'
            condition: true
            inputs:
              targetPath: '$(SCREENSHOT_DIR)'
              artifact: 'regression-test-screenshots'
              publishLocation: 'pipeline'
          
          # Publish logs
          - task: PublishPipelineArtifact@1
            displayName: 'Publish logs'
            condition: always()
            inputs:
              targetPath: '$(LOG_DIR)'
              artifact: 'regression-test-logs'
              publishLocation: 'pipeline'
  
  - stage: GenerateReports
    displayName: 'Generate Reports'
    dependsOn: Test
    condition: succeededOrFailed()
    jobs:
      - job: MergeReports
        displayName: 'Merge Test Reports'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up Node.js
          - task: NodeTool@0
            displayName: 'Set up Node.js $(NODE_VERSION)'
            inputs:
              versionSpec: '$(NODE_VERSION)'
          
          # Download all test reports
          - task: DownloadPipelineArtifact@2
            displayName: 'Download smoke test reports'
            inputs:
              artifactName: 'smoke-test-reports'
              targetPath: '$(System.DefaultWorkingDirectory)/reports/smoke'
          
          - task: DownloadPipelineArtifact@2
            displayName: 'Download regression test reports'
            inputs:
              artifactName: 'regression-test-reports'
              targetPath: '$(System.DefaultWorkingDirectory)/reports/regression'
          
          # Download screenshots
          - task: DownloadPipelineArtifact@2
            displayName: 'Download screenshots'
            inputs:
              artifactName: 'smoke-test-screenshots'
              targetPath: '$(System.DefaultWorkingDirectory)/reports/combined-screenshots/smoke'
          
          - task: DownloadPipelineArtifact@2
            displayName: 'Download regression screenshots'
            inputs:
              artifactName: 'regression-test-screenshots'
              targetPath: '$(System.DefaultWorkingDirectory)/reports/combined-screenshots/regression'
          
          # Download node_modules
          - task: DownloadPipelineArtifact@2
            displayName: 'Download node_modules'
            inputs:
              artifactName: 'node_modules'
              targetPath: '$(System.DefaultWorkingDirectory)/node_modules'
          
          # Create merged reports directory
          - task: Bash@3
            displayName: 'Create merged reports directory'
            inputs:
              targetType: 'inline'
              script: |
                mkdir -p $(System.DefaultWorkingDirectory)/reports/merged
          
          # Generate merged report
          - task: Npm@1
            displayName: 'Generate merged report'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run report:merge -- --smokeDir=$(System.DefaultWorkingDirectory)/reports/smoke --regressionDir=$(System.DefaultWorkingDirectory)/reports/regression --screenshotsDir=$(System.DefaultWorkingDirectory)/reports/combined-screenshots --outputDir=$(System.DefaultWorkingDirectory)/reports/merged'
          
          # Merge Cucumber reports
          - task: Npm@1
            displayName: 'Merge Cucumber reports'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run report:cucumber:merge'
          
          # Publish merged reports
          - task: PublishPipelineArtifact@1
            displayName: 'Publish merged reports'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/reports/merged'
              artifact: 'merged-reports'
              publishLocation: 'pipeline'
          
          # Publish merged Cucumber reports
          - task: PublishCucumberReport@1
            displayName: 'Publish merged Cucumber reports'
            condition: always()
            inputs:
              jsonDir: '$(System.DefaultWorkingDirectory)/reports/merged/cucumber'
              outputPath: '$(System.DefaultWorkingDirectory)/reports/merged/cucumber-html'
              theme: 'bootstrap'
              reportSuiteAsScenarios: true
              title: 'CSTestForge Selenium TypeScript BDD Tests'
          
          # Publish HTML report
          - task: PublishHtmlReport@1
            displayName: 'Publish HTML report'
            inputs:
              reportDir: '$(System.DefaultWorkingDirectory)/reports/merged/html'
              tabName: 'Test Report'
          
          # Publish Cucumber HTML report
          - task: PublishHtmlReport@1
            displayName: 'Publish Cucumber HTML report'
            inputs:
              reportDir: '$(System.DefaultWorkingDirectory)/reports/merged/cucumber-html'
              tabName: 'Cucumber Report'
  
  - stage: Notify
    displayName: 'Notification'
    dependsOn: GenerateReports
    condition: always()
    jobs:
      - job: SendNotification
        displayName: 'Send Notifications'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Generate notification
          - task: PowerShell@2
            displayName: 'Generate notification'
            inputs:
              targetType: 'inline'
              script: |
                # Get build status
                $buildStatus = "$(Agent.JobStatus)"
                $buildId = "$(Build.BuildId)"
                $buildNumber = "$(Build.BuildNumber)"
                $buildUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
                $buildReason = "$(Build.Reason)"
                $buildRequestedFor = "$(Build.RequestedFor)"
                
                # Create notification message
                $message = "Build: $buildNumber`r`n"
                $message += "Status: $buildStatus`r`n"
                $message += "Reason: $buildReason`r`n"
                $message += "Requested by: $buildRequestedFor`r`n"
                $message += "Details: $buildUrl`r`n"
                
                # Add test report URLs
                $reportUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=artifacts&pathAsName=true&type=publishedArtifact"
                $cucumberUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=ms.vss-test-web.test-result-details"
                $message += "Test Report: $reportUrl`r`n"
                $message += "Cucumber Report: $cucumberUrl`r`n"
                
                Write-Host "##vso[task.setvariable variable=NotificationMessage]$message"
          
          # Send email notification
          - task: SendEmail@1
            displayName: 'Send email notification'
            condition: always()
            inputs:
              To: '$(NotificationEmail)'
              From: 'azuredevops@cstestforge.dev'
              Subject: 'CSTestForge TypeScript BDD Build $(Build.BuildNumber) - $(Agent.JobStatus)'
              Body: '$(NotificationMessage)'
              SmtpServer: '$(SmtpServer)'
              SmtpUsername: '$(SmtpUsername)'
              SmtpPassword: '$(SmtpPassword)'
              UseSsl: true
          
          # Post Teams notification
          - task: PowerShell@2
            displayName: 'Post Teams notification'
            condition: always()
            inputs:
              targetType: 'inline'
              script: |
                $body = @{
                  "@type" = "MessageCard"
                  "@context" = "http://schema.org/extensions"
                  "themeColor" = if ("$(Agent.JobStatus)" -eq "Succeeded") { "00FF00" } else { "FF0000" }
                  "summary" = "CSTestForge TypeScript BDD Build $(Build.BuildNumber) - $(Agent.JobStatus)"
                  "sections" = @(
                    @{
                      "activityTitle" = "CSTestForge TypeScript BDD Build $(Build.BuildNumber) - $(Agent.JobStatus)"
                      "activitySubtitle" = "Pipeline: $(Build.DefinitionName)"
                      "activityImage" = "https://raw.githubusercontent.com/SeleniumHQ/selenium/trunk/common/images/selenium_logo_square_green.png"
                      "facts" = @(
                        @{
                          "name" = "Status"
                          "value" = "$(Agent.JobStatus)"
                        },
                        @{
                          "name" = "Browser"
                          "value" = "$(BROWSER)"
                        },
                        @{
                          "name" = "Reason"
                          "value" = "$(Build.Reason)"
                        },
                        @{
                          "name" = "Requested by"
                          "value" = "$(Build.RequestedFor)"
                        },
                        @{
                          "name" = "Repository"
                          "value" = "$(Build.Repository.Name)"
                        },
                        @{
                          "name" = "Branch"
                          "value" = "$(Build.SourceBranchName)"
                        }
                      )
                    }
                  )
                  "potentialAction" = @(
                    @{
                      "@type" = "OpenUri"
                      "name" = "View Build Results"
                      "targets" = @(
                        @{
                          "os" = "default"
                          "uri" = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
                        }
                      )
                    },
                    @{
                      "@type" = "OpenUri"
                      "name" = "View Test Report"
                      "targets" = @(
                        @{
                          "os" = "default"
                          "uri" = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=artifacts&pathAsName=true&type=publishedArtifact"
                        }
                      )
                    },
                    @{
                      "@type" = "OpenUri"
                      "name" = "View Cucumber Report"
                      "targets" = @(
                        @{
                          "os" = "default"
                          "uri" = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=ms.vss-test-web.test-result-details"
                        }
                      )
                    }
                  )
                }
                
                $jsonBody = ConvertTo-Json -InputObject $body -Depth 10
                
                $parameters = @{
                  Uri = "$(TeamsWebhookUrl)"
                  Method = "POST"
                  Body = $jsonBody
                  ContentType = "application/json"
                }
                
                Invoke-RestMethod @parameters


templates/pipeline/typescript_playwright_testng.yml
----------------------------------------------------------

# Azure DevOps Pipeline for CSTestForge Playwright TypeScript TestNG Project
# File: templates/pipeline/typescript_playwright_testng.yml

# Trigger configuration
trigger:
  branches:
    include:
      - main
      - develop
      - feature/*
      - release/*
  paths:
    include:
      - src/**
      - package.json
      - tsconfig.json
    exclude:
      - README.md
      - docs/**

# PR trigger configuration
pr:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - src/**
      - package.json
      - tsconfig.json
    exclude:
      - README.md
      - docs/**

# Pipeline variables
variables:
  # Node.js Configuration
  NODE_VERSION: '18.x'
  NPM_CACHE_FOLDER: $(Pipeline.Workspace)/.npm
  PLAYWRIGHT_BROWSERS_PATH: $(Pipeline.Workspace)/ms-playwright
  # Test Configuration
  TEST_RESULTS_DIR: '$(System.DefaultWorkingDirectory)/reports/test-results'
  TEST_REPORTS_DIR: '$(System.DefaultWorkingDirectory)/reports/cstestforge-reports'
  SCREENSHOT_DIR: '$(System.DefaultWorkingDirectory)/reports/screenshots'
  VIDEO_DIR: '$(System.DefaultWorkingDirectory)/reports/videos'
  TRACE_DIR: '$(System.DefaultWorkingDirectory)/reports/traces'
  LOG_DIR: '$(System.DefaultWorkingDirectory)/reports/logs'
  # Test Execution Configuration
  BROWSER: 'chromium'
  HEADLESS: 'true'
  WINDOW_SIZE: '1920,1080'
  BASE_URL: 'https://demo.cstestforge.dev'
  TIMEOUT: '30000'
  TRACE: 'on-failure'
  VIDEO: 'on-failure'
  RETRY_COUNT: '2'
  THREAD_COUNT: '3'
  # Test Groups Configuration
  SMOKE_GROUP: 'smoke'
  REGRESSION_GROUP: 'regression'
  # Default Environment
  ENV: 'qa'

# Define pipeline stages
stages:
  - stage: Build
    displayName: 'Build and Compile'
    jobs:
      - job: BuildJob
        displayName: 'Build TypeScript Project'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up Node.js
          - task: NodeTool@0
            displayName: 'Set up Node.js $(NODE_VERSION)'
            inputs:
              versionSpec: '$(NODE_VERSION)'
          
          # Cache npm packages
          - task: Cache@2
            displayName: 'Cache npm packages'
            inputs:
              key: 'npm | "$(Agent.OS)" | package.json | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)" | package.json
                npm | "$(Agent.OS)"
              path: $(NPM_CACHE_FOLDER)
          
          # Cache Playwright browsers
          - task: Cache@2
            displayName: 'Cache Playwright browsers'
            inputs:
              key: 'playwright-browsers | "$(Agent.OS)" | package.json'
              restoreKeys: |
                playwright-browsers | "$(Agent.OS)"
              path: $(PLAYWRIGHT_BROWSERS_PATH)
          
          # Install dependencies
          - task: Npm@1
            displayName: 'Install dependencies'
            inputs:
              command: 'install'
              workingDir: '$(System.DefaultWorkingDirectory)'
              verbose: false
          
          # Install Playwright browsers
          - task: Npm@1
            displayName: 'Install Playwright browsers'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'exec playwright install --with-deps chromium firefox webkit'
            env:
              PLAYWRIGHT_BROWSERS_PATH: $(PLAYWRIGHT_BROWSERS_PATH)
          
          # Run lint
          - task: Npm@1
            displayName: 'Run lint'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run lint'
          
          # Build project
          - task: Npm@1
            displayName: 'Build project'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run build'
          
          # Create reports directory
          - task: Bash@3
            displayName: 'Create reports directory'
            inputs:
              targetType: 'inline'
              script: |
                mkdir -p $(TEST_RESULTS_DIR)
                mkdir -p $(TEST_REPORTS_DIR)
                mkdir -p $(SCREENSHOT_DIR)
                mkdir -p $(VIDEO_DIR)
                mkdir -p $(TRACE_DIR)
                mkdir -p $(LOG_DIR)
          
          # Publish build artifacts
          - task: PublishPipelineArtifact@1
            displayName: 'Publish build artifacts'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/dist'
              artifact: 'compiled-artifacts'
              publishLocation: 'pipeline'
          
          # Publish node_modules as artifact
          - task: PublishPipelineArtifact@1
            displayName: 'Publish node_modules'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/node_modules'
              artifact: 'node_modules'
              publishLocation: 'pipeline'
          
          # Publish Playwright browsers
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Playwright browsers'
            inputs:
              targetPath: '$(PLAYWRIGHT_BROWSERS_PATH)'
              artifact: 'playwright-browsers'
              publishLocation: 'pipeline'

  - stage: Test
    displayName: 'Run Tests'
    dependsOn: Build
    jobs:
      - job: SmokeTest
        displayName: 'Run Smoke Tests'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up Node.js
          - task: NodeTool@0
            displayName: 'Set up Node.js $(NODE_VERSION)'
            inputs:
              versionSpec: '$(NODE_VERSION)'
          
          # Download build artifacts
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifactName: 'compiled-artifacts'
              targetPath: '$(System.DefaultWorkingDirectory)/dist'
          
          # Download node_modules
          - task: DownloadPipelineArtifact@2
            displayName: 'Download node_modules'
            inputs:
              artifactName: 'node_modules'
              targetPath: '$(System.DefaultWorkingDirectory)/node_modules'
          
          # Download Playwright browsers
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Playwright browsers'
            inputs:
              artifactName: 'playwright-browsers'
              targetPath: '$(PLAYWRIGHT_BROWSERS_PATH)'
          
          # Create reports directory
          - task: Bash@3
            displayName: 'Create reports directory'
            inputs:
              targetType: 'inline'
              script: |
                mkdir -p $(TEST_RESULTS_DIR)
                mkdir -p $(TEST_REPORTS_DIR)
                mkdir -p $(SCREENSHOT_DIR)
                mkdir -p $(VIDEO_DIR)
                mkdir -p $(TRACE_DIR)
                mkdir -p $(LOG_DIR)
          
          # Run smoke tests
          - task: Npm@1
            displayName: 'Run smoke tests'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run test:smoke -- --browser=$(BROWSER) --headless=$(HEADLESS) --windowSize=$(WINDOW_SIZE) --baseUrl=$(BASE_URL) --timeout=$(TIMEOUT) --trace=$(TRACE) --video=$(VIDEO) --retryCount=$(RETRY_COUNT) --env=$(ENV)'
            env:
              PLAYWRIGHT_BROWSERS_PATH: $(PLAYWRIGHT_BROWSERS_PATH)
            continueOnError: true
          
          # Publish test results
          - task: PublishTestResults@2
            displayName: 'Publish test results'
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '$(TEST_RESULTS_DIR)/*.xml'
              mergeTestResults: true
              testRunTitle: 'Playwright TypeScript Smoke Tests'
              failTaskOnFailedTests: false
          
          # Publish CSTestForge reports
          - task: PublishPipelineArtifact@1
            displayName: 'Publish CSTestForge reports'
            condition: always()
            inputs:
              targetPath: '$(TEST_REPORTS_DIR)'
              artifact: 'smoke-test-reports'
              publishLocation: 'pipeline'
          
          # Publish screenshots
          - task: PublishPipelineArtifact@1
            displayName: 'Publish screenshots'
            condition: true
            inputs:
              targetPath: '$(SCREENSHOT_DIR)'
              artifact: 'smoke-test-screenshots'
              publishLocation: 'pipeline'
          
          # Publish videos
          - task: PublishPipelineArtifact@1
            displayName: 'Publish videos'
            condition: true
            inputs:
              targetPath: '$(VIDEO_DIR)'
              artifact: 'smoke-test-videos'
              publishLocation: 'pipeline'
          
          # Publish traces
          - task: PublishPipelineArtifact@1
            displayName: 'Publish traces'
            condition: true
            inputs:
              targetPath: '$(TRACE_DIR)'
              artifact: 'smoke-test-traces'
              publishLocation: 'pipeline'
          
          # Publish logs
          - task: PublishPipelineArtifact@1
            displayName: 'Publish logs'
            condition: always()
            inputs:
              targetPath: '$(LOG_DIR)'
              artifact: 'smoke-test-logs'
              publishLocation: 'pipeline'
      
      - job: RegressionTest
        displayName: 'Run Regression Tests'
        dependsOn: SmokeTest
        condition: succeeded()
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up Node.js
          - task: NodeTool@0
            displayName: 'Set up Node.js $(NODE_VERSION)'
            inputs:
              versionSpec: '$(NODE_VERSION)'
          
          # Download build artifacts
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifactName: 'compiled-artifacts'
              targetPath: '$(System.DefaultWorkingDirectory)/dist'
          
          # Download node_modules
          - task: DownloadPipelineArtifact@2
            displayName: 'Download node_modules'
            inputs:
              artifactName: 'node_modules'
              targetPath: '$(System.DefaultWorkingDirectory)/node_modules'
          
          # Download Playwright browsers
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Playwright browsers'
            inputs:
              artifactName: 'playwright-browsers'
              targetPath: '$(PLAYWRIGHT_BROWSERS_PATH)'
          
          # Create reports directory
          - task: Bash@3
            displayName: 'Create reports directory'
            inputs:
              targetType: 'inline'
              script: |
                mkdir -p $(TEST_RESULTS_DIR)
                mkdir -p $(TEST_REPORTS_DIR)
                mkdir -p $(SCREENSHOT_DIR)
                mkdir -p $(VIDEO_DIR)
                mkdir -p $(TRACE_DIR)
                mkdir -p $(LOG_DIR)
          
          # Run regression tests
          - task: Npm@1
            displayName: 'Run regression tests'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run test:regression -- --browser=$(BROWSER) --headless=$(HEADLESS) --windowSize=$(WINDOW_SIZE) --baseUrl=$(BASE_URL) --timeout=$(TIMEOUT) --trace=$(TRACE) --video=$(VIDEO) --retryCount=$(RETRY_COUNT) --threads=$(THREAD_COUNT) --env=$(ENV)'
            env:
              PLAYWRIGHT_BROWSERS_PATH: $(PLAYWRIGHT_BROWSERS_PATH)
            continueOnError: true
          
          # Publish test results
          - task: PublishTestResults@2
            displayName: 'Publish test results'
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '$(TEST_RESULTS_DIR)/*.xml'
              mergeTestResults: true
              testRunTitle: 'Playwright TypeScript Regression Tests'
              failTaskOnFailedTests: false
          
          # Publish CSTestForge reports
          - task: PublishPipelineArtifact@1
            displayName: 'Publish CSTestForge reports'
            condition: always()
            inputs:
              targetPath: '$(TEST_REPORTS_DIR)'
              artifact: 'regression-test-reports'
              publishLocation: 'pipeline'
          
          # Publish screenshots
          - task: PublishPipelineArtifact@1
            displayName: 'Publish screenshots'
            condition: true
            inputs:
              targetPath: '$(SCREENSHOT_DIR)'
              artifact: 'regression-test-screenshots'
              publishLocation: 'pipeline'
          
          # Publish videos
          - task: PublishPipelineArtifact@1
            displayName: 'Publish videos'
            condition: true
            inputs:
              targetPath: '$(VIDEO_DIR)'
              artifact: 'regression-test-videos'
              publishLocation: 'pipeline'
          
          # Publish traces
          - task: PublishPipelineArtifact@1
            displayName: 'Publish traces'
            condition: true
            inputs:
              targetPath: '$(TRACE_DIR)'
              artifact: 'regression-test-traces'
              publishLocation: 'pipeline'
          
          # Publish logs
          - task: PublishPipelineArtifact@1
            displayName: 'Publish logs'
            condition: always()
            inputs:
              targetPath: '$(LOG_DIR)'
              artifact: 'regression-test-logs'
              publishLocation: 'pipeline'
  
  - stage: GenerateReports
    displayName: 'Generate Reports'
    dependsOn: Test
    condition: succeededOrFailed()
    jobs:
      - job: MergeReports
        displayName: 'Merge Test Reports'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up Node.js
          - task: NodeTool@0
            displayName: 'Set up Node.js $(NODE_VERSION)'
            inputs:
              versionSpec: '$(NODE_VERSION)'
          
          # Download all test reports
          - task: DownloadPipelineArtifact@2
            displayName: 'Download smoke test reports'
            inputs:
              artifactName: 'smoke-test-reports'
              targetPath: '$(System.DefaultWorkingDirectory)/reports/smoke'
          
          - task: DownloadPipelineArtifact@2
            displayName: 'Download regression test reports'
            inputs:
              artifactName: 'regression-test-reports'
              targetPath: '$(System.DefaultWorkingDirectory)/reports/regression'
          
          # Download screenshots
          - task: DownloadPipelineArtifact@2
            displayName: 'Download screenshots'
            inputs:
              artifactName: 'smoke-test-screenshots'
              targetPath: '$(System.DefaultWorkingDirectory)/reports/combined-screenshots/smoke'
          
          - task: DownloadPipelineArtifact@2
            displayName: 'Download regression screenshots'
            inputs:
              artifactName: 'regression-test-screenshots'
              targetPath: '$(System.DefaultWorkingDirectory)/reports/combined-screenshots/regression'
          
          # Download videos
          - task: DownloadPipelineArtifact@2
            displayName: 'Download videos'
            inputs:
              artifactName: 'smoke-test-videos'
              targetPath: '$(System.DefaultWorkingDirectory)/reports/combined-videos/smoke'
          
          - task: DownloadPipelineArtifact@2
            displayName: 'Download regression videos'
            inputs:
              artifactName: 'regression-test-videos'
              targetPath: '$(System.DefaultWorkingDirectory)/reports/combined-videos/regression'
          
          # Download traces
          - task: DownloadPipelineArtifact@2
            displayName: 'Download traces'
            inputs:
              artifactName: 'smoke-test-traces'
              targetPath: '$(System.DefaultWorkingDirectory)/reports/combined-traces/smoke'
          
          - task: DownloadPipelineArtifact@2
            displayName: 'Download regression traces'
            inputs:
              artifactName: 'regression-test-traces'
              targetPath: '$(System.DefaultWorkingDirectory)/reports/combined-traces/regression'
          
          # Download node_modules
          - task: DownloadPipelineArtifact@2
            displayName: 'Download node_modules'
            inputs:
              artifactName: 'node_modules'
              targetPath: '$(System.DefaultWorkingDirectory)/node_modules'
          
          # Create merged reports directory
          - task: Bash@3
            displayName: 'Create merged reports directory'
            inputs:
              targetType: 'inline'
              script: |
                mkdir -p $(System.DefaultWorkingDirectory)/reports/merged
          
          # Generate merged report
          - task: Npm@1
            displayName: 'Generate merged report'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run report:merge -- --smokeDir=$(System.DefaultWorkingDirectory)/reports/smoke --regressionDir=$(System.DefaultWorkingDirectory)/reports/regression --screenshotsDir=$(System.DefaultWorkingDirectory)/reports/combined-screenshots --videosDir=$(System.DefaultWorkingDirectory)/reports/combined-videos --tracesDir=$(System.DefaultWorkingDirectory)/reports/combined-traces --outputDir=$(System.DefaultWorkingDirectory)/reports/merged'
          
          # Publish merged report
          - task: PublishPipelineArtifact@1
            displayName: 'Publish merged report'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/reports/merged'
              artifact: 'merged-report'
              publishLocation: 'pipeline'
          
          # Publish HTML report
          - task: PublishHtmlReport@1
            displayName: 'Publish HTML report'
            inputs:
              reportDir: '$(System.DefaultWorkingDirectory)/reports/merged/html'
              tabName: 'Test Report'
  
  - stage: TraceViewer
    displayName: 'Deploy Trace Viewer'
    dependsOn: Test
    condition: succeededOrFailed()
    jobs:
      - job: DeployTraceViewer
        displayName: 'Deploy Playwright Trace Viewer'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Download traces
          - task: DownloadPipelineArtifact@2
            displayName: 'Download smoke test traces'
            condition: succeededOrFailed()
            inputs:
              artifactName: 'smoke-test-traces'
              targetPath: '$(System.DefaultWorkingDirectory)/traces/smoke'
          
          - task: DownloadPipelineArtifact@2
            displayName: 'Download regression test traces'
            condition: succeededOrFailed()
            inputs:
              artifactName: 'regression-test-traces'
              targetPath: '$(System.DefaultWorkingDirectory)/traces/regression'
          
          # Download node_modules
          - task: DownloadPipelineArtifact@2
            displayName: 'Download node_modules'
            inputs:
              artifactName: 'node_modules'
              targetPath: '$(System.DefaultWorkingDirectory)/node_modules'
          
          # Set up Node.js
          - task: NodeTool@0
            displayName: 'Set up Node.js $(NODE_VERSION)'
            inputs:
              versionSpec: '$(NODE_VERSION)'
          
          # Create trace viewer index page
          - task: Bash@3
            displayName: 'Create trace viewer index'
            inputs:
              targetType: 'inline'
              script: |
                mkdir -p $(System.DefaultWorkingDirectory)/trace-viewer
                
                # Create HTML index
                cat > $(System.DefaultWorkingDirectory)/trace-viewer/index.html << 'EOF'
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>CSTestForge Playwright Trace Viewer</title>
                    <style>
                        body {
                            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
                            margin: 0;
                            padding: 20px;
                            background-color: #f5f5f5;
                            color: #333;
                        }
                        h1 {
                            color: #C54B8C;
                            margin-bottom: 20px;
                        }
                        h2 {
                            color: #4B8CC5;
                            margin-top: 30px;
                            margin-bottom: 15px;
                        }
                        .container {
                            max-width: 1200px;
                            margin: 0 auto;
                            background-color: white;
                            padding: 30px;
                            border-radius: 8px;
                            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
                        }
                        .trace-list {
                            list-style: none;
                            padding: 0;
                        }
                        .trace-item {
                            margin-bottom: 10px;
                            padding: 10px;
                            background-color: #f9f9f9;
                            border-radius: 4px;
                            border-left: 3px solid #C54B8C;
                        }
                        .trace-item a {
                            color: #C54B8C;
                            text-decoration: none;
                            font-weight: 500;
                        }
                        .trace-item a:hover {
                            text-decoration: underline;
                        }
                        .instructions {
                            background-color: #e9f5ff;
                            padding: 15px;
                            border-radius: 4px;
                            margin-bottom: 20px;
                            border-left: 3px solid #4B8CC5;
                        }
                        .instructions h3 {
                            margin-top: 0;
                            color: #4B8CC5;
                        }
                        .instructions code {
                            background-color: #f0f0f0;
                            padding: 2px 5px;
                            border-radius: 3px;
                            font-family: monospace;
                        }
                        .no-traces {
                            color: #888;
                            font-style: italic;
                        }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <h1>CSTestForge Playwright Trace Viewer</h1>
                        
                        <div class="instructions">
                            <h3>How to View Traces</h3>
                            <p>
                                1. Click on a trace link below to download the trace file<br>
                                2. Use the Playwright Trace Viewer to open the file:<br>
                                <code>npx playwright show-trace path/to/trace.zip</code>
                            </p>
                        </div>
                        
                        <h2>Smoke Test Traces</h2>
                        <div id="smoke-traces">
                            <!-- Smoke test traces will be populated here -->
                        </div>
                        
                        <h2>Regression Test Traces</h2>
                        <div id="regression-traces">
                            <!-- Regression test traces will be populated here -->
                        </div>
                    </div>
                    
                    <script>
                        // Generate trace lists
                        async function generateTraceList() {
                            async function loadTraces(path, containerId) {
                                try {
                                    const response = await fetch(`${path}/traces.json`);
                                    const traces = await response.json();
                                    
                                    const container = document.getElementById(containerId);
                                    
                                    if (traces.length === 0) {
                                        container.innerHTML = '<p class="no-traces">No traces available</p>';
                                        return;
                                    }
                                    
                                    const list = document.createElement('ul');
                                    list.className = 'trace-list';
                                    
                                    traces.forEach(trace => {
                                        const item = document.createElement('li');
                                        item.className = 'trace-item';
                                        
                                        const link = document.createElement('a');
                                        link.href = `${path}/${trace.file}`;
                                        link.textContent = trace.name;
                                        link.download = trace.file;
                                        
                                        item.appendChild(link);
                                        list.appendChild(item);
                                    });
                                    
                                    container.appendChild(list);
                                } catch (error) {
                                    const container = document.getElementById(containerId);
                                    container.innerHTML = '<p class="no-traces">No traces available</p>';
                                }
                            }
                            
                            await loadTraces('smoke', 'smoke-traces');
                            await loadTraces('regression', 'regression-traces');
                        }
                        
                        document.addEventListener('DOMContentLoaded', generateTraceList);
                    </script>
                </body>
                </html>
                EOF
                
                # Create traces.json for both directories
                function create_traces_json() {
                    local dir=$1
                    local output_file="${dir}/traces.json"
                    local traces=()
                    
                    # Find all trace files
                    if [ -d "$dir" ]; then
                        for file in "${dir}"/*.zip; do
                            if [ -f "$file" ]; then
                                filename=$(basename "$file")
                                name="${filename%.zip}"
                                traces+=("{\"name\":\"${name}\",\"file\":\"${filename}\"}")
                            fi
                        done
                    fi
                    
                    # Create JSON array
                    echo "[" > "$output_file"
                    if [ ${#traces[@]} -gt 0 ]; then
                        IFS=','
                        echo "${traces[*]}" >> "$output_file"
                    fi
                    echo "]" >> "$output_file"
                }
                
                mkdir -p $(System.DefaultWorkingDirectory)/trace-viewer/smoke
                mkdir -p $(System.DefaultWorkingDirectory)/trace-viewer/regression
                
                # Copy trace files
                cp -r $(System.DefaultWorkingDirectory)/traces/smoke/*.zip $(System.DefaultWorkingDirectory)/trace-viewer/smoke/ 2>/dev/null || true
                cp -r $(System.DefaultWorkingDirectory)/traces/regression/*.zip $(System.DefaultWorkingDirectory)/trace-viewer/regression/ 2>/dev/null || true
                
                # Create trace indices
                create_traces_json "$(System.DefaultWorkingDirectory)/trace-viewer/smoke"
                create_traces_json "$(System.DefaultWorkingDirectory)/trace-viewer/regression"
          
          # Publish trace viewer
          - task: PublishPipelineArtifact@1
            displayName: 'Publish trace viewer'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/trace-viewer'
              artifact: 'trace-viewer'
              publishLocation: 'pipeline'
          
          # Deploy to Azure Storage
          - task: AzureCLI@2
            displayName: 'Deploy trace viewer to Azure Storage'
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
            inputs:
              azureSubscription: 'AzureServiceConnection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Create storage account if it doesn't exist
                az storage account create --name cstestforgetraces --resource-group CSTestForge --location eastus --sku Standard_LRS --kind StorageV2
                
                # Create container if it doesn't exist
                az storage container create --name ts-testng-traces --account-name cstestforgetraces --public-access blob
                
                # Upload files
                az storage blob upload-batch --account-name cstestforgetraces --destination ts-testng-traces --source "$(System.DefaultWorkingDirectory)/trace-viewer" --overwrite true
                
                # Generate SAS token
                end_date=$(date -u -d "30 days" '+%Y-%m-%dT%H:%MZ')
                sas_token=$(az storage container generate-sas --account-name cstestforgetraces --name ts-testng-traces --permissions r --expiry $end_date -o tsv)
                
                # Get container URL
                container_url=$(az storage container show --account-name cstestforgetraces --name ts-testng-traces --query "properties.publicAccess" -o tsv)
                
                if [ "$container_url" == "blob" ]; then
                  url="https://cstestforgetraces.blob.core.windows.net/ts-testng-traces"
                else
                  url="https://cstestforgetraces.blob.core.windows.net/ts-testng-traces?$sas_token"
                fi
                
                echo "##vso[task.setvariable variable=TraceViewerUrl;isOutput=true]$url"
  
  - stage: Notify
    displayName: 'Notification'
    dependsOn:
      - GenerateReports
      - TraceViewer
    condition: always()
    jobs:
      - job: SendNotification
        displayName: 'Send Notifications'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Generate notification
          - task: PowerShell@2
            displayName: 'Generate notification'
            inputs:
              targetType: 'inline'
              script: |
                # Get build status
                $buildStatus = "$(Agent.JobStatus)"
                $buildId = "$(Build.BuildId)"
                $buildNumber = "$(Build.BuildNumber)"
                $buildUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
                $buildReason = "$(Build.Reason)"
                $buildRequestedFor = "$(Build.RequestedFor)"
                
                # Create notification message
                $message = "Build: $buildNumber`r`n"
                $message += "Status: $buildStatus`r`n"
                $message += "Reason: $buildReason`r`n"
                $message += "Requested by: $buildRequestedFor`r`n"
                $message += "Details: $buildUrl`r`n"
                
                # Add trace viewer URL if available
                $traceViewerUrl = "$(dependencies.TraceViewer.outputs['DeployTraceViewer.TraceViewerUrl'])"
                if ($traceViewerUrl) {
                    $message += "Trace Viewer: $traceViewerUrl`r`n"
                }
                
                # Add test report URL
                $reportUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=artifacts&pathAsName=true&type=publishedArtifact"
                $message += "Test Report: $reportUrl`r`n"
                
                Write-Host "##vso[task.setvariable variable=NotificationMessage]$message"
          
          # Send email notification
          - task: SendEmail@1
            displayName: 'Send email notification'
            condition: always()
            inputs:
              To: '$(NotificationEmail)'
              From: 'azuredevops@cstestforge.dev'
              Subject: 'CSTestForge TypeScript Playwright TestNG Build $(Build.BuildNumber) - $(Agent.JobStatus)'
              Body: '$(NotificationMessage)'
              SmtpServer: '$(SmtpServer)'
              SmtpUsername: '$(SmtpUsername)'
              SmtpPassword: '$(SmtpPassword)'
              UseSsl: true
          
          # Post Teams notification
          - task: PowerShell@2
            displayName: 'Post Teams notification'
            condition: always()
            inputs:
              targetType: 'inline'
              script: |
                $body = @{
                  "@type" = "MessageCard"
                  "@context" = "http://schema.org/extensions"
                  "themeColor" = if ("$(Agent.JobStatus)" -eq "Succeeded") { "00FF00" } else { "FF0000" }
                  "summary" = "CSTestForge TypeScript Playwright TestNG Build $(Build.BuildNumber) - $(Agent.JobStatus)"
                  "sections" = @(
                    @{
                      "activityTitle" = "CSTestForge TypeScript Playwright TestNG Build $(Build.BuildNumber) - $(Agent.JobStatus)"
                      "activitySubtitle" = "Pipeline: $(Build.DefinitionName)"
                      "activityImage" = "https://raw.githubusercontent.com/microsoft/playwright/main/docs/src/assets/images/playwright-logo.svg"
                      "facts" = @(
                        @{
                          "name" = "Status"
                          "value" = "$(Agent.JobStatus)"
                        },
                        @{
                          "name" = "Browser"
                          "value" = "$(BROWSER)"
                        },
                        @{
                          "name" = "Reason"
                          "value" = "$(Build.Reason)"
                        },
                        @{
                          "name" = "Requested by"
                          "value" = "$(Build.RequestedFor)"
                        },
                        @{
                          "name" = "Repository"
                          "value" = "$(Build.Repository.Name)"
                        },
                        @{
                          "name" = "Branch"
                          "value" = "$(Build.SourceBranchName)"
                        }
                      )
                    }
                  )
                  "potentialAction" = @(
                    @{
                      "@type" = "OpenUri"
                      "name" = "View Build Results"
                      "targets" = @(
                        @{
                          "os" = "default"
                          "uri" = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
                        }
                      )
                    },
                    @{
                      "@type" = "OpenUri"
                      "name" = "View Test Report"
                      "targets" = @(
                        @{
                          "os" = "default"
                          "uri" = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=artifacts&pathAsName=true&type=publishedArtifact"
                        }
                      )
                    },
                    @{
                      "@type" = "OpenUri"
                      "name" = "View Test Results"
                      "targets" = @(
                        @{
                          "os" = "default"
                          "uri" = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=ms.vss-test-web.test-result-details"
                        }
                      )
                    }
                  )
                }
                
                # Add trace viewer action if available
                $traceViewerUrl = "$(dependencies.TraceViewer.outputs['DeployTraceViewer.TraceViewerUrl'])"
                if ($traceViewerUrl) {
                    $traceViewerAction = @{
                      "@type" = "OpenUri"
                      "name" = "View Playwright Traces"
                      "targets" = @(
                        @{
                          "os" = "default"
                          "uri" = $traceViewerUrl
                        }
                      )
                    }
                    
                    $body.potentialAction += $traceViewerAction
                }
                
                $jsonBody = ConvertTo-Json -InputObject $body -Depth 10
                
                $parameters = @{
                  Uri = "$(TeamsWebhookUrl)"
                  Method = "POST"
                  Body = $jsonBody
                  ContentType = "application/json"
                }
                
                Invoke-RestMethod @parameters


templates/pipeline/typescript_playwright_bdd.yml
----------------------------------------------------

# Azure DevOps Pipeline for CSTestForge Playwright TypeScript BDD Project
# File: templates/pipeline/typescript_playwright_bdd.yml

# Trigger configuration
trigger:
  branches:
    include:
      - main
      - develop
      - feature/*
      - release/*
  paths:
    include:
      - src/**
      - features/**
      - package.json
      - tsconfig.json
      - cucumber.js
    exclude:
      - README.md
      - docs/**

# PR trigger configuration
pr:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - src/**
      - features/**
      - package.json
      - tsconfig.json
      - cucumber.js
    exclude:
      - README.md
      - docs/**

# Pipeline variables
variables:
  # Node.js Configuration
  NODE_VERSION: '18.x'
  NPM_CACHE_FOLDER: $(Pipeline.Workspace)/.npm
  PLAYWRIGHT_BROWSERS_PATH: $(Pipeline.Workspace)/ms-playwright
  # Test Configuration
  CUCUMBER_REPORTS_DIR: '$(System.DefaultWorkingDirectory)/reports/cucumber'
  CSTESTFORGE_REPORTS_DIR: '$(System.DefaultWorkingDirectory)/reports/cstestforge-reports'
  SCREENSHOT_DIR: '$(System.DefaultWorkingDirectory)/reports/screenshots'
  VIDEO_DIR: '$(System.DefaultWorkingDirectory)/reports/videos'
  TRACE_DIR: '$(System.DefaultWorkingDirectory)/reports/traces'
  LOG_DIR: '$(System.DefaultWorkingDirectory)/reports/logs'
  # Test Execution Configuration
  BROWSER: 'chromium'
  HEADLESS: 'true'
  WINDOW_SIZE: '1920,1080'
  BASE_URL: 'https://demo.cstestforge.dev'
  TIMEOUT: '30000'
  TRACE: 'on-failure'
  VIDEO: 'on-failure'
  RETRY_COUNT: '2'
  THREAD_COUNT: '3'
  # Test Tags Configuration
  SMOKE_TAGS: '@smoke'
  REGRESSION_TAGS: '@regression'
  # Default Environment
  ENV: 'qa'

# Define pipeline stages
stages:
  - stage: Build
    displayName: 'Build and Compile'
    jobs:
      - job: BuildJob
        displayName: 'Build TypeScript Project'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up Node.js
          - task: NodeTool@0
            displayName: 'Set up Node.js $(NODE_VERSION)'
            inputs:
              versionSpec: '$(NODE_VERSION)'
          
          # Cache npm packages
          - task: Cache@2
            displayName: 'Cache npm packages'
            inputs:
              key: 'npm | "$(Agent.OS)" | package.json | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)" | package.json
                npm | "$(Agent.OS)"
              path: $(NPM_CACHE_FOLDER)
          
          # Cache Playwright browsers
          - task: Cache@2
            displayName: 'Cache Playwright browsers'
            inputs:
              key: 'playwright-browsers | "$(Agent.OS)" | package.json'
              restoreKeys: |
                playwright-browsers | "$(Agent.OS)"
              path: $(PLAYWRIGHT_BROWSERS_PATH)
          
          # Install dependencies
          - task: Npm@1
            displayName: 'Install dependencies'
            inputs:
              command: 'install'
              workingDir: '$(System.DefaultWorkingDirectory)'
              verbose: false
          
          # Install Playwright browsers
          - task: Npm@1
            displayName: 'Install Playwright browsers'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'exec playwright install --with-deps chromium firefox webkit'
            env:
              PLAYWRIGHT_BROWSERS_PATH: $(PLAYWRIGHT_BROWSERS_PATH)
          
          # Run lint
          - task: Npm@1
            displayName: 'Run lint'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run lint'
          
          # Build project
          - task: Npm@1
            displayName: 'Build project'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run build'
          
          # Validate Cucumber features
          - task: Npm@1
            displayName: 'Validate Cucumber features'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run cucumber:validate'
          
          # Create reports directory
          - task: Bash@3
            displayName: 'Create reports directory'
            inputs:
              targetType: 'inline'
              script: |
                mkdir -p $(CUCUMBER_REPORTS_DIR)
                mkdir -p $(CSTESTFORGE_REPORTS_DIR)
                mkdir -p $(SCREENSHOT_DIR)
                mkdir -p $(VIDEO_DIR)
                mkdir -p $(TRACE_DIR)
                mkdir -p $(LOG_DIR)
          
          # Publish build artifacts
          - task: PublishPipelineArtifact@1
            displayName: 'Publish build artifacts'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/dist'
              artifact: 'compiled-artifacts'
              publishLocation: 'pipeline'
          
          # Publish node_modules as artifact
          - task: PublishPipelineArtifact@1
            displayName: 'Publish node_modules'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/node_modules'
              artifact: 'node_modules'
              publishLocation: 'pipeline'
          
          # Publish Playwright browsers
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Playwright browsers'
            inputs:
              targetPath: '$(PLAYWRIGHT_BROWSERS_PATH)'
              artifact: 'playwright-browsers'
              publishLocation: 'pipeline'

  - stage: Test
    displayName: 'Run Tests'
    dependsOn: Build
    jobs:
      - job: SmokeTest
        displayName: 'Run Smoke Tests'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up Node.js
          - task: NodeTool@0
            displayName: 'Set up Node.js $(NODE_VERSION)'
            inputs:
              versionSpec: '$(NODE_VERSION)'
          
          # Download build artifacts
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifactName: 'compiled-artifacts'
              targetPath: '$(System.DefaultWorkingDirectory)/dist'
          
          # Download node_modules
          - task: DownloadPipelineArtifact@2
            displayName: 'Download node_modules'
            inputs:
              artifactName: 'node_modules'
              targetPath: '$(System.DefaultWorkingDirectory)/node_modules'
          
          # Download Playwright browsers
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Playwright browsers'
            inputs:
              artifactName: 'playwright-browsers'
              targetPath: '$(PLAYWRIGHT_BROWSERS_PATH)'
          
          # Create reports directory
          - task: Bash@3
            displayName: 'Create reports directory'
            inputs:
              targetType: 'inline'
              script: |
                mkdir -p $(CUCUMBER_REPORTS_DIR)
                mkdir -p $(CSTESTFORGE_REPORTS_DIR)
                mkdir -p $(SCREENSHOT_DIR)
                mkdir -p $(VIDEO_DIR)
                mkdir -p $(TRACE_DIR)
                mkdir -p $(LOG_DIR)
          
          # Run smoke tests
          - task: Npm@1
            displayName: 'Run smoke tests'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run cucumber -- --tags "$(SMOKE_TAGS)" --browser=$(BROWSER) --headless=$(HEADLESS) --windowSize=$(WINDOW_SIZE) --baseUrl=$(BASE_URL) --timeout=$(TIMEOUT) --trace=$(TRACE) --video=$(VIDEO) --retryCount=$(RETRY_COUNT) --env=$(ENV)'
            env:
              PLAYWRIGHT_BROWSERS_PATH: $(PLAYWRIGHT_BROWSERS_PATH)
            continueOnError: true
          
          # Generate Cucumber report
          - task: Npm@1
            displayName: 'Generate Cucumber report'
            condition: always()
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run report:cucumber'
          
          # Publish Cucumber reports
          - task: PublishCucumberReport@1
            displayName: 'Publish Cucumber reports'
            condition: always()
            inputs:
              jsonDir: '$(CUCUMBER_REPORTS_DIR)'
              outputPath: '$(System.DefaultWorkingDirectory)/reports/cucumber-html-reports'
              theme: 'bootstrap'
              reportSuiteAsScenarios: true
              title: 'CSTestForge Playwright TypeScript Smoke Tests'
          
          # Publish CSTestForge reports
          - task: PublishPipelineArtifact@1
            displayName: 'Publish CSTestForge reports'
            condition: always()
            inputs:
              targetPath: '$(CSTESTFORGE_REPORTS_DIR)'
              artifact: 'smoke-test-reports'
              publishLocation: 'pipeline'
          
          # Publish screenshots
          - task: PublishPipelineArtifact@1
            displayName: 'Publish screenshots'
            condition: true
            inputs:
              targetPath: '$(SCREENSHOT_DIR)'
              artifact: 'smoke-test-screenshots'
              publishLocation: 'pipeline'
          
          # Publish videos
          - task: PublishPipelineArtifact@1
            displayName: 'Publish videos'
            condition: true
            inputs:
              targetPath: '$(VIDEO_DIR)'
              artifact: 'smoke-test-videos'
              publishLocation: 'pipeline'
          
          # Publish traces
          - task: PublishPipelineArtifact@1
            displayName: 'Publish traces'
            condition: true
            inputs:
              targetPath: '$(TRACE_DIR)'
              artifact: 'smoke-test-traces'
              publishLocation: 'pipeline'
          
          # Publish logs
          - task: PublishPipelineArtifact@1
            displayName: 'Publish logs'
            condition: always()
            inputs:
              targetPath: '$(LOG_DIR)'
              artifact: 'smoke-test-logs'
              publishLocation: 'pipeline'
      
      - job: RegressionTest
        displayName: 'Run Regression Tests'
        dependsOn: SmokeTest
        condition: succeeded()
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up Node.js
          - task: NodeTool@0
            displayName: 'Set up Node.js $(NODE_VERSION)'
            inputs:
              versionSpec: '$(NODE_VERSION)'
          
          # Download build artifacts
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifactName: 'compiled-artifacts'
              targetPath: '$(System.DefaultWorkingDirectory)/dist'
          
          # Download node_modules
          - task: DownloadPipelineArtifact@2
            displayName: 'Download node_modules'
            inputs:
              artifactName: 'node_modules'
              targetPath: '$(System.DefaultWorkingDirectory)/node_modules'
          
          # Download Playwright browsers
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Playwright browsers'
            inputs:
              artifactName: 'playwright-browsers'
              targetPath: '$(PLAYWRIGHT_BROWSERS_PATH)'
          
          # Create reports directory
          - task: Bash@3
            displayName: 'Create reports directory'
            inputs:
              targetType: 'inline'
              script: |
                mkdir -p $(CUCUMBER_REPORTS_DIR)
                mkdir -p $(CSTESTFORGE_REPORTS_DIR)
                mkdir -p $(SCREENSHOT_DIR)
                mkdir -p $(VIDEO_DIR)
                mkdir -p $(TRACE_DIR)
                mkdir -p $(LOG_DIR)
          
          # Run regression tests in parallel
          - task: Npm@1
            displayName: 'Run regression tests'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run cucumber:parallel -- --tags "$(REGRESSION_TAGS)" --browser=$(BROWSER) --headless=$(HEADLESS) --windowSize=$(WINDOW_SIZE) --baseUrl=$(BASE_URL) --timeout=$(TIMEOUT) --trace=$(TRACE) --video=$(VIDEO) --retryCount=$(RETRY_COUNT) --parallel=$(THREAD_COUNT) --env=$(ENV)'
            env:
              PLAYWRIGHT_BROWSERS_PATH: $(PLAYWRIGHT_BROWSERS_PATH)
            continueOnError: true
          
          # Generate Cucumber report
          - task: Npm@1
            displayName: 'Generate Cucumber report'
            condition: always()
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run report:cucumber'
          
          # Publish Cucumber reports
          - task: PublishCucumberReport@1
            displayName: 'Publish Cucumber reports'
            condition: always()
            inputs:
              jsonDir: '$(CUCUMBER_REPORTS_DIR)'
              outputPath: '$(System.DefaultWorkingDirectory)/reports/cucumber-html-reports'
              theme: 'bootstrap'
              reportSuiteAsScenarios: true
              title: 'CSTestForge Playwright TypeScript Regression Tests'
          
          # Publish CSTestForge reports
          - task: PublishPipelineArtifact@1
            displayName: 'Publish CSTestForge reports'
            condition: always()
            inputs:
              targetPath: '$(CSTESTFORGE_REPORTS_DIR)'
              artifact: 'regression-test-reports'
              publishLocation: 'pipeline'
          
          # Publish screenshots
          - task: PublishPipelineArtifact@1
            displayName: 'Publish screenshots'
            condition: true
            inputs:
              targetPath: '$(SCREENSHOT_DIR)'
              artifact: 'regression-test-screenshots'
              publishLocation: 'pipeline'
          
          # Publish videos
          - task: PublishPipelineArtifact@1
            displayName: 'Publish videos'
            condition: true
            inputs:
              targetPath: '$(VIDEO_DIR)'
              artifact: 'regression-test-videos'
              publishLocation: 'pipeline'
          
          # Publish traces
          - task: PublishPipelineArtifact@1
            displayName: 'Publish traces'
            condition: true
            inputs:
              targetPath: '$(TRACE_DIR)'
              artifact: 'regression-test-traces'
              publishLocation: 'pipeline'
          
          # Publish logs
          - task: PublishPipelineArtifact@1
            displayName: 'Publish logs'
            condition: always()
            inputs:
              targetPath: '$(LOG_DIR)'
              artifact: 'regression-test-logs'
              publishLocation: 'pipeline'
  
  - stage: GenerateReports
    displayName: 'Generate Reports'
    dependsOn: Test
    condition: succeededOrFailed()
    jobs:
      - job: MergeReports
        displayName: 'Merge Test Reports'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Set up Node.js
          - task: NodeTool@0
            displayName: 'Set up Node.js $(NODE_VERSION)'
            inputs:
              versionSpec: '$(NODE_VERSION)'
          
          # Download all test reports
          - task: DownloadPipelineArtifact@2
            displayName: 'Download smoke test reports'
            inputs:
              artifactName: 'smoke-test-reports'
              targetPath: '$(System.DefaultWorkingDirectory)/reports/smoke'
          
          - task: DownloadPipelineArtifact@2
            displayName: 'Download regression test reports'
            inputs:
              artifactName: 'regression-test-reports'
              targetPath: '$(System.DefaultWorkingDirectory)/reports/regression'
          
          # Download screenshots
          - task: DownloadPipelineArtifact@2
            displayName: 'Download screenshots'
            inputs:
              artifactName: 'smoke-test-screenshots'
              targetPath: '$(System.DefaultWorkingDirectory)/reports/combined-screenshots/smoke'
          
          - task: DownloadPipelineArtifact@2
            displayName: 'Download regression screenshots'
            inputs:
              artifactName: 'regression-test-screenshots'
              targetPath: '$(System.DefaultWorkingDirectory)/reports/combined-screenshots/regression'
          
          # Download videos
          - task: DownloadPipelineArtifact@2
            displayName: 'Download videos'
            inputs:
              artifactName: 'smoke-test-videos'
              targetPath: '$(System.DefaultWorkingDirectory)/reports/combined-videos/smoke'
          
          - task: DownloadPipelineArtifact@2
            displayName: 'Download regression videos'
            inputs:
              artifactName: 'regression-test-videos'
              targetPath: '$(System.DefaultWorkingDirectory)/reports/combined-videos/regression'
          
          # Download traces
          - task: DownloadPipelineArtifact@2
            displayName: 'Download traces'
            inputs:
              artifactName: 'smoke-test-traces'
              targetPath: '$(System.DefaultWorkingDirectory)/reports/combined-traces/smoke'
          
          - task: DownloadPipelineArtifact@2
            displayName: 'Download regression traces'
            inputs:
              artifactName: 'regression-test-traces'
              targetPath: '$(System.DefaultWorkingDirectory)/reports/combined-traces/regression'
          
          # Download node_modules
          - task: DownloadPipelineArtifact@2
            displayName: 'Download node_modules'
            inputs:
              artifactName: 'node_modules'
              targetPath: '$(System.DefaultWorkingDirectory)/node_modules'
          
          # Create merged reports directory
          - task: Bash@3
            displayName: 'Create merged reports directory'
            inputs:
              targetType: 'inline'
              script: |
                mkdir -p $(System.DefaultWorkingDirectory)/reports/merged
          
          # Generate merged report
          - task: Npm@1
            displayName: 'Generate merged report'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run report:merge -- --smokeDir=$(System.DefaultWorkingDirectory)/reports/smoke --regressionDir=$(System.DefaultWorkingDirectory)/reports/regression --screenshotsDir=$(System.DefaultWorkingDirectory)/reports/combined-screenshots --videosDir=$(System.DefaultWorkingDirectory)/reports/combined-videos --tracesDir=$(System.DefaultWorkingDirectory)/reports/combined-traces --outputDir=$(System.DefaultWorkingDirectory)/reports/merged'
          
          # Merge Cucumber reports
          - task: Npm@1
            displayName: 'Merge Cucumber reports'
            inputs:
              command: 'custom'
              workingDir: '$(System.DefaultWorkingDirectory)'
              customCommand: 'run report:cucumber:merge'
          
          # Publish merged reports
          - task: PublishPipelineArtifact@1
            displayName: 'Publish merged reports'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/reports/merged'
              artifact: 'merged-reports'
              publishLocation: 'pipeline'
          
          # Publish merged Cucumber reports
          - task: PublishCucumberReport@1
            displayName: 'Publish merged Cucumber reports'
            condition: always()
            inputs:
              jsonDir: '$(System.DefaultWorkingDirectory)/reports/merged/cucumber'
              outputPath: '$(System.DefaultWorkingDirectory)/reports/merged/cucumber-html'
              theme: 'bootstrap'
              reportSuiteAsScenarios: true
              title: 'CSTestForge Playwright TypeScript BDD Tests'
          
          # Publish HTML report
          - task: PublishHtmlReport@1
            displayName: 'Publish HTML report'
            inputs:
              reportDir: '$(System.DefaultWorkingDirectory)/reports/merged/html'
              tabName: 'Test Report'
          
          # Publish Cucumber HTML report
          - task: PublishHtmlReport@1
            displayName: 'Publish Cucumber HTML report'
            inputs:
              reportDir: '$(System.DefaultWorkingDirectory)/reports/merged/cucumber-html'
              tabName: 'Cucumber Report'
  
  - stage: TraceViewer
    displayName: 'Deploy Trace Viewer'
    dependsOn: Test
    condition: succeededOrFailed()
    jobs:
      - job: DeployTraceViewer
        displayName: 'Deploy Playwright Trace Viewer'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Download traces
          - task: DownloadPipelineArtifact@2
            displayName: 'Download smoke test traces'
            condition: succeededOrFailed()
            inputs:
              artifactName: 'smoke-test-traces'
              targetPath: '$(System.DefaultWorkingDirectory)/traces/smoke'
          
          - task: DownloadPipelineArtifact@2
            displayName: 'Download regression test traces'
            condition: succeededOrFailed()
            inputs:
              artifactName: 'regression-test-traces'
              targetPath: '$(System.DefaultWorkingDirectory)/traces/regression'
          
          # Download node_modules
          - task: DownloadPipelineArtifact@2
            displayName: 'Download node_modules'
            inputs:
              artifactName: 'node_modules'
              targetPath: '$(System.DefaultWorkingDirectory)/node_modules'
          
          # Set up Node.js
          - task: NodeTool@0
            displayName: 'Set up Node.js $(NODE_VERSION)'
            inputs:
              versionSpec: '$(NODE_VERSION)'
          
          # Create trace viewer index page
          - task: Bash@3
            displayName: 'Create trace viewer index'
            inputs:
              targetType: 'inline'
              script: |
                mkdir -p $(System.DefaultWorkingDirectory)/trace-viewer
                
                # Create HTML index
                cat > $(System.DefaultWorkingDirectory)/trace-viewer/index.html << 'EOF'
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>CSTestForge Playwright Trace Viewer</title>
                    <style>
                        body {
                            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
                            margin: 0;
                            padding: 20px;
                            background-color: #f5f5f5;
                            color: #333;
                        }
                        h1 {
                            color: #C54B8C;
                            margin-bottom: 20px;
                        }
                        h2 {
                            color: #4B8CC5;
                            margin-top: 30px;
                            margin-bottom: 15px;
                        }
                        .container {
                            max-width: 1200px;
                            margin: 0 auto;
                            background-color: white;
                            padding: 30px;
                            border-radius: 8px;
                            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
                        }
                        .trace-list {
                            list-style: none;
                            padding: 0;
                        }
                        .trace-item {
                            margin-bottom: 10px;
                            padding: 10px;
                            background-color: #f9f9f9;
                            border-radius: 4px;
                            border-left: 3px solid #C54B8C;
                        }
                        .trace-item a {
                            color: #C54B8C;
                            text-decoration: none;
                            font-weight: 500;
                        }
                        .trace-item a:hover {
                            text-decoration: underline;
                        }
                        .instructions {
                            background-color: #e9f5ff;
                            padding: 15px;
                            border-radius: 4px;
                            margin-bottom: 20px;
                            border-left: 3px solid #4B8CC5;
                        }
                        .instructions h3 {
                            margin-top: 0;
                            color: #4B8CC5;
                        }
                        .instructions code {
                            background-color: #f0f0f0;
                            padding: 2px 5px;
                            border-radius: 3px;
                            font-family: monospace;
                        }
                        .no-traces {
                            color: #888;
                            font-style: italic;
                        }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <h1>CSTestForge Playwright Trace Viewer</h1>
                        
                        <div class="instructions">
                            <h3>How to View Traces</h3>
                            <p>
                                1. Click on a trace link below to download the trace file<br>
                                2. Use the Playwright Trace Viewer to open the file:<br>
                                <code>npx playwright show-trace path/to/trace.zip</code>
                            </p>
                        </div>
                        
                        <h2>Smoke Test Traces</h2>
                        <div id="smoke-traces">
                            <!-- Smoke test traces will be populated here -->
                        </div>
                        
                        <h2>Regression Test Traces</h2>
                        <div id="regression-traces">
                            <!-- Regression test traces will be populated here -->
                        </div>
                    </div>
                    
                    <script>
                        // Generate trace lists
                        async function generateTraceList() {
                            async function loadTraces(path, containerId) {
                                try {
                                    const response = await fetch(`${path}/traces.json`);
                                    const traces = await response.json();
                                    
                                    const container = document.getElementById(containerId);
                                    
                                    if (traces.length === 0) {
                                        container.innerHTML = '<p class="no-traces">No traces available</p>';
                                        return;
                                    }
                                    
                                    const list = document.createElement('ul');
                                    list.className = 'trace-list';
                                    
                                    traces.forEach(trace => {
                                        const item = document.createElement('li');
                                        item.className = 'trace-item';
                                        
                                        const link = document.createElement('a');
                                        link.href = `${path}/${trace.file}`;
                                        link.textContent = trace.name;
                                        link.download = trace.file;
                                        
                                        item.appendChild(link);
                                        list.appendChild(item);
                                    });
                                    
                                    container.appendChild(list);
                                } catch (error) {
                                    const container = document.getElementById(containerId);
                                    container.innerHTML = '<p class="no-traces">No traces available</p>';
                                }
                            }
                            
                            await loadTraces('smoke', 'smoke-traces');
                            await loadTraces('regression', 'regression-traces');
                        }
                        
                        document.addEventListener('DOMContentLoaded', generateTraceList);
                    </script>
                </body>
                </html>
                EOF
                
                # Create traces.json for both directories
                function create_traces_json() {
                    local dir=$1
                    local output_file="${dir}/traces.json"
                    local traces=()
                    
                    # Find all trace files
                    if [ -d "$dir" ]; then
                        for file in "${dir}"/*.zip; do
                            if [ -f "$file" ]; then
                                filename=$(basename "$file")
                                name="${filename%.zip}"
                                traces+=("{\"name\":\"${name}\",\"file\":\"${filename}\"}")
                            fi
                        done
                    fi
                    
                    # Create JSON array
                    echo "[" > "$output_file"
                    if [ ${#traces[@]} -gt 0 ]; then
                        IFS=','
                        echo "${traces[*]}" >> "$output_file"
                    fi
                    echo "]" >> "$output_file"
                }
                
                mkdir -p $(System.DefaultWorkingDirectory)/trace-viewer/smoke
                mkdir -p $(System.DefaultWorkingDirectory)/trace-viewer/regression
                
                # Copy trace files
                cp -r $(System.DefaultWorkingDirectory)/traces/smoke/*.zip $(System.DefaultWorkingDirectory)/trace-viewer/smoke/ 2>/dev/null || true
                cp -r $(System.DefaultWorkingDirectory)/traces/regression/*.zip $(System.DefaultWorkingDirectory)/trace-viewer/regression/ 2>/dev/null || true
                
                # Create trace indices
                create_traces_json "$(System.DefaultWorkingDirectory)/trace-viewer/smoke"
                create_traces_json "$(System.DefaultWorkingDirectory)/trace-viewer/regression"
          
          # Publish trace viewer
          - task: PublishPipelineArtifact@1
            displayName: 'Publish trace viewer'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/trace-viewer'
              artifact: 'trace-viewer'
              publishLocation: 'pipeline'
          
          # Deploy to Azure Storage
          - task: AzureCLI@2
            displayName: 'Deploy trace viewer to Azure Storage'
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
            inputs:
              azureSubscription: 'AzureServiceConnection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Create storage account if it doesn't exist
                az storage account create --name cstestforgetraces --resource-group CSTestForge --location eastus --sku Standard_LRS --kind StorageV2
                
                # Create container if it doesn't exist
                az storage container create --name ts-bdd-traces --account-name cstestforgetraces --public-access blob
                
                # Upload files
                az storage blob upload-batch --account-name cstestforgetraces --destination ts-bdd-traces --source "$(System.DefaultWorkingDirectory)/trace-viewer" --overwrite true
                
                # Generate SAS token
                end_date=$(date -u -d "30 days" '+%Y-%m-%dT%H:%MZ')
                sas_token=$(az storage container generate-sas --account-name cstestforgetraces --name ts-bdd-traces --permissions r --expiry $end_date -o tsv)
                
                # Get container URL
                container_url=$(az storage container show --account-name cstestforgetraces --name ts-bdd-traces --query "properties.publicAccess" -o tsv)
                
                if [ "$container_url" == "blob" ]; then
                  url="https://cstestforgetraces.blob.core.windows.net/ts-bdd-traces"
                else
                  url="https://cstestforgetraces.blob.core.windows.net/ts-bdd-traces?$sas_token"
                fi
                
                echo "##vso[task.setvariable variable=TraceViewerUrl;isOutput=true]$url"
  
  - stage: Notify
    displayName: 'Notification'
    dependsOn:
      - GenerateReports
      - TraceViewer
    condition: always()
    jobs:
      - job: SendNotification
        displayName: 'Send Notifications'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Generate notification
          - task: PowerShell@2
            displayName: 'Generate notification'
            inputs:
              targetType: 'inline'
              script: |
                # Get build status
                $buildStatus = "$(Agent.JobStatus)"
                $buildId = "$(Build.BuildId)"
                $buildNumber = "$(Build.BuildNumber)"
                $buildUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
                $buildReason = "$(Build.Reason)"
                $buildRequestedFor = "$(Build.RequestedFor)"
                
                # Create notification message
                $message = "Build: $buildNumber`r`n"
                $message += "Status: $buildStatus`r`n"
                $message += "Reason: $buildReason`r`n"
                $message += "Requested by: $buildRequestedFor`r`n"
                $message += "Details: $buildUrl`r`n"
                
                # Add trace viewer URL if available
                $traceViewerUrl = "$(dependencies.TraceViewer.outputs['DeployTraceViewer.TraceViewerUrl'])"
                if ($traceViewerUrl) {
                    $message += "Trace Viewer: $traceViewerUrl`r`n"
                }
                
                # Add test report URLs
                $reportUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=artifacts&pathAsName=true&type=publishedArtifact"
                $cucumberUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=ms.vss-test-web.test-result-details"
                $message += "Test Report: $reportUrl`r`n"
                $message += "Cucumber Report: $cucumberUrl`r`n"
                
                Write-Host "##vso[task.setvariable variable=NotificationMessage]$message"
          
          # Send email notification
          - task: SendEmail@1
            displayName: 'Send email notification'
            condition: always()
            inputs:
              To: '$(NotificationEmail)'
              From: 'azuredevops@cstestforge.dev'
              Subject: 'CSTestForge TypeScript Playwright BDD Build $(Build.BuildNumber) - $(Agent.JobStatus)'
              Body: '$(NotificationMessage)'
              SmtpServer: '$(SmtpServer)'
              SmtpUsername: '$(SmtpUsername)'
              SmtpPassword: '$(SmtpPassword)'
              UseSsl: true
          
          # Post Teams notification
          - task: PowerShell@2
            displayName: 'Post Teams notification'
            condition: always()
            inputs:
              targetType: 'inline'
              script: |
                $body = @{
                  "@type" = "MessageCard"
                  "@context" = "http://schema.org/extensions"
                  "themeColor" = if ("$(Agent.JobStatus)" -eq "Succeeded") { "00FF00" } else { "FF0000" }
                  "summary" = "CSTestForge TypeScript Playwright BDD Build $(Build.BuildNumber) - $(Agent.JobStatus)"
                  "sections" = @(
                    @{
                      "activityTitle" = "CSTestForge TypeScript Playwright BDD Build $(Build.BuildNumber) - $(Agent.JobStatus)"
                      "activitySubtitle" = "Pipeline: $(Build.DefinitionName)"
                      "activityImage" = "https://raw.githubusercontent.com/microsoft/playwright/main/docs/src/assets/images/playwright-logo.svg"
                      "facts" = @(
                        @{
                          "name" = "Status"
                          "value" = "$(Agent.JobStatus)"
                        },
                        @{
                          "name" = "Browser"
                          "value" = "$(BROWSER)"
                        },
                        @{
                          "name" = "Reason"
                          "value" = "$(Build.Reason)"
                        },
                        @{
                          "name" = "Requested by"
                          "value" = "$(Build.RequestedFor)"
                        },
                        @{
                          "name" = "Repository"
                          "value" = "$(Build.Repository.Name)"
                        },
                        @{
                          "name" = "Branch"
                          "value" = "$(Build.SourceBranchName)"
                        }
                      )
                    }
                  )
                  "potentialAction" = @(
                    @{
                      "@type" = "OpenUri"
                      "name" = "View Build Results"
                      "targets" = @(
                        @{
                          "os" = "default"
                          "uri" = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
                        }
                      )
                    },
                    @{
                      "@type" = "OpenUri"
                      "name" = "View Test Report"
                      "targets" = @(
                        @{
                          "os" = "default"
                          "uri" = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=artifacts&pathAsName=true&type=publishedArtifact"
                        }
                      )
                    },
                    @{
                      "@type" = "OpenUri"
                      "name" = "View Cucumber Report"
                      "targets" = @(
                        @{
                          "os" = "default"
                          "uri" = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=ms.vss-test-web.test-result-details"
                        }
                      )
                    }
                  )
                }
                
                # Add trace viewer action if available
                $traceViewerUrl = "$(dependencies.TraceViewer.outputs['DeployTraceViewer.TraceViewerUrl'])"
                if ($traceViewerUrl) {
                    $traceViewerAction = @{
                      "@type" = "OpenUri"
                      "name" = "View Playwright Traces"
                      "targets" = @(
                        @{
                          "os" = "default"
                          "uri" = $traceViewerUrl
                        }
                      )
                    }
                    
                    $body.potentialAction += $traceViewerAction
                }
                
                $jsonBody = ConvertTo-Json -InputObject $body -Depth 10
                
                $parameters = @{
                  Uri = "$(TeamsWebhookUrl)"
                  Method = "POST"
                  Body = $jsonBody
                  ContentType = "application/json"
                }
                
                Invoke-RestMethod @parameters


