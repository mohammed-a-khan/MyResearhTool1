templates/projects/playwright/java/bdd/src/test/resources/features/sample.feature.template
---------------------------------------------------------------------------------------------------

Feature: CSTestForge Playwright Java BDD Sample Feature
  As a user of CSTestForge
  I want to demonstrate a sample BDD feature
  So that I can show the capabilities of the framework

  Background:
    Given I have launched the browser
    And I have navigated to the "https://demoqa.com" website

  @smoke @regression
  Scenario: User can navigate to Elements section
    When I click on the "Elements" card
    Then I should see the Elements page
    And I should see the following sections in the left panel:
      | Text Box         |
      | Check Box        |
      | Radio Button     |
      | Web Tables       |
      | Buttons          |
      | Links            |
      | Broken Links     |
      | Upload and Download |
      | Dynamic Properties |

  @regression
  Scenario: User can submit a form on the Text Box page
    When I click on the "Elements" card
    And I click on the "Text Box" option in the left panel
    Then I should see the Text Box form
    When I fill in the following details:
      | Field Name | Value                |
      | Full Name  | John Doe             |
      | Email      | john.doe@example.com |
      | Current Address | 123 Main Street, Apt 4B |
      | Permanent Address | 567 Park Avenue, Suite 201 |
    And I click the "Submit" button
    Then I should see my submitted information displayed below the form

  @regression @dataDriven
  Scenario Outline: User can work with different Web Table entries
    When I click on the "Elements" card
    And I click on the "Web Tables" option in the left panel
    Then I should see the Web Tables page with data grid
    When I click the "Add" button
    And I fill in the registration form with the following details:
      | First Name | <firstName> |
      | Last Name  | <lastName>  |
      | Email      | <email>     |
      | Age        | <age>       |
      | Salary     | <salary>    |
      | Department | <department> |
    And I click the submit button on the form
    Then I should see a new row in the table with the provided details
    When I search for "<searchTerm>" in the search box
    Then I should see filtered results containing "<searchTerm>"
    When I click the edit button for the user "<firstName>"
    And I change the salary to "<newSalary>"
    And I click the submit button on the form
    Then I should see the updated salary "<newSalary>" for user "<firstName>"
    When I click the delete button for the user "<firstName>"
    Then the user "<firstName>" should be removed from the table

    Examples:
      | firstName | lastName | email                  | age | salary | department | searchTerm | newSalary |
      | Alice     | Johnson  | alice.j@example.com    | 28  | 75000  | QA         | Alice      | 80000     |
      | Robert    | Smith    | robert.smith@test.org  | 42  | 125000 | DevOps     | Smith      | 135000    |
      | Emma      | Williams | emma.w@company.net     | 31  | 95000  | Development| Emma       | 105000    |

  @regression @checkbox
  Scenario: User can interact with checkboxes
    When I click on the "Elements" card
    And I click on the "Check Box" option in the left panel
    Then I should see the Check Box page
    When I expand the Home directory by clicking the expand button
    Then I should see the following directories:
      | Desktop |
      | Documents |
      | Downloads |
    When I check the "Documents" checkbox
    Then "Documents" should be checked
    And I should see a success message showing "documents" was selected
    When I expand the "Documents" directory
    And I check the "Office" checkbox
    Then both "Documents" and "Office" should be checked
    And I should see a success message showing "office" was selected

  @regression @async
  Scenario: User can work with dynamic properties
    When I click on the "Elements" card
    And I click on the "Dynamic Properties" option in the left panel
    Then I should see the Dynamic Properties page
    And I should see a button that will be enabled after 5 seconds
    And I should verify a button that changes color after 5 seconds
    And I should verify a button that appears after 5 seconds
    When I wait for 5 seconds
    Then the disabled button should become enabled
    And the color change button should have changed color
    And the visible after button should be displayed

  @regression @upload
  Scenario: User can upload and download files
    When I click on the "Elements" card
    And I click on the "Upload and Download" option in the left panel
    Then I should see the Upload and Download page
    When I click on the download button
    Then the file should be downloaded successfully
    When I upload a file using the upload button
    Then I should see the uploaded file path displayed

  @regression @interaction
  Scenario: User can interact with different button types
    When I click on the "Elements" card
    And I click on the "Buttons" option in the left panel
    Then I should see the Buttons page
    When I perform a double click on the "Double Click Me" button
    Then I should see a message saying "You have done a double click"
    When I perform a right click on the "Right Click Me" button
    Then I should see a message saying "You have done a right click"
    When I click the "Click Me" button
    Then I should see a message saying "You have done a dynamic click"

  @regression @alert @windows
  Scenario: User can handle browser alerts, confirmations, and prompts
    When I navigate to the "Alerts, Frame & Windows" section
    And I click on the "Alerts" option in the left panel
    Then I should see the Alerts page
    When I click the button to trigger an alert
    Then I should handle the alert by accepting it
    When I click the button to trigger a confirm dialog
    Then I should handle the confirmation by selecting "OK"
    When I click the button to trigger a prompt
    Then I should input "CSTestForge Test" in the prompt and accept it
    And I should see the message containing "CSTestForge Test"

  @regression @windows
  Scenario: User can work with multiple windows and tabs
    When I navigate to the "Alerts, Frame & Windows" section
    And I click on the "Browser Windows" option in the left panel
    Then I should see the Browser Windows page
    When I click the "New Tab" button
    Then a new tab should open
    And I should switch to the new tab and verify content
    And I should close the tab and return to main window
    When I click the "New Window" button
    Then a new window should open
    And I should switch to the new window and verify content

  @regression @forms
  Scenario: User can submit a practice form with all fields
    When I navigate to the "Forms" section
    And I click on the "Practice Form" option
    Then I should see the Practice Form page
    When I fill in the following student information:
      | Field          | Value                |
      | First Name     | Jane                 |
      | Last Name      | Doe                  |
      | Email          | jane.doe@example.com |
      | Gender         | Female               |
      | Mobile Number  | 1234567890           |
      | Date of Birth  | 15 May 1990          |
      | Subjects       | Computer Science     |
      | Hobbies        | Reading              |
      | Picture        | test-image.jpg       |
      | Current Address| 123 Test Street      |
      | State          | NCR                  |
      | City           | Delhi                |
    And I submit the form
    Then I should see a modal with the submitted information
    And all submitted values should match what I entered

  @regression @widgets
  Scenario: User can interact with various widgets
    When I navigate to the "Widgets" section
    Then I should see the Widgets page
    When I click on the "Date Picker" option
    Then I should see the Date Picker page
    When I select the date "May 15, 2025" in the date picker
    Then the selected date should be "05/15/2025"
    When I navigate to the "Widgets" section
    And I click on the "Slider" option
    Then I should see the Slider page
    When I move the slider to 75
    Then the slider value should be 75
    When I navigate to the "Widgets" section
    And I click on the "Progress Bar" option
    Then I should see the Progress Bar page
    When I click the "Start" button
    Then I should see the progress bar reach 100%

  @regression @interactions
  Scenario: User can perform drag and drop actions
    When I navigate to the "Interactions" section
    And I click on the "Droppable" option
    Then I should see the Droppable page
    When I drag the "Drag me" element to the "Drop here" target
    Then the target element should display "Dropped!"
    And the target element should change color to indicate success


templates/projects/playwright/java/bdd/README.md.template
--------------------------------------------------------------

# CSTestForge Playwright Java BDD Test Project

This project contains automated tests built with Playwright, Java, and Cucumber BDD framework using the CSTestForge framework.

## Project Structure

```
├── src
│   ├── main
│   │   └── java
│   │       └── com
│   │           └── cstestforge
│   │               └── sample
│   │                   ├── constants
│   │                   │   └── ApplicationConstants.java
│   │                   ├── pages
│   │                   │   ├── BasePage.java
│   │                   │   ├── components
│   │                   │   │   ├── Header.java
│   │                   │   │   └── NavigationPanel.java
│   │                   │   └── pages
│   │                   │       ├── HomePage.java
│   │                   │       ├── elements
│   │                   │       │   ├── ButtonsPage.java
│   │                   │       │   ├── CheckBoxPage.java
│   │                   │       │   ├── DynamicPropertiesPage.java
│   │                   │       │   ├── ElementsPage.java
│   │                   │       │   ├── TextBoxPage.java
│   │                   │       │   ├── UploadDownloadPage.java
│   │                   │       │   └── WebTablesPage.java
│   │                   │       ├── forms
│   │                   │       │   └── PracticeFormPage.java
│   │                   │       ├── interactions
│   │                   │       │   └── DroppablePage.java
│   │                   │       └── widgets
│   │                   │           ├── DatePickerPage.java
│   │                   │           ├── ProgressBarPage.java
│   │                   │           └── SliderPage.java
│   │                   └── utils
│   │                       ├── DataUtils.java
│   │                       └── FileUtils.java
│   └── test
│       ├── java
│       │   └── com
│       │       └── cstestforge
│       │           └── sample
│       │               ├── hooks
│       │               │   └── Hooks.java
│       │               ├── runner
│       │               │   └── TestRunner.java
│       │               └── stepdefs
│       │                   ├── BaseStepDef.java
│       │                   ├── ElementsStepDef.java
│       │                   ├── FormsStepDef.java
│       │                   ├── InteractionsStepDef.java
│       │                   ├── NavigationStepDef.java
│       │                   └── WidgetsStepDef.java
│       └── resources
│           ├── features
│           │   └── sample.feature
│           ├── cucumber.properties
│           ├── junit-platform.properties
│           └── testdata
│               ├── test-image.jpg
│               └── testdata.json
├── pom.xml
├── README.md
├── .gitignore
└── cstestforge.properties
```

## Prerequisites

- Java 17 or higher
- Maven 3.8.0 or higher
- CSTestForge Framework installed

## Setup

1. Clone this repository
2. Ensure Java 17+ and Maven are installed
3. Run `mvn clean install -DskipTests` to install dependencies

## Configuration

Edit the `cstestforge.properties` file to configure:

- Browser settings (browser type, headless mode, viewport size)
- Execution settings (timeout, retry, parallel execution)
- Environment settings (base URL, credentials)
- Reporting settings (screenshot capture, video recording)

Example configuration:

```properties
# Browser Configuration
browser=chromium
headless=false
viewportWidth=1920
viewportHeight=1080
slowMo=50

# Timeout Configuration (in milliseconds)
defaultTimeout=30000
navigationTimeout=30000

# Execution Configuration
retryCount=1
retryOnlyFailures=true
parallelExecution=false
threadCount=1

# Environment Configuration
baseUrl=https://demoqa.com
username=testuser
password=testpassword

# Reporting Configuration
captureScreenshots=true
captureScreenshotsOnFailure=true
recordVideo=false
reportOutputDir=target/cstestforge-reports
```

## Running Tests

### Run all tests

```bash
mvn test
```

### Run specific feature file

```bash
mvn test -Dcucumber.features="src/test/resources/features/sample.feature"
```

### Run tests with specific tags

```bash
mvn test -Dcucumber.filter.tags="@smoke"
```

### Run tests in parallel

```bash
mvn test -DparallelExecution=true -DthreadCount=4
```

## Reports

After test execution, the following reports are generated:

- CSTestForge HTML Report: `target/cstestforge-reports/index.html`
- Cucumber HTML Report: `target/cucumber-reports/index.html`
- JUnit XML Report: `target/surefire-reports`

## Self-Healing Capabilities

This project leverages CSTestForge's self-healing capabilities to automatically recover from broken locators. The framework:

1. Maintains multiple locator strategies for each element
2. Dynamically ranks locators based on reliability
3. Automatically tries alternative locators when primary locator fails
4. Updates locator strategy based on runtime conditions

Self-healing logs are available in the report under the "Self-Healing" tab.

## AI-Enhanced Features

CSTestForge provides AI-enhanced features including:

1. Smart locator generation with proprietary algorithms
2. Element recognition using custom ML models
3. Test optimization with heuristic algorithms
4. Anomaly detection with statistical models

## Page Object Model Structure

This project follows an enhanced Page Object Model pattern with:

- `BasePage`: Base class for all page objects with common functionality
- Page Components: Reusable page sections (headers, navigation panels)
- Page Classes: Specific page implementations with page-specific actions
- Fluent API: Method chaining for improved readability

Example page object usage:

```java
homePage
    .navigateTo()
    .getElementsCard()
    .click();

elementsPage
    .getTextBoxLink()
    .click();

textBoxPage
    .enterFullName("John Doe")
    .enterEmail("john.doe@example.com")
    .enterCurrentAddress("123 Main St")
    .enterPermanentAddress("456 Oak Ave")
    .clickSubmit()
    .verifySubmittedInfo("John Doe", "john.doe@example.com");
```

## Contributing

1. Create a feature branch from `main`
2. Make your changes
3. Ensure tests are passing
4. Submit a pull request

## License

Copyright © 2025 CSTestForge. All rights reserved.



templates/projects/playwright/typescript/testng/package.json.template
------------------------------------------------------------------------------------

{
  "name": "cstestforge-playwright-typescript-testng",
  "version": "1.0.0",
  "description": "CSTestForge Playwright TypeScript TestNG Test Project",
  "main": "index.js",
  "scripts": {
    "clean": "rimraf dist reports",
    "build": "tsc",
    "prebuild": "npm run clean",
    "test": "npm run build && ts-node src/runner/TestRunner.ts",
    "test:smoke": "npm run build && ts-node src/runner/TestRunner.ts --groups smoke",
    "test:regression": "npm run build && ts-node src/runner/TestRunner.ts --groups regression",
    "test:parallel": "npm run build && ts-node src/runner/TestRunner.ts --parallel 4",
    "test:specific": "npm run build && ts-node src/runner/TestRunner.ts --tests",
    "report": "ts-node src/reporting/ReportGenerator.ts",
    "lint": "eslint . --ext .ts",
    "format": "prettier --write \"src/**/*.ts\"",
    "precommit": "lint-staged"
  },
  "lint-staged": {
    "*.ts": [
      "eslint --fix",
      "prettier --write"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cstestforge/playwright-typescript-testng.git"
  },
  "keywords": [
    "cstestforge",
    "playwright",
    "typescript",
    "testng",
    "automation",
    "testing"
  ],
  "author": "CSTestForge Team",
  "license": "UNLICENSED",
  "private": true,
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  },
  "bugs": {
    "url": "https://github.com/cstestforge/playwright-typescript-testng/issues"
  },
  "homepage": "https://github.com/cstestforge/playwright-typescript-testng#readme",
  "dependencies": {
    "@playwright/test": "^1.39.0",
    "ajv": "^8.12.0",
    "axios": "^1.6.0",
    "chai": "^4.3.10",
    "chalk": "^4.1.2",
    "commander": "^11.0.0",
    "csv-parse": "^5.5.2",
    "dayjs": "^1.11.10",
    "dotenv": "^16.3.1",
    "exceljs": "^4.4.0",
    "fs-extra": "^11.1.1",
    "handlebars": "^4.7.8",
    "jsonpath": "^1.1.1",
    "lodash": "^4.17.21",
    "node-cache": "^5.1.2",
    "node-stream-zip": "^1.15.0",
    "ora": "^5.4.1",
    "papaparse": "^5.4.1",
    "puppeteer": "^21.4.1",
    "reflect-metadata": "^0.1.13",
    "tsyringe": "^4.8.0",
    "uuid": "^9.0.1",
    "winston": "^3.11.0",
    "xml2js": "^0.6.2",
    "yaml": "^2.3.3"
  },
  "devDependencies": {
    "@types/chai": "^4.3.9",
    "@types/fs-extra": "^11.0.3",
    "@types/jsonpath": "^0.2.2",
    "@types/lodash": "^4.14.200",
    "@types/node": "^20.8.9",
    "@types/papaparse": "^5.3.9",
    "@types/uuid": "^9.0.6",
    "@types/xml2js": "^0.4.13",
    "@typescript-eslint/eslint-plugin": "^6.9.1",
    "@typescript-eslint/parser": "^6.9.1",
    "eslint": "^8.52.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-import": "^2.29.0",
    "eslint-plugin-prettier": "^5.0.1",
    "husky": "^8.0.3",
    "lint-staged": "^15.0.2",
    "prettier": "^3.0.3",
    "rimraf": "^5.0.5",
    "ts-node": "^10.9.1",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.2.2"
  }
}


templates/projects/playwright/typescript/testng/tsconfig.json.template
-----------------------------------------------------------------------------

{
  "compilerOptions": {
    "target": "ES2022",
    "module": "CommonJS",
    "lib": ["ES2022", "DOM"],
    "moduleResolution": "node",
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictBindCallApply": true,
    "strictPropertyInitialization": true,
    "noImplicitThis": true,
    "alwaysStrict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "sourceMap": true,
    "declaration": true,
    "declarationMap": true,
    "outDir": "dist",
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,
    "resolveJsonModule": true,
    "forceConsistentCasingInFileNames": true,
    "skipLibCheck": true,
    "baseUrl": ".",
    "paths": {
      "@core/*": ["src/core/*"],
      "@config/*": ["src/config/*"],
      "@pages/*": ["src/pages/*"],
      "@tests/*": ["src/tests/*"],
      "@data/*": ["src/data/*"],
      "@utils/*": ["src/utils/*"],
      "@reporting/*": ["src/reporting/*"],
      "@models/*": ["src/models/*"],
      "@constants/*": ["src/constants/*"]
    },
    "types": ["node", "reflect-metadata"]
  },
  "include": ["src/**/*.ts"],
  "exclude": ["node_modules", "dist", "reports", "examples"],
  "ts-node": {
    "require": ["tsconfig-paths/register"]
  }
}



templates/projects/playwright/typescript/testng/README.md.template
-----------------------------------------------------------------------

# CSTestForge Playwright TypeScript TestNG Test Project

This project provides a robust test automation framework built with Playwright and TypeScript, following TestNG patterns using the CSTestForge framework.

## Project Structure

```
├── src
│   ├── config
│   │   ├── Config.ts
│   │   ├── ConfigLoader.ts
│   │   ├── EnvironmentConfig.ts
│   │   └── BrowserConfig.ts
│   ├── constants
│   │   ├── Constants.ts
│   │   ├── Locators.ts
│   │   └── TestData.ts
│   ├── core
│   │   ├── browser
│   │   │   ├── BrowserManager.ts
│   │   │   ├── PageManager.ts
│   │   │   └── ContextManager.ts
│   │   ├── element
│   │   │   ├── CSElement.ts
│   │   │   ├── CSElementList.ts
│   │   │   ├── CSForm.ts
│   │   │   ├── CSSelect.ts
│   │   │   └── CSTable.ts
│   │   ├── annotation
│   │   │   ├── Test.ts
│   │   │   ├── BeforeClass.ts
│   │   │   ├── AfterClass.ts
│   │   │   ├── BeforeMethod.ts
│   │   │   ├── AfterMethod.ts
│   │   │   ├── CSFindBy.ts
│   │   │   ├── CSPage.ts
│   │   │   └── DataProvider.ts
│   │   ├── test
│   │   │   ├── BaseTest.ts
│   │   │   ├── TestManager.ts
│   │   │   ├── TestResult.ts
│   │   │   └── SuiteManager.ts
│   │   ├── wait
│   │   │   ├── WaitStrategy.ts
│   │   │   ├── VisibilityWait.ts
│   │   │   ├── ClickableWait.ts
│   │   │   ├── TextWait.ts
│   │   │   └── AttributeWait.ts
│   │   ├── data
│   │   │   ├── DataSource.ts
│   │   │   ├── ExcelDataSource.ts
│   │   │   ├── CsvDataSource.ts
│   │   │   └── JsonDataSource.ts
│   │   ├── reporter
│   │   │   ├── Reporter.ts
│   │   │   ├── ReporterManager.ts
│   │   │   ├── TestListener.ts
│   │   │   └── ScreenshotManager.ts
│   │   └── ai
│   │       ├── SmartLocator.ts
│   │       ├── ElementDetection.ts
│   │       └── SelfHealing.ts
│   ├── models
│   │   ├── User.ts
│   │   ├── ProductItem.ts
│   │   └── OrderDetails.ts
│   ├── pages
│   │   ├── BasePage.ts
│   │   ├── components
│   │   │   ├── Header.ts
│   │   │   ├── Footer.ts
│   │   │   ├── NavMenu.ts
│   │   │   └── SearchBar.ts
│   │   ├── HomePage.ts
│   │   ├── LoginPage.ts
│   │   ├── ProductPage.ts
│   │   ├── SearchResultsPage.ts
│   │   ├── CheckoutPage.ts
│   │   └── OrderConfirmationPage.ts
│   ├── tests
│   │   ├── BaseTestClass.ts
│   │   ├── auth
│   │   │   ├── LoginTests.ts
│   │   │   └── RegistrationTests.ts
│   │   ├── product
│   │   │   ├── ProductSearchTests.ts
│   │   │   ├── ProductDetailsTests.ts
│   │   │   └── ProductFilterTests.ts
│   │   ├── cart
│   │   │   ├── CartTests.ts
│   │   │   └── CheckoutTests.ts
│   │   └── order
│   │       ├── OrderTests.ts
│   │       └── OrderHistoryTests.ts
│   ├── utils
│   │   ├── DateUtils.ts
│   │   ├── StringUtils.ts
│   │   ├── FileUtils.ts
│   │   ├── DataGenerator.ts
│   │   ├── ApiUtils.ts
│   │   └── LogUtils.ts
│   ├── data
│   │   ├── testData.json
│   │   ├── users.csv
│   │   └── products.xlsx
│   ├── reporting
│   │   ├── HtmlReporter.ts
│   │   ├── templates
│   │   │   ├── report.hbs
│   │   │   ├── dashboard.hbs
│   │   │   └── testCase.hbs
│   │   ├── MetricsCalculator.ts
│   │   └── ReportGenerator.ts
│   └── runner
│       ├── TestRunner.ts
│       ├── ParallelExecutor.ts
│       └── CLIParser.ts
├── package.json
├── tsconfig.json
├── .eslintrc.js
├── .prettierrc
├── .gitignore
├── cstestforge.json
└── README.md
```

## Prerequisites

- Node.js 18 or higher
- npm 9 or higher
- CSTestForge Framework

## Setup

1. Clone this repository
2. Install dependencies:

```bash
npm install
```

## Configuration

The framework can be configured using the `cstestforge.json` file:

```json
{
  "browser": {
    "type": "chromium",
    "headless": false,
    "slowMo": 50,
    "viewport": {
      "width": 1920,
      "height": 1080
    },
    "ignoreHTTPSErrors": true,
    "tracing": true,
    "recordVideo": true,
    "screenshots": "only-on-failure"
  },
  "timeout": {
    "global": 30000,
    "navigation": 30000,
    "element": 10000,
    "assertion": 5000
  },
  "execution": {
    "retry": {
      "count": 1,
      "onlyFailures": true
    },
    "parallel": false,
    "maxWorkers": 4
  },
  "environment": {
    "baseUrl": "https://demo.cstestforge.dev",
    "apiUrl": "https://api.cstestforge.dev",
    "env": "test"
  },
  "reporting": {
    "outputDir": "./reports",
    "captureScreenshots": true,
    "captureConsoleLog": true,
    "captureNetworkRequests": true,
    "generateDashboard": true
  },
  "dataProvider": {
    "dataDir": "./src/data"
  },
  "ai": {
    "selfHealing": true,
    "smartLocators": true,
    "elementRecognition": true
  }
}
```

You can also use environment variables to override configuration settings. Create a `.env` file:

```
BROWSER_TYPE=firefox
BROWSER_HEADLESS=true
BASE_URL=https://staging.cstestforge.dev
```

## Writing Tests

Tests follow a TestNG-like pattern with TypeScript decorators:

```typescript
import { Test, BeforeClass, AfterClass, BeforeMethod, AfterMethod, DataProvider } from '@core/annotation';
import { BaseTestClass } from '@tests/BaseTestClass';
import { LoginPage } from '@pages/LoginPage';
import { HomePage } from '@pages/HomePage';

export class LoginTests extends BaseTestClass {
  private loginPage!: LoginPage;
  private homePage!: HomePage;

  @BeforeClass
  async setup() {
    this.loginPage = new LoginPage(this.getPageManager());
    this.homePage = new HomePage(this.getPageManager());
  }

  @BeforeMethod
  async beforeEachTest() {
    await this.loginPage.navigate();
  }

  @Test({ description: 'User can login with valid credentials', groups: ['smoke', 'regression'] })
  async validLoginTest() {
    await this.loginPage
      .enterUsername('testuser')
      .enterPassword('password123')
      .clickLoginButton();
    
    await this.assertThat(this.homePage.isUserLoggedIn()).isTrue();
    await this.assertThat(this.homePage.getWelcomeMessage()).contains('Welcome testuser');
  }

  @Test({ description: 'User cannot login with invalid credentials', groups: ['regression'] })
  async invalidLoginTest() {
    await this.loginPage
      .enterUsername('invaliduser')
      .enterPassword('wrongpassword')
      .clickLoginButton();
    
    await this.assertThat(this.loginPage.getErrorMessage()).isVisible();
    await this.assertThat(this.loginPage.getErrorMessage().getText()).contains('Invalid credentials');
  }

  @Test({ description: 'Login with different user types', dataProvider: 'userDataProvider', groups: ['regression'] })
  async dataProviderLoginTest(username: string, password: string, isValid: boolean) {
    await this.loginPage
      .enterUsername(username)
      .enterPassword(password)
      .clickLoginButton();
    
    if (isValid) {
      await this.assertThat(this.homePage.isUserLoggedIn()).isTrue();
      await this.assertThat(this.homePage.getWelcomeMessage()).contains(`Welcome ${username}`);
    } else {
      await this.assertThat(this.loginPage.getErrorMessage()).isVisible();
      await this.assertThat(this.loginPage.getErrorMessage().getText()).contains('Invalid credentials');
    }
  }

  @DataProvider('userDataProvider')
  userDataProvider() {
    return [
      ['standardUser', 'password123', true],
      ['adminUser', 'admin123', true],
      ['guestUser', 'guest123', true],
      ['blockedUser', 'block123', false],
      ['unknownUser', 'unknown123', false]
    ];
  }

  @AfterMethod
  async afterEachTest() {
    if (await this.homePage.isUserLoggedIn()) {
      await this.homePage.logout();
    }
  }

  @AfterClass
  async teardown() {
    // Additional cleanup if needed
  }
}
```

## Page Object Model

The framework implements an enhanced Page Object Model:

```typescript
import { CSPage, CSFindBy } from '@core/annotation';
import { CSElement, CSButton, CSInput } from '@core/element';
import { BasePage } from './BasePage';

@CSPage({ 
  url: '/login',
  title: 'Login Page' 
})
export class LoginPage extends BasePage {
  @CSFindBy({ css: '#username' })
  private usernameInput!: CSInput;

  @CSFindBy({ css: '#password' })
  private passwordInput!: CSInput;

  @CSFindBy({ css: '#login-button' })
  private loginButton!: CSButton;

  @CSFindBy({ css: '.error-message' })
  private errorMessage!: CSElement;

  async navigate(): Promise<this> {
    await this.open();
    await this.waitForPageLoad();
    return this;
  }

  enterUsername(username: string): this {
    this.usernameInput.type(username);
    return this;
  }

  enterPassword(password: string): this {
    this.passwordInput.type(password);
    return this;
  }

  async clickLoginButton(): Promise<void> {
    await this.loginButton.click();
  }

  getErrorMessage(): CSElement {
    return this.errorMessage;
  }
}
```

## Running Tests

### Run all tests

```bash
npm test
```

### Run tests with specific groups

```bash
npm run test:smoke
```

or

```bash
npm run test:regression
```

### Run specific tests

```bash
npm run test:specific -- LoginTests,ProductSearchTests
```

### Run tests in parallel

```bash
npm run test:parallel
```

## Reporting

After test execution, the framework generates detailed HTML reports in the `reports` directory:

- Dashboard view with test metrics
- Detailed test execution results
- Screenshots of failures
- Performance metrics
- Self-healing events

## Self-Healing Capabilities

The framework includes advanced self-healing capabilities:

- Multiple locator strategies for each element
- Automatic recovery from broken locators
- Locator ranking based on reliability
- AI-powered element recognition

## License

Copyright © 2025 CSTestForge. All rights reserved.



templates/projects/playwright/typescript/bdd/package.json.template
------------------------------------------------------------------------------

{
  "name": "cstestforge-playwright-typescript-bdd",
  "version": "1.0.0",
  "description": "CSTestForge Playwright TypeScript BDD Test Project",
  "main": "index.js",
  "scripts": {
    "clean": "rimraf dist reports",
    "build": "tsc",
    "prebuild": "npm run clean",
    "lint": "eslint . --ext .ts",
    "format": "prettier --write \"src/**/*.ts\"",
    "test": "npm run build && cucumber-js",
    "test:smoke": "npm run build && cucumber-js --tags @smoke",
    "test:regression": "npm run build && cucumber-js --tags @regression",
    "test:parallel": "npm run build && cucumber-js --parallel 4",
    "test:focus": "npm run build && cucumber-js --tags @focus",
    "test:rerun": "npm run build && cucumber-js @rerun.txt",
    "report": "ts-node src/reporting/ReportGenerator.ts",
    "precommit": "lint-staged"
  },
  "lint-staged": {
    "*.ts": [
      "eslint --fix",
      "prettier --write"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cstestforge/playwright-typescript-bdd.git"
  },
  "keywords": [
    "cstestforge",
    "playwright",
    "typescript",
    "bdd",
    "cucumber",
    "gherkin",
    "automation",
    "testing"
  ],
  "author": "CSTestForge Team",
  "license": "UNLICENSED",
  "private": true,
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  },
  "bugs": {
    "url": "https://github.com/cstestforge/playwright-typescript-bdd/issues"
  },
  "homepage": "https://github.com/cstestforge/playwright-typescript-bdd#readme",
  "dependencies": {
    "@cucumber/cucumber": "^10.0.1",
    "@cucumber/messages": "^22.0.0",
    "@cucumber/pretty-formatter": "^1.0.0",
    "@playwright/test": "^1.39.0",
    "ajv": "^8.12.0",
    "axios": "^1.6.0",
    "chai": "^4.3.10",
    "chalk": "^4.1.2",
    "commander": "^11.0.0",
    "csv-parse": "^5.5.2",
    "dayjs": "^1.11.10",
    "dotenv": "^16.3.1",
    "exceljs": "^4.4.0",
    "fs-extra": "^11.1.1",
    "handlebars": "^4.7.8",
    "jsonpath": "^1.1.1",
    "lodash": "^4.17.21",
    "multiple-cucumber-html-reporter": "^3.5.0",
    "node-cache": "^5.1.2",
    "node-stream-zip": "^1.15.0",
    "ora": "^5.4.1",
    "papaparse": "^5.4.1",
    "puppeteer": "^21.4.1",
    "reflect-metadata": "^0.1.13",
    "tsyringe": "^4.8.0",
    "uuid": "^9.0.1",
    "winston": "^3.11.0",
    "xml2js": "^0.6.2",
    "yaml": "^2.3.3"
  },
  "devDependencies": {
    "@cucumber/cucumber-expressions": "^16.1.2",
    "@types/chai": "^4.3.9",
    "@types/fs-extra": "^11.0.3",
    "@types/jsonpath": "^0.2.2",
    "@types/lodash": "^4.14.200",
    "@types/node": "^20.8.9",
    "@types/papaparse": "^5.3.9",
    "@types/uuid": "^9.0.6",
    "@types/xml2js": "^0.4.13",
    "@typescript-eslint/eslint-plugin": "^6.9.1",
    "@typescript-eslint/parser": "^6.9.1",
    "cucumber-html-reporter": "^7.1.1",
    "eslint": "^8.52.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-cucumber": "^2.0.0",
    "eslint-plugin-import": "^2.29.0",
    "eslint-plugin-prettier": "^5.0.1",
    "husky": "^8.0.3",
    "lint-staged": "^15.0.2",
    "prettier": "^3.0.3",
    "rimraf": "^5.0.5",
    "ts-node": "^10.9.1",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.2.2"
  }
}


templates/projects/playwright/typescript/bdd/tsconfig.json.template
--------------------------------------------------------------------------------

{
  "compilerOptions": {
    "target": "ES2022",
    "module": "CommonJS",
    "lib": ["ES2022", "DOM"],
    "moduleResolution": "node",
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictBindCallApply": true,
    "strictPropertyInitialization": true,
    "noImplicitThis": true,
    "alwaysStrict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "sourceMap": true,
    "declaration": true,
    "declarationMap": true,
    "outDir": "dist",
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,
    "resolveJsonModule": true,
    "forceConsistentCasingInFileNames": true,
    "skipLibCheck": true,
    "baseUrl": ".",
    "paths": {
      "@core/*": ["src/core/*"],
      "@config/*": ["src/config/*"],
      "@pages/*": ["src/pages/*"],
      "@steps/*": ["src/steps/*"],
      "@support/*": ["src/support/*"],
      "@data/*": ["src/data/*"],
      "@utils/*": ["src/utils/*"],
      "@reporting/*": ["src/reporting/*"],
      "@models/*": ["src/models/*"],
      "@constants/*": ["src/constants/*"],
      "@hooks/*": ["src/hooks/*"]
    },
    "types": ["node", "reflect-metadata", "@cucumber/cucumber"]
  },
  "include": ["src/**/*.ts", "cucumber.js"],
  "exclude": ["node_modules", "dist", "reports", "examples"],
  "ts-node": {
    "require": ["tsconfig-paths/register"]
  }
}


templates/projects/playwright/typescript/bdd/README.md.template
---------------------------------------------------------------------

# CSTestForge Playwright TypeScript BDD Test Project

This project provides a comprehensive test automation framework built with Playwright, TypeScript, and Cucumber for BDD testing using the CSTestForge framework.

## Project Structure

```
├── src
│   ├── config
│   │   ├── Config.ts
│   │   ├── ConfigLoader.ts
│   │   ├── EnvironmentConfig.ts
│   │   └── BrowserConfig.ts
│   ├── constants
│   │   ├── Constants.ts
│   │   ├── Locators.ts
│   │   └── TestData.ts
│   ├── core
│   │   ├── browser
│   │   │   ├── BrowserManager.ts
│   │   │   ├── PageManager.ts
│   │   │   └── ContextManager.ts
│   │   ├── element
│   │   │   ├── CSElement.ts
│   │   │   ├── CSElementList.ts
│   │   │   ├── CSForm.ts
│   │   │   ├── CSSelect.ts
│   │   │   └── CSTable.ts
│   │   ├── annotation
│   │   │   ├── CSFindBy.ts
│   │   │   ├── CSPage.ts
│   │   │   └── DataProvider.ts
│   │   ├── wait
│   │   │   ├── WaitStrategy.ts
│   │   │   ├── VisibilityWait.ts
│   │   │   ├── ClickableWait.ts
│   │   │   ├── TextWait.ts
│   │   │   └── AttributeWait.ts
│   │   ├── data
│   │   │   ├── DataSource.ts
│   │   │   ├── ExcelDataSource.ts
│   │   │   ├── CsvDataSource.ts
│   │   │   └── JsonDataSource.ts
│   │   ├── reporter
│   │   │   ├── Reporter.ts
│   │   │   ├── ReporterManager.ts
│   │   │   └── ScreenshotManager.ts
│   │   └── ai
│   │       ├── SmartLocator.ts
│   │       ├── ElementDetection.ts
│   │       └── SelfHealing.ts
│   ├── models
│   │   ├── User.ts
│   │   ├── ProductItem.ts
│   │   └── OrderDetails.ts
│   ├── pages
│   │   ├── BasePage.ts
│   │   ├── components
│   │   │   ├── Header.ts
│   │   │   ├── Footer.ts
│   │   │   ├── NavMenu.ts
│   │   │   └── SearchBar.ts
│   │   ├── HomePage.ts
│   │   ├── LoginPage.ts
│   │   ├── ProductPage.ts
│   │   ├── SearchResultsPage.ts
│   │   ├── CheckoutPage.ts
│   │   └── OrderConfirmationPage.ts
│   ├── steps
│   │   ├── auth
│   │   │   ├── LoginSteps.ts
│   │   │   └── RegistrationSteps.ts
│   │   ├── product
│   │   │   ├── ProductSearchSteps.ts
│   │   │   └── ProductDetailsSteps.ts
│   │   ├── cart
│   │   │   ├── CartSteps.ts
│   │   │   └── CheckoutSteps.ts
│   │   ├── order
│   │   │   └── OrderSteps.ts
│   │   ├── common
│   │   │   └── CommonSteps.ts
│   │   └── hooks
│   │       └── Hooks.ts
│   ├── support
│   │   ├── World.ts
│   │   ├── hooks.ts
│   │   ├── types.ts
│   │   ├── parameters.ts
│   │   └── transforms.ts
│   ├── utils
│   │   ├── DateUtils.ts
│   │   ├── StringUtils.ts
│   │   ├── FileUtils.ts
│   │   ├── DataGenerator.ts
│   │   ├── ApiUtils.ts
│   │   ├── TableUtils.ts
│   │   └── LogUtils.ts
│   ├── data
│   │   ├── testData.json
│   │   ├── users.csv
│   │   └── products.xlsx
│   └── reporting
│       ├── HtmlReporter.ts
│       ├── templates
│       │   ├── report.hbs
│       │   ├── dashboard.hbs
│       │   └── scenario.hbs
│       ├── MetricsCalculator.ts
│       └── ReportGenerator.ts
├── features
│   ├── auth
│   │   ├── login.feature
│   │   └── registration.feature
│   ├── product
│   │   ├── product_search.feature
│   │   └── product_details.feature
│   ├── cart
│   │   ├── cart.feature
│   │   └── checkout.feature
│   └── order
│       └── order.feature
├── cucumber.js
├── package.json
├── tsconfig.json
├── .eslintrc.js
├── .prettierrc
├── .gitignore
├── cstestforge.json
└── README.md
```

## Prerequisites

- Node.js 18 or higher
- npm 9 or higher
- CSTestForge Framework

## Setup

1. Clone this repository
2. Install dependencies:

```bash
npm install
```

## Configuration

The framework can be configured using the `cstestforge.json` file:

```json
{
  "browser": {
    "type": "chromium",
    "headless": false,
    "slowMo": 50,
    "viewport": {
      "width": 1920,
      "height": 1080
    },
    "ignoreHTTPSErrors": true,
    "tracing": true,
    "recordVideo": true,
    "screenshots": "only-on-failure"
  },
  "timeout": {
    "global": 30000,
    "navigation": 30000,
    "element": 10000,
    "assertion": 5000
  },
  "execution": {
    "retry": {
      "count": 1,
      "onlyFailures": true
    },
    "parallel": false,
    "maxWorkers": 4
  },
  "environment": {
    "baseUrl": "https://demo.cstestforge.dev",
    "apiUrl": "https://api.cstestforge.dev",
    "env": "test"
  },
  "reporting": {
    "outputDir": "./reports",
    "captureScreenshots": true,
    "captureConsoleLog": true,
    "captureNetworkRequests": true,
    "generateDashboard": true
  },
  "dataProvider": {
    "dataDir": "./src/data"
  },
  "ai": {
    "selfHealing": true,
    "smartLocators": true,
    "elementRecognition": true
  }
}
```

You can also use environment variables to override configuration settings. Create a `.env` file:

```
BROWSER_TYPE=firefox
BROWSER_HEADLESS=true
BASE_URL=https://staging.cstestforge.dev
```

## Cucumber Configuration

The `cucumber.js` file in the root directory configures Cucumber options:

```javascript
module.exports = {
  default: {
    paths: ['features/**/*.feature'],
    require: ['dist/src/steps/**/*.js', 'dist/src/support/**/*.js'],
    requireModule: ['ts-node/register'],
    format: [
      'summary',
      '@cucumber/pretty-formatter',
      ['json:reports/cucumber-report.json', 'html:reports/cucumber-report.html']
    ],
    publishQuiet: true,
    parallel: 1,
    retry: 0,
    failFast: false,
    tags: ''
  },
  smoke: {
    tags: '@smoke',
    format: ['@cucumber/pretty-formatter']
  },
  regression: {
    tags: '@regression',
    format: ['@cucumber/pretty-formatter']
  },
  focus: {
    tags: '@focus',
    format: ['@cucumber/pretty-formatter']
  },
  parallel: {
    parallel: 4
  }
};
```

## Writing Features

Features are written using Gherkin syntax:

```gherkin
Feature: User authentication
  As a customer
  I want to be able to log in to my account
  So that I can access my personal information and order history

  Background:
    Given I am on the home page

  @smoke @regression
  Scenario: Successful login with valid credentials
    When I navigate to the login page
    And I enter username "testuser" and password "Password123"
    And I click the login button
    Then I should be logged in successfully
    And I should see a welcome message with my name

  @regression
  Scenario: Failed login with invalid credentials
    When I navigate to the login page
    And I enter username "testuser" and password "wrongpassword"
    And I click the login button
    Then I should see an error message "Invalid credentials"
    And I should remain on the login page

  @regression
  Scenario Outline: Login with different user types
    When I navigate to the login page
    And I enter username "<username>" and password "<password>"
    And I click the login button
    Then the login should be "<status>"
    And I should see the message "<message>"

    Examples:
      | username     | password    | status    | message                        |
      | standardUser | password123 | successful| Welcome back, Standard User    |
      | adminUser    | admin123    | successful| Welcome back, Admin User       |
      | guestUser    | guest123    | successful| Welcome back, Guest User       |
      | blockedUser  | block123    | failed    | This account has been blocked  |
      | unknownUser  | unknown123  | failed    | Invalid credentials            |
```

## Step Definitions

Step definitions connect Gherkin steps to TypeScript code:

```typescript
import { Given, When, Then } from '@cucumber/cucumber';
import { World } from '@support/World';
import { expect } from 'chai';

// Page objects are instantiated in the World class
When('I navigate to the login page', async function(this: World) {
  await this.homePage.getLoginLink().click();
  await this.loginPage.waitForPageLoad();
});

When('I enter username {string} and password {string}', async function(this: World, username: string, password: string) {
  await this.loginPage.enterUsername(username);
  await this.loginPage.enterPassword(password);
});

When('I click the login button', async function(this: World) {
  await this.loginPage.clickLoginButton();
});

Then('I should be logged in successfully', async function(this: World) {
  const isLoggedIn = await this.homePage.isUserLoggedIn();
  expect(isLoggedIn).to.be.true;
});

Then('I should see a welcome message with my name', async function(this: World) {
  const welcomeMessage = await this.homePage.getWelcomeMessage().getText();
  expect(welcomeMessage).to.contain('Welcome');
});

Then('I should see an error message {string}', async function(this: World, expectedMessage: string) {
  const errorMessage = await this.loginPage.getErrorMessage().getText();
  expect(errorMessage).to.equal(expectedMessage);
});

Then('I should remain on the login page', async function(this: World) {
  const isOnLoginPage = await this.loginPage.isCurrentPage();
  expect(isOnLoginPage).to.be.true;
});

Then('the login should be {string}', async function(this: World, status: string) {
  if (status === 'successful') {
    const isLoggedIn = await this.homePage.isUserLoggedIn();
    expect(isLoggedIn).to.be.true;
  } else {
    const isOnLoginPage = await this.loginPage.isCurrentPage();
    expect(isOnLoginPage).to.be.true;
  }
});

Then('I should see the message {string}', async function(this: World, expectedMessage: string) {
  if (await this.homePage.isUserLoggedIn()) {
    const welcomeMessage = await this.homePage.getWelcomeMessage().getText();
    expect(welcomeMessage).to.equal(expectedMessage);
  } else {
    const errorMessage = await this.loginPage.getErrorMessage().getText();
    expect(errorMessage).to.equal(expectedMessage);
  }
});
```

## World Class

The World class provides context for each scenario:

```typescript
import { setWorldConstructor } from '@cucumber/cucumber';
import { BrowserManager } from '@core/browser/BrowserManager';
import { PageManager } from '@core/browser/PageManager';
import { ConfigLoader } from '@config/ConfigLoader';
import { Reporter } from '@core/reporter/Reporter';

// Page imports
import { HomePage } from '@pages/HomePage';
import { LoginPage } from '@pages/LoginPage';
import { ProductPage } from '@pages/ProductPage';
// ... other page imports

export class World {
  private browserManager: BrowserManager;
  private pageManager: PageManager;
  private config: any;
  private reporter: Reporter;

  // Page objects
  public homePage: HomePage;
  public loginPage: LoginPage;
  public productPage: ProductPage;
  // ... other page objects

  constructor() {
    // Load configuration
    this.config = ConfigLoader.load();
    
    // Initialize browser and page managers
    this.browserManager = new BrowserManager(this.config.browser);
    this.pageManager = new PageManager(this.browserManager);
    
    // Initialize reporter
    this.reporter = new Reporter(this.config.reporting);
    
    // Initialize page objects
    this.homePage = new HomePage(this.pageManager);
    this.loginPage = new LoginPage(this.pageManager);
    this.productPage = new ProductPage(this.pageManager);
    // ... initialize other page objects
  }

  async init() {
    await this.browserManager.launch();
  }

  async dispose() {
    await this.browserManager.close();
  }

  getPageManager() {
    return this.pageManager;
  }

  getConfig() {
    return this.config;
  }

  getReporter() {
    return this.reporter;
  }
}

setWorldConstructor(World);
```

## Page Object Model

The framework implements an enhanced Page Object Model:

```typescript
import { CSPage, CSFindBy } from '@core/annotation';
import { CSElement, CSButton, CSInput } from '@core/element';
import { BasePage } from './BasePage';

@CSPage({ 
  url: '/login',
  title: 'Login Page' 
})
export class LoginPage extends BasePage {
  @CSFindBy({ css: '#username' })
  private usernameInput!: CSInput;

  @CSFindBy({ css: '#password' })
  private passwordInput!: CSInput;

  @CSFindBy({ css: '#login-button' })
  private loginButton!: CSButton;

  @CSFindBy({ css: '.error-message' })
  private errorMessage!: CSElement;

  async navigate(): Promise<this> {
    await this.open();
    await this.waitForPageLoad();
    return this;
  }

  async enterUsername(username: string): Promise<this> {
    await this.usernameInput.type(username);
    return this;
  }

  async enterPassword(password: string): Promise<this> {
    await this.passwordInput.type(password);
    return this;
  }

  async clickLoginButton(): Promise<void> {
    await this.loginButton.click();
  }

  getErrorMessage(): CSElement {
    return this.errorMessage;
  }

  async isCurrentPage(): Promise<boolean> {
    return await this.pageManager.getCurrentUrl().then(url => {
      return url.includes('/login');
    });
  }

  async login(username: string, password: string): Promise<void> {
    await this.enterUsername(username);
    await this.enterPassword(password);
    await this.clickLoginButton();
  }
}
```

## Hooks

Hooks are used to execute code before and after scenarios:

```typescript
import { Before, After, BeforeAll, AfterAll } from '@cucumber/cucumber';
import { World } from '@support/World';

// Global setup - runs once before all scenarios
BeforeAll(async function() {
  // Set up global resources
  console.log('Starting test execution');
});

// Global teardown - runs once after all scenarios
AfterAll(async function() {
  // Clean up global resources
  console.log('Test execution completed');
});

// Before each scenario
Before(async function(this: World) {
  // Initialize the world for this scenario
  await this.init();
  console.log(`Starting scenario: ${this.scenarioName}`);
});

// After each scenario
After(async function(this: World, scenario) {
  // Capture screenshot if scenario failed
  if (scenario.result.status === 'FAILED') {
    const screenshot = await this.pageManager.takeScreenshot();
    this.attach(screenshot, 'image/png');
  }
  
  // Clean up after scenario
  await this.dispose();
  console.log(`Completed scenario: ${this.scenarioName} with status: ${scenario.result.status}`);
});

// Tagged hooks
Before({ tags: '@login' }, async function(this: World) {
  // Special setup for login scenarios
  console.log('Setting up for login scenario');
});

After({ tags: '@cleanup' }, async function(this: World) {
  // Special cleanup for scenarios with @cleanup tag
  console.log('Performing special cleanup');
});
```

## Running Tests

### Run all tests

```bash
npm test
```

### Run tests with specific tags

```bash
npm run test:smoke
```

or

```bash
npm run test:regression
```

### Run tests in parallel

```bash
npm run test:parallel
```

### Run focused tests

Add the `@focus` tag to scenarios you want to run, then:

```bash
npm run test:focus
```

### Rerun failed tests

Failed tests are recorded in `@rerun.txt`. To rerun them:

```bash
npm run test:rerun
```

## Reporting

After test execution, the framework generates detailed HTML reports in the `reports` directory:

- Cucumber HTML Reports
- CSTestForge Dashboard
- Performance metrics
- Screenshot gallery
- Network request logs
- Self-healing events

## Self-Healing Capabilities

The framework includes advanced self-healing capabilities:

- Multiple locator strategies for each element
- Automatic recovery from broken locators
- Locator ranking based on reliability
- AI-powered element recognition

When a primary locator fails, the self-healing mechanism:

1. Attempts alternative locators in order of reliability
2. Uses element recognition to locate similar elements
3. Learns from successful recoveries to improve future locator reliability
4. Logs detailed recovery information in the reports

## AI-Enhanced Features

The framework includes the following AI capabilities:

- Smart locator generation with proprietary algorithms
- Element recognition using custom ML models
- Test optimization with heuristic algorithms
- Anomaly detection with statistical models

## License

Copyright © 2025 CSTestForge. All rights reserved.



templates/reporting/html-report-template.html
---------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CSTestForge Test Report</title>
    <style>
        :root {
            --primary-color: #C54B8C;
            --primary-light: #e27eaf;
            --primary-dark: #9e2f6e;
            --secondary-color: #4B8CC5;
            --secondary-light: #7eb0e2;
            --secondary-dark: #2f6e9e;
            --success-color: #4BC56E;
            --success-light: #7ee299;
            --success-dark: #2f9e50;
            --warning-color: #C5A14B;
            --warning-light: #e2c77e;
            --warning-dark: #9e7c2f;
            --danger-color: #C54B4B;
            --danger-light: #e27e7e;
            --danger-dark: #9e2f2f;
            --neutral-color: #4B4B4B;
            --neutral-light: #7e7e7e;
            --neutral-dark: #2f2f2f;
            --light-color: #F5F5F5;
            --dark-color: #333333;
            --font-primary: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            --font-secondary: 'SF Mono', 'Fira Code', 'Fira Mono', 'Roboto Mono', monospace;
            --border-radius: 4px;
            --box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
        }

        html, body {
            margin: 0;
            padding: 0;
            font-family: var(--font-primary);
            background-color: var(--light-color);
            color: var(--dark-color);
            line-height: 1.6;
            font-size: 16px;
        }

        * {
            box-sizing: border-box;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 15px 20px;
            background-color: white;
            border-bottom: 1px solid #e0e0e0;
            border-radius: var(--border-radius) var(--border-radius) 0 0;
            box-shadow: var(--box-shadow);
        }

        .logo {
            display: flex;
            align-items: center;
        }

        .logo img {
            height: 40px;
            margin-right: 10px;
        }

        .logo h1 {
            font-size: 24px;
            font-weight: 700;
            margin: 0;
            color: var(--primary-color);
        }

        .summary {
            background-color: white;
            border-radius: var(--border-radius);
            margin-bottom: 20px;
            box-shadow: var(--box-shadow);
            overflow: hidden;
        }

        .summary-header {
            padding: 15px 20px;
            background-color: var(--primary-color);
            color: white;
        }

        .summary-header h2 {
            margin: 0;
            font-size: 18px;
        }

        .summary-body {
            padding: 20px;
            display: flex;
            flex-wrap: wrap;
        }

        .summary-item {
            flex: 1;
            min-width: 200px;
            margin: 10px;
            padding: 15px;
            background-color: #f9f9f9;
            border-radius: var(--border-radius);
            text-align: center;
        }

        .summary-item h3 {
            margin: 0 0 10px 0;
            font-size: 14px;
            color: var(--neutral-dark);
            text-transform: uppercase;
        }

        .summary-item p {
            margin: 0;
            font-size: 24px;
            font-weight: 700;
        }

        .summary-item.passed p {
            color: var(--success-dark);
        }

        .summary-item.failed p {
            color: var(--danger-dark);
        }

        .summary-item.skipped p {
            color: var(--warning-dark);
        }

        .summary-item.total p {
            color: var(--primary-dark);
        }

        .dashboard {
            display: flex;
            flex-wrap: wrap;
            margin-bottom: 20px;
        }

        .chart {
            flex: 1;
            min-width: 300px;
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            margin: 10px;
            padding: 20px;
        }

        .chart h3 {
            margin: 0 0 15px 0;
            font-size: 16px;
            color: var(--primary-dark);
        }

        .chart-container {
            height: 250px;
            position: relative;
        }

        .tabs {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            overflow: hidden;
        }

        .tab-header {
            display: flex;
            background-color: #f0f0f0;
            overflow-x: auto;
        }

        .tab-button {
            padding: 15px 20px;
            background-color: transparent;
            border: none;
            cursor: pointer;
            font-family: var(--font-primary);
            font-size: 14px;
            font-weight: 600;
            color: var(--neutral-dark);
            transition: all 0.2s ease;
            white-space: nowrap;
        }

        .tab-button:hover {
            background-color: #e0e0e0;
        }

        .tab-button.active {
            background-color: white;
            color: var(--primary-color);
            border-bottom: 2px solid var(--primary-color);
        }

        .tab-content {
            display: none;
            padding: 20px;
        }

        .tab-content.active {
            display: block;
        }

        .test-suites {
            border-collapse: collapse;
            width: 100%;
        }

        .test-suites th, .test-suites td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
        }

        .test-suites th {
            background-color: #f9f9f9;
            font-weight: 600;
            color: var(--neutral-dark);
            position: sticky;
            top: 0;
        }

        .test-suites tbody tr:hover {
            background-color: #f9f9f9;
        }

        .status {
            display: inline-block;
            padding: 4px 8px;
            border-radius: var(--border-radius);
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status.passed {
            background-color: var(--success-light);
            color: var(--success-dark);
        }

        .status.failed {
            background-color: var(--danger-light);
            color: var(--danger-dark);
        }

        .status.skipped {
            background-color: var(--warning-light);
            color: var(--warning-dark);
        }

        .accordion {
            margin-bottom: 10px;
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .accordion-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            background-color: #f9f9f9;
            cursor: pointer;
            transition: background-color 0.2s ease;
        }

        .accordion-header:hover {
            background-color: #f0f0f0;
        }

        .accordion-title {
            font-weight: 600;
            margin: 0;
            flex: 1;
        }

        .accordion-icon {
            margin-left: 10px;
            transition: transform 0.2s ease;
        }

        .accordion.open .accordion-icon {
            transform: rotate(180deg);
        }

        .accordion-content {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease;
            background-color: white;
        }

        .accordion.open .accordion-content {
            max-height: 2000px;
        }

        .test-details {
            padding: 15px;
        }

        .test-info {
            display: flex;
            flex-wrap: wrap;
            margin-bottom: 15px;
        }

        .test-info-item {
            margin-right: 20px;
            margin-bottom: 10px;
        }

        .test-info-item span {
            font-weight: 600;
            color: var(--neutral-dark);
        }

        .test-steps {
            border-collapse: collapse;
            width: 100%;
        }

        .test-steps th, .test-steps td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
        }

        .test-steps th {
            background-color: #f9f9f9;
            font-weight: 600;
            color: var(--neutral-dark);
        }

        .step-description {
            font-family: var(--font-secondary);
            white-space: pre-wrap;
        }

        .step-duration {
            white-space: nowrap;
            color: var(--neutral-color);
        }

        .screenshot {
            max-width: 100%;
            border: 1px solid #e0e0e0;
            border-radius: var(--border-radius);
            margin-top: 10px;
        }

        .logs {
            background-color: #f9f9f9;
            padding: 15px;
            border-radius: var(--border-radius);
            font-family: var(--font-secondary);
            white-space: pre-wrap;
            overflow-x: auto;
            max-height: 300px;
            margin-top: 15px;
        }

        .log-line {
            margin: 0;
            padding: 2px 0;
        }

        .log-line.error {
            color: var(--danger-dark);
        }

        .log-line.warning {
            color: var(--warning-dark);
        }

        .log-line.info {
            color: var(--secondary-dark);
        }

        .log-line.debug {
            color: var(--neutral-color);
        }

        .metrics-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 15px;
        }

        .metrics-table th, .metrics-table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
        }

        .metrics-table th {
            background-color: #f9f9f9;
            font-weight: 600;
            color: var(--neutral-dark);
        }

        .performance-bar {
            height: 8px;
            background-color: #e0e0e0;
            border-radius: 4px;
            overflow: hidden;
            margin-top: 5px;
        }

        .performance-value {
            height: 100%;
            background-color: var(--primary-color);
        }

        .self-healing {
            margin-top: 15px;
        }

        .self-healing-item {
            background-color: #f9f9f9;
            border-radius: var(--border-radius);
            padding: 15px;
            margin-bottom: 10px;
        }

        .self-healing-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .self-healing-status {
            font-weight: 600;
        }

        .self-healing-status.recovered {
            color: var(--success-dark);
        }

        .self-healing-status.failed {
            color: var(--danger-dark);
        }

        .self-healing-details {
            font-family: var(--font-secondary);
            font-size: 14px;
        }

        .locator {
            background-color: #f0f0f0;
            padding: 5px 8px;
            border-radius: 3px;
            font-family: var(--font-secondary);
            font-size: 12px;
        }

        .footer {
            text-align: center;
            padding: 20px;
            color: var(--neutral-color);
            font-size: 14px;
        }

        @media (max-width: 768px) {
            .summary-item {
                min-width: 100%;
            }

            .chart {
                min-width: 100%;
            }

            .test-info {
                flex-direction: column;
            }

            .test-info-item {
                margin-right: 0;
            }
        }

        /* CSS for print view */
        @media print {
            body {
                background-color: white;
            }

            .container {
                max-width: 100%;
                padding: 0;
            }

            .chart {
                page-break-inside: avoid;
            }

            .tab-header {
                display: none;
            }

            .tab-content {
                display: block;
            }

            .accordion-content {
                max-height: none;
            }

            .logs {
                max-height: none;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="logo">
                <h1>CSTestForge Test Report</h1>
            </div>
            <div class="info">
                <span id="execution-date">{{executionDate}}</span>
            </div>
        </div>

        <div class="summary">
            <div class="summary-header">
                <h2>Test Execution Summary</h2>
            </div>
            <div class="summary-body">
                <div class="summary-item total">
                    <h3>Total Tests</h3>
                    <p>{{totalTests}}</p>
                </div>
                <div class="summary-item passed">
                    <h3>Passed</h3>
                    <p>{{passedTests}}</p>
                </div>
                <div class="summary-item failed">
                    <h3>Failed</h3>
                    <p>{{failedTests}}</p>
                </div>
                <div class="summary-item skipped">
                    <h3>Skipped</h3>
                    <p>{{skippedTests}}</p>
                </div>
                <div class="summary-item">
                    <h3>Success Rate</h3>
                    <p>{{successRate}}%</p>
                </div>
                <div class="summary-item">
                    <h3>Duration</h3>
                    <p>{{totalDuration}}</p>
                </div>
            </div>
        </div>

        <div class="dashboard">
            <div class="chart">
                <h3>Test Results</h3>
                <div class="chart-container">
                    <canvas id="results-chart"></canvas>
                </div>
            </div>
            <div class="chart">
                <h3>Test Duration</h3>
                <div class="chart-container">
                    <canvas id="duration-chart"></canvas>
                </div>
            </div>
        </div>

        <div class="tabs">
            <div class="tab-header">
                <button class="tab-button active" data-tab="test-results">Test Results</button>
                <button class="tab-button" data-tab="self-healing">Self-Healing</button>
                <button class="tab-button" data-tab="performance">Performance</button>
                <button class="tab-button" data-tab="screenshots">Screenshots</button>
                <button class="tab-button" data-tab="logs">Logs</button>
            </div>

            <div id="test-results" class="tab-content active">
                <table class="test-suites">
                    <thead>
                        <tr>
                            <th>Test Name</th>
                            <th>Status</th>
                            <th>Duration</th>
                            <th>Start Time</th>
                            <th>End Time</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each tests}}
                        <tr>
                            <td>
                                <div class="accordion" id="test-{{id}}">
                                    <div class="accordion-header">
                                        <h3 class="accordion-title">{{name}}</h3>
                                        <span class="status {{status}}">{{status}}</span>
                                        <span class="accordion-icon">▼</span>
                                    </div>
                                    <div class="accordion-content">
                                        <div class="test-details">
                                            <div class="test-info">
                                                <div class="test-info-item">
                                                    <span>Suite:</span> {{suite}}
                                                </div>
                                                <div class="test-info-item">
                                                    <span>Class:</span> {{className}}
                                                </div>
                                                <div class="test-info-item">
                                                    <span>Method:</span> {{methodName}}
                                                </div>
                                                <div class="test-info-item">
                                                    <span>Groups:</span> {{groups}}
                                                </div>
                                                <div class="test-info-item">
                                                    <span>Status:</span> {{status}}
                                                </div>
                                                <div class="test-info-item">
                                                    <span>Duration:</span> {{duration}}
                                                </div>
                                            </div>

                                            <h4>Test Steps</h4>
                                            <table class="test-steps">
                                                <thead>
                                                    <tr>
                                                        <th>Step</th>
                                                        <th>Description</th>
                                                        <th>Status</th>
                                                        <th>Duration</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    {{#each steps}}
                                                    <tr>
                                                        <td>{{number}}</td>
                                                        <td class="step-description">{{description}}</td>
                                                        <td><span class="status {{status}}">{{status}}</span></td>
                                                        <td class="step-duration">{{duration}}</td>
                                                    </tr>
                                                    {{#if screenshot}}
                                                    <tr>
                                                        <td colspan="4">
                                                            <img src="{{screenshot}}" alt="Step Screenshot" class="screenshot" />
                                                        </td>
                                                    </tr>
                                                    {{/if}}
                                                    {{/each}}
                                                </tbody>
                                            </table>

                                            {{#if error}}
                                            <h4>Error</h4>
                                            <div class="logs">
                                                <p class="log-line error">{{error}}</p>
                                                <p class="log-line error">{{stackTrace}}</p>
                                            </div>
                                            {{/if}}

                                            {{#if logs}}
                                            <h4>Logs</h4>
                                            <div class="logs">
                                                {{#each logs}}
                                                <p class="log-line {{level}}">{{timestamp}} [{{level}}] - {{message}}</p>
                                                {{/each}}
                                            </div>
                                            {{/if}}
                                        </div>
                                    </div>
                                </div>
                            </td>
                            <td><span class="status {{status}}">{{status}}</span></td>
                            <td>{{duration}}</td>
                            <td>{{startTime}}</td>
                            <td>{{endTime}}</td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>

            <div id="self-healing" class="tab-content">
                <h3>Self-Healing Events</h3>
                <div class="self-healing">
                    {{#each selfHealingEvents}}
                    <div class="self-healing-item">
                        <div class="self-healing-header">
                            <h4>{{timestamp}} - {{elementDescription}}</h4>
                            <span class="self-healing-status {{status}}">{{status}}</span>
                        </div>
                        <div class="self-healing-details">
                            <p><strong>Original Locator:</strong> <span class="locator">{{originalLocator}}</span></p>
                            <p><strong>Failed Reason:</strong> {{failedReason}}</p>
                            {{#if recoveredLocator}}
                            <p><strong>Recovered Using:</strong> <span class="locator">{{recoveredLocator}}</span></p>
                            {{/if}}
                            <p><strong>Test:</strong> {{testName}}</p>
                            <p><strong>Page:</strong> {{pageName}}</p>
                        </div>
                    </div>
                    {{/each}}
                </div>
            </div>

            <div id="performance" class="tab-content">
                <h3>Performance Metrics</h3>
                <table class="metrics-table">
                    <thead>
                        <tr>
                            <th>Metric</th>
                            <th>Value</th>
                            <th>Threshold</th>
                            <th>Performance</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each performanceMetrics}}
                        <tr>
                            <td>{{name}}</td>
                            <td>{{value}} {{unit}}</td>
                            <td>{{threshold}} {{unit}}</td>
                            <td>
                                <div class="performance-bar">
                                    <div class="performance-value" style="width: {{percentage}}%"></div>
                                </div>
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>

                <div class="chart">
                    <h3>Test Execution Time Trend</h3>
                    <div class="chart-container">
                        <canvas id="performance-trend-chart"></canvas>
                    </div>
                </div>
            </div>

            <div id="screenshots" class="tab-content">
                <h3>Test Screenshots</h3>
                <div class="screenshots-gallery">
                    {{#each screenshots}}
                    <div class="screenshot-item">
                        <h4>{{testName}} - {{stepDescription}}</h4>
                        <img src="{{path}}" alt="{{description}}" class="screenshot" />
                        <p>{{timestamp}}</p>
                    </div>
                    {{/each}}
                </div>
            </div>

            <div id="logs" class="tab-content">
                <h3>Execution Logs</h3>
                <div class="logs">
                    {{#each executionLogs}}
                    <p class="log-line {{level}}">{{timestamp}} [{{level}}] - {{message}}</p>
                    {{/each}}
                </div>
            </div>
        </div>

        <div class="footer">
            <p>Generated by CSTestForge Reporting Engine | &copy; 2025 CSTestForge</p>
        </div>
    </div>

    <script>
        // Charts library (Chart.js)
        const resultsChart = document.getElementById('results-chart').getContext('2d');
        const durationChart = document.getElementById('duration-chart').getContext('2d');
        const performanceTrendChart = document.getElementById('performance-trend-chart').getContext('2d');

        // Tabs functionality
        document.querySelectorAll('.tab-button').forEach(button => {
            button.addEventListener('click', () => {
                const tabId = button.getAttribute('data-tab');
                
                // Deactivate all tabs
                document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
                document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
                
                // Activate clicked tab
                button.classList.add('active');
                document.getElementById(tabId).classList.add('active');
            });
        });

        // Accordion functionality
        document.querySelectorAll('.accordion-header').forEach(header => {
            header.addEventListener('click', () => {
                const accordion = header.parentElement;
                accordion.classList.toggle('open');
            });
        });

        // Chart data
        const testResultsData = {
            labels: ['Passed', 'Failed', 'Skipped'],
            datasets: [{
                data: [{{passedTests}}, {{failedTests}}, {{skippedTests}}],
                backgroundColor: ['#4BC56E', '#C54B4B', '#C5A14B'],
                borderWidth: 0
            }]
        };

        const testDurationData = {
            labels: [{{#each testDurations}}'{{name}}',{{/each}}],
            datasets: [{
                label: 'Duration (seconds)',
                data: [{{#each testDurations}}{{duration}},{{/each}}],
                backgroundColor: '#7eb0e2',
                borderColor: '#4B8CC5',
                borderWidth: 1
            }]
        };

        const performanceTrendData = {
            labels: [{{#each performanceTrend}}'{{date}}',{{/each}}],
            datasets: [{
                label: 'Average Test Duration',
                data: [{{#each performanceTrend}}{{avgDuration}},{{/each}}],
                backgroundColor: 'rgba(197, 75, 140, 0.2)',
                borderColor: '#C54B8C',
                borderWidth: 2,
                tension: 0.4,
                fill: true
            }]
        };

        // Initialize charts
        new Chart(resultsChart, {
            type: 'doughnut',
            data: testResultsData,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'right'
                    }
                }
            }
        });

        new Chart(durationChart, {
            type: 'bar',
            data: testDurationData,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        new Chart(performanceTrendChart, {
            type: 'line',
            data: performanceTrendData,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    </script>
</body>
</html>


templates/reporting/dashboard-template.html
----------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CSTestForge Dashboard</title>
    <style>
        :root {
            --primary-color: #C54B8C;
            --primary-light: #e27eaf;
            --primary-dark: #9e2f6e;
            --secondary-color: #4B8CC5;
            --secondary-light: #7eb0e2;
            --secondary-dark: #2f6e9e;
            --success-color: #4BC56E;
            --success-light: #7ee299;
            --success-dark: #2f9e50;
            --warning-color: #C5A14B;
            --warning-light: #e2c77e;
            --warning-dark: #9e7c2f;
            --danger-color: #C54B4B;
            --danger-light: #e27e7e;
            --danger-dark: #9e2f2f;
            --neutral-color: #4B4B4B;
            --neutral-light: #7e7e7e;
            --neutral-dark: #2f2f2f;
            --light-color: #F5F5F5;
            --dark-color: #333333;
            --font-primary: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            --font-secondary: 'SF Mono', 'Fira Code', 'Fira Mono', 'Roboto Mono', monospace;
            --border-radius: 4px;
            --box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
        }

        html, body {
            margin: 0;
            padding: 0;
            font-family: var(--font-primary);
            background-color: var(--light-color);
            color: var(--dark-color);
            line-height: 1.6;
            font-size: 16px;
        }

        * {
            box-sizing: border-box;
        }

        .dashboard {
            display: grid;
            grid-template-columns: 250px 1fr;
            min-height: 100vh;
        }

        /* Sidebar */
        .sidebar {
            background-color: var(--primary-color);
            color: white;
            padding: 20px 0;
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
        }

        .sidebar-header {
            padding: 0 20px 20px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            margin-bottom: 20px;
        }

        .sidebar-header h1 {
            font-size: 20px;
            margin: 0;
            display: flex;
            align-items: center;
        }

        .sidebar-header h1 span {
            margin-left: 10px;
        }

        .sidebar-menu {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .sidebar-menu li {
            padding: 0;
            margin: 0;
        }

        .sidebar-menu a {
            color: white;
            text-decoration: none;
            padding: 12px 20px;
            display: block;
            transition: background-color 0.2s;
            font-size: 14px;
        }

        .sidebar-menu a:hover, .sidebar-menu a.active {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .sidebar-menu a i {
            margin-right: 10px;
            width: 20px;
            text-align: center;
        }

        .sidebar-footer {
            padding: 20px;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            margin-top: 20px;
            font-size: 12px;
            color: rgba(255, 255, 255, 0.7);
        }

        /* Main Content */
        .main-content {
            padding: 20px;
            overflow-y: auto;
        }

        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 20px;
            border-bottom: 1px solid #e0e0e0;
        }

        .page-title {
            margin: 0;
            font-size: 24px;
            color: var(--primary-dark);
        }

        .page-actions {
            display: flex;
            gap: 10px;
        }

        /* Stats Cards */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .stats-card {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 20px;
            display: flex;
            flex-direction: column;
        }

        .stats-card-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 15px;
        }

        .stats-card-title {
            margin: 0;
            font-size: 14px;
            color: var(--neutral-color);
            font-weight: normal;
        }

        .stats-card-icon {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
        }

        .stats-card-icon.success {
            background-color: var(--success-color);
        }

        .stats-card-icon.warning {
            background-color: var(--warning-color);
        }

        .stats-card-icon.danger {
            background-color: var(--danger-color);
        }

        .stats-card-icon.primary {
            background-color: var(--primary-color);
        }

        .stats-card-icon.secondary {
            background-color: var(--secondary-color);
        }

        .stats-card-value {
            font-size: 28px;
            font-weight: 700;
            margin: 0;
            color: var(--dark-color);
        }

        .stats-card-change {
            margin-top: 5px;
            font-size: 12px;
            display: flex;
            align-items: center;
        }

        .stats-card-change.positive {
            color: var(--success-dark);
        }

        .stats-card-change.negative {
            color: var(--danger-dark);
        }

        .stats-card-change i {
            margin-right: 5px;
        }

        /* Charts */
        .charts-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .chart-card {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 20px;
        }

        .chart-card-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 15px;
        }

        .chart-card-title {
            margin: 0;
            font-size: 16px;
            color: var(--primary-dark);
        }

        .chart-card-actions {
            display: flex;
            gap: 10px;
        }

        .chart-container {
            height: 300px;
            position: relative;
        }

        /* Tables */
        .table-card {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            margin-bottom: 20px;
            overflow: hidden;
        }

        .table-card-header {
            padding: 20px;
            border-bottom: 1px solid #e0e0e0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .table-card-title {
            margin: 0;
            font-size: 16px;
            color: var(--primary-dark);
        }

        .table-card-filter {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
        }

        .data-table th, .data-table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
        }

        .data-table th {
            background-color: #f9f9f9;
            font-weight: 600;
            color: var(--neutral-dark);
            font-size: 14px;
        }

        .data-table tbody tr:hover {
            background-color: #f9f9f9;
        }

        .data-table td.center {
            text-align: center;
        }

        .data-table .badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: var(--border-radius);
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .data-table .badge.success {
            background-color: var(--success-light);
            color: var(--success-dark);
        }

        .data-table .badge.failure {
            background-color: var(--danger-light);
            color: var(--danger-dark);
        }

        .data-table .badge.skipped {
            background-color: var(--warning-light);
            color: var(--warning-dark);
        }

        .data-table .actions {
            display: flex;
            gap: 5px;
            justify-content: center;
        }

        .data-table .actions button {
            background: none;
            border: none;
            cursor: pointer;
            color: var(--secondary-color);
            padding: 5px;
            border-radius: var(--border-radius);
        }

        .data-table .actions button:hover {
            background-color: var(--secondary-light);
            color: var(--secondary-dark);
        }

        /* Timeline */
        .timeline-card {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 20px;
            margin-bottom: 20px;
        }

        .timeline-header {
            margin-bottom: 20px;
        }

        .timeline-title {
            margin: 0;
            font-size: 16px;
            color: var(--primary-dark);
        }

        .timeline-container {
            position: relative;
            padding-left: 30px;
        }

        .timeline-container::before {
            content: '';
            position: absolute;
            top: 0;
            bottom: 0;
            left: 10px;
            width: 2px;
            background-color: #e0e0e0;
        }

        .timeline-item {
            position: relative;
            margin-bottom: 20px;
            padding-bottom: 20px;
            border-bottom: 1px solid #f0f0f0;
        }

        .timeline-item:last-child {
            margin-bottom: 0;
            padding-bottom: 0;
            border-bottom: none;
        }

        .timeline-badge {
            position: absolute;
            left: -30px;
            top: 0;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background-color: var(--primary-color);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 12px;
        }

        .timeline-badge.success {
            background-color: var(--success-color);
        }

        .timeline-badge.failure {
            background-color: var(--danger-color);
        }

        .timeline-badge.warning {
            background-color: var(--warning-color);
        }

        .timeline-content {
            padding-left: 10px;
        }

        .timeline-title {
            margin: 0 0 5px 0;
            font-size: 16px;
            font-weight: 600;
        }

        .timeline-time {
            font-size: 12px;
            color: var(--neutral-color);
            margin-bottom: 10px;
            display: block;
        }

        .timeline-description {
            margin: 0;
            font-size: 14px;
            color: var(--neutral-dark);
        }

        /* Buttons and form elements */
        .btn {
            display: inline-block;
            padding: 8px 16px;
            border-radius: var(--border-radius);
            background-color: var(--primary-color);
            color: white;
            border: none;
            cursor: pointer;
            font-family: var(--font-primary);
            font-size: 14px;
            font-weight: 600;
            transition: background-color 0.2s;
            text-decoration: none;
        }

        .btn:hover {
            background-color: var(--primary-dark);
        }

        .btn-secondary {
            background-color: var(--secondary-color);
        }

        .btn-secondary:hover {
            background-color: var(--secondary-dark);
        }

        .btn-success {
            background-color: var(--success-color);
        }

        .btn-success:hover {
            background-color: var(--success-dark);
        }

        .btn-danger {
            background-color: var(--danger-color);
        }

        .btn-danger:hover {
            background-color: var(--danger-dark);
        }

        .btn-sm {
            padding: 4px 8px;
            font-size: 12px;
        }

        .btn-icon {
            width: 36px;
            height: 36px;
            padding: 0;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }

        .search-box {
            display: flex;
            align-items: center;
            background-color: white;
            border-radius: var(--border-radius);
            overflow: hidden;
            border: 1px solid #e0e0e0;
        }

        .search-box input {
            flex: 1;
            padding: 8px 12px;
            border: none;
            outline: none;
            font-family: var(--font-primary);
            font-size: 14px;
        }

        .search-box button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 8px 12px;
            cursor: pointer;
        }

        .select-box {
            padding: 8px 12px;
            border-radius: var(--border-radius);
            border: 1px solid #e0e0e0;
            background-color: white;
            font-family: var(--font-primary);
            font-size: 14px;
            outline: none;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .dashboard {
                grid-template-columns: 1fr;
                grid-template-rows: auto 1fr;
            }

            .sidebar {
                padding: 10px 0;
            }

            .charts-grid {
                grid-template-columns: 1fr;
            }

            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    </style>
</head>
<body>
    <div class="dashboard">
        <div class="sidebar">
            <div class="sidebar-header">
                <h1><span>CSTestForge</span></h1>
            </div>
            <ul class="sidebar-menu">
                <li><a href="#" class="active"><i class="fas fa-tachometer-alt"></i> Dashboard</a></li>
                <li><a href="#"><i class="fas fa-list"></i> Test Suites</a></li>
                <li><a href="#"><i class="fas fa-chart-line"></i> Trends</a></li>
                <li><a href="#"><i class="fas fa-bug"></i> Failures</a></li>
                <li><a href="#"><i class="fas fa-flask"></i> Test Cases</a></li>
                <li><a href="#"><i class="fas fa-image"></i> Screenshots</a></li>
                <li><a href="#"><i class="fas fa-heartbeat"></i> Self-Healing</a></li>
                <li><a href="#"><i class="fas fa-cog"></i> Settings</a></li>
            </ul>
            <div class="sidebar-footer">
                <p>CSTestForge v1.0.0</p>
                <p>&copy; 2025 CSTestForge</p>
            </div>
        </div>

        <div class="main-content">
            <div class="page-header">
                <h1 class="page-title">Dashboard Overview</h1>
                <div class="page-actions">
                    <button class="btn btn-secondary">Export</button>
                    <button class="btn">Run Tests</button>
                </div>
            </div>

            <div class="stats-grid">
                <div class="stats-card">
                    <div class="stats-card-header">
                        <h2 class="stats-card-title">Total Test Runs</h2>
                        <div class="stats-card-icon primary">
                            <i class="fas fa-vial"></i>
                        </div>
                    </div>
                    <p class="stats-card-value">{{totalRuns}}</p>
                    <div class="stats-card-change positive">
                        <i class="fas fa-arrow-up"></i> {{runChangePercentage}}% from last week
                    </div>
                </div>

                <div class="stats-card">
                    <div class="stats-card-header">
                        <h2 class="stats-card-title">Success Rate</h2>
                        <div class="stats-card-icon success">
                            <i class="fas fa-check"></i>
                        </div>
                    </div>
                    <p class="stats-card-value">{{successRate}}%</p>
                    <div class="stats-card-change {{successRateChangeClass}}">
                        <i class="fas fa-arrow-{{successRateChangeDirection}}"></i> {{successRateChange}}% from last week
                    </div>
                </div>

                <div class="stats-card">
                    <div class="stats-card-header">
                        <h2 class="stats-card-title">Failed Tests</h2>
                        <div class="stats-card-icon danger">
                            <i class="fas fa-times"></i>
                        </div>
                    </div>
                    <p class="stats-card-value">{{failedTests}}</p>
                    <div class="stats-card-change {{failedChangeClass}}">
                        <i class="fas fa-arrow-{{failedChangeDirection}}"></i> {{failedChange}}% from last week
                    </div>
                </div>

                <div class="stats-card">
                    <div class="stats-card-header">
                        <h2 class="stats-card-title">Avg. Duration</h2>
                        <div class="stats-card-icon secondary">
                            <i class="fas fa-clock"></i>
                        </div>
                    </div>
                    <p class="stats-card-value">{{avgDuration}}s</p>
                    <div class="stats-card-change {{durationChangeClass}}">
                        <i class="fas fa-arrow-{{durationChangeDirection}}"></i> {{durationChange}}% from last week
                    </div>
                </div>
            </div>

            <div class="charts-grid">
                <div class="chart-card">
                    <div class="chart-card-header">
                        <h2 class="chart-card-title">Test Results</h2>
                        <div class="chart-card-actions">
                            <button class="btn btn-sm">Daily</button>
                            <button class="btn btn-sm">Weekly</button>
                            <button class="btn btn-sm">Monthly</button>
                        </div>
                    </div>
                    <div class="chart-container">
                        <canvas id="results-chart"></canvas>
                    </div>
                </div>

                <div class="chart-card">
                    <div class="chart-card-header">
                        <h2 class="chart-card-title">Execution Time Trend</h2>
                        <div class="chart-card-actions">
                            <button class="btn btn-sm">Daily</button>
                            <button class="btn btn-sm">Weekly</button>
                            <button class="btn btn-sm">Monthly</button>
                        </div>
                    </div>
                    <div class="chart-container">
                        <canvas id="duration-chart"></canvas>
                    </div>
                </div>
            </div>

            <div class="table-card">
                <div class="table-card-header">
                    <h2 class="table-card-title">Recent Test Runs</h2>
                    <div class="table-card-filter">
                        <div class="search-box">
                            <input type="text" placeholder="Search...">
                            <button><i class="fas fa-search"></i></button>
                        </div>
                        <select class="select-box">
                            <option>All Suites</option>
                            <option>UI Tests</option>
                            <option>API Tests</option>
                            <option>Integration Tests</option>
                        </select>
                    </div>
                </div>
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>Run ID</th>
                            <th>Suite</th>
                            <th>Start Time</th>
                            <th>Duration</th>
                            <th>Total</th>
                            <th>Passed</th>
                            <th>Failed</th>
                            <th>Skipped</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each recentRuns}}
                        <tr>
                            <td>{{id}}</td>
                            <td>{{suite}}</td>
                            <td>{{startTime}}</td>
                            <td>{{duration}}</td>
                            <td class="center">{{total}}</td>
                            <td class="center">{{passed}}</td>
                            <td class="center">{{failed}}</td>
                            <td class="center">{{skipped}}</td>
                            <td class="center">
                                <span class="badge {{statusClass}}">{{status}}</span>
                            </td>
                            <td class="center">
                                <div class="actions">
                                    <button title="View Report"><i class="fas fa-eye"></i></button>
                                    <button title="Download"><i class="fas fa-download"></i></button>
                                    <button title="Rerun"><i class="fas fa-redo"></i></button>
                                </div>
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>

            <div class="timeline-card">
                <div class="timeline-header">
                    <h2 class="timeline-title">Recent Activity</h2>
                </div>
                <div class="timeline-container">
                    {{#each activities}}
                    <div class="timeline-item">
                        <div class="timeline-badge {{typeClass}}">
                            <i class="fas {{typeIcon}}"></i>
                        </div>
                        <div class="timeline-content">
                            <h3 class="timeline-title">{{title}}</h3>
                            <span class="timeline-time">{{time}}</span>
                            <p class="timeline-description">{{description}}</p>
                        </div>
                    </div>
                    {{/each}}
                </div>
            </div>
        </div>
    </div>

    <script>
        // Charts library (Chart.js)
        const resultsChartCtx = document.getElementById('results-chart').getContext('2d');
        const durationChartCtx = document.getElementById('duration-chart').getContext('2d');

        // Data for charts
        const resultsChartData = {
            labels: [{{#each resultsTrend}}'{{date}}',{{/each}}],
            datasets: [
                {
                    label: 'Passed',
                    data: [{{#each resultsTrend}}{{passed}},{{/each}}],
                    backgroundColor: 'rgba(75, 197, 110, 0.2)',
                    borderColor: '#4BC56E',
                    borderWidth: 2,
                    tension: 0.4,
                    fill: true
                },
                {
                    label: 'Failed',
                    data: [{{#each resultsTrend}}{{failed}},{{/each}}],
                    backgroundColor: 'rgba(197, 75, 75, 0.2)',
                    borderColor: '#C54B4B',
                    borderWidth: 2,
                    tension: 0.4,
                    fill: true
                },
                {
                    label: 'Skipped',
                    data: [{{#each resultsTrend}}{{skipped}},{{/each}}],
                    backgroundColor: 'rgba(197, 161, 75, 0.2)',
                    borderColor: '#C5A14B',
                    borderWidth: 2,
                    tension: 0.4,
                    fill: true
                }
            ]
        };

        const durationChartData = {
            labels: [{{#each durationTrend}}'{{date}}',{{/each}}],
            datasets: [
                {
                    label: 'Average Duration (seconds)',
                    data: [{{#each durationTrend}}{{duration}},{{/each}}],
                    backgroundColor: 'rgba(75, 140, 197, 0.2)',
                    borderColor: '#4B8CC5',
                    borderWidth: 2,
                    tension: 0.4,
                    fill: true
                }
            ]
        };

        // Initialize charts
        new Chart(resultsChartCtx, {
            type: 'line',
            data: resultsChartData,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        stacked: false
                    }
                }
            }
        });

        new Chart(durationChartCtx, {
            type: 'line',
            data: durationChartData,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    </script>
</body>
</html>


templates/reporting/email-report-template.html
-------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CSTestForge Test Report</title>
    <style>
        /* Reset styles */
        body, html {
            margin: 0;
            padding: 0;
            font-family: Arial, Helvetica, sans-serif;
            line-height: 1.6;
            color: #333333;
        }
        
        * {
            box-sizing: border-box;
        }
        
        /* Main container */
        .container {
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        
        /* Header */
        .header {
            background-color: #C54B8C;
            color: white;
            padding: 20px;
            text-align: center;
            border-radius: 5px 5px 0 0;
        }
        
        .header h1 {
            margin: 0;
            font-size: 24px;
        }
        
        .header p {
            margin: 5px 0 0 0;
            font-size: 14px;
        }
        
        /* Content */
        .content {
            background-color: white;
            padding: 20px;
            border-radius: 0 0 5px 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        
        /* Summary */
        .summary {
            margin-bottom: 20px;
            padding-bottom: 20px;
            border-bottom: 1px solid #e0e0e0;
        }
        
        .summary h2 {
            margin: 0 0 15px 0;
            font-size: 18px;
            color: #C54B8C;
        }
        
        /* Stats */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .stats-item {
            background-color: #f9f9f9;
            padding: 15px;
            border-radius: 5px;
            text-align: center;
        }
        
        .stats-item h3 {
            margin: 0 0 5px 0;
            font-size: 14px;
            color: #666666;
        }
        
        .stats-item p {
            margin: 0;
            font-size: 24px;
            font-weight: bold;
        }
        
        .stats-item.passed p {
            color: #4BC56E;
        }
        
        .stats-item.failed p {
            color: #C54B4B;
        }
        
        .stats-item.skipped p {
            color: #C5A14B;
        }
        
        /* Test results */
        .results {
            margin-bottom: 20px;
        }
        
        .results h2 {
            margin: 0 0 15px 0;
            font-size: 18px;
            color: #C54B8C;
        }
        
        /* Table */
        .table {
            width: 100%;
            border-collapse: collapse;
            font-size: 14px;
        }
        
        .table th, .table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
        }
        
        .table th {
            background-color: #f0f0f0;
            font-weight: bold;
            color: #666666;
        }
        
        .table tr:hover {
            background-color: #f9f9f9;
        }
        
        /* Badge */
        .badge {
            display: inline-block;
            padding: 3px 8px;
            border-radius: 3px;
            font-size: 12px;
            font-weight: bold;
            text-transform: uppercase;
        }
        
        .badge.passed {
            background-color: #e7f7ee;
            color: #4BC56E;
        }
        
        .badge.failed {
            background-color: #f9e7e7;
            color: #C54B4B;
        }
        
        .badge.skipped {
            background-color: #f7f3e7;
            color: #C5A14B;
        }
        
        /* Failures */
        .failures {
            margin-bottom: 20px;
        }
        
        .failures h2 {
            margin: 0 0 15px 0;
            font-size: 18px;
            color: #C54B8C;
        }
        
        .failure-item {
            background-color: #f9e7e7;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 10px;
            border-left: 3px solid #C54B4B;
        }
        
        .failure-item h3 {
            margin: 0 0 10px 0;
            font-size: 16px;
            color: #C54B4B;
        }
        
        .failure-details {
            font-family: monospace;
            font-size: 12px;
            background-color: #f0f0f0;
            padding: 10px;
            border-radius: 3px;
            margin-top: 10px;
            overflow-x: auto;
            white-space: pre-wrap;
        }
        
        /* Button */
        .button {
            display: inline-block;
            padding: 10px 20px;
            background-color: #C54B8C;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            font-weight: bold;
            text-align: center;
            margin-top: 20px;
        }
        
        .button:hover {
            background-color: #a33f74;
        }
        
        /* Footer */
        .footer {
            margin-top: 20px;
            text-align: center;
            font-size: 12px;
            color: #666666;
        }
        
        .footer p {
            margin: 5px 0;
        }
        
        /* Responsive */
        @media (max-width: 480px) {
            .stats-grid {
                grid-template-columns: 1fr;
            }
            
            .header h1 {
                font-size: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>CSTestForge Test Report</h1>
            <p>{{executionDate}}</p>
        </div>
        
        <div class="content">
            <div class="summary">
                <h2>Test Execution Summary</h2>
                <p>The test run <strong>{{runName}}</strong> completed with the following results:</p>
                
                <div class="stats-grid">
                    <div class="stats-item passed">
                        <h3>Passed</h3>
                        <p>{{passedTests}}</p>
                    </div>
                    
                    <div class="stats-item failed">
                        <h3>Failed</h3>
                        <p>{{failedTests}}</p>
                    </div>
                    
                    <div class="stats-item skipped">
                        <h3>Skipped</h3>
                        <p>{{skippedTests}}</p>
                    </div>
                    
                    <div class="stats-item">
                        <h3>Total Duration</h3>
                        <p>{{duration}}</p>
                    </div>
                </div>
                
                <p>Success Rate: <strong>{{successRate}}%</strong></p>
            </div>
            
            <div class="results">
                <h2>Test Results</h2>
                
                <table class="table">
                    <thead>
                        <tr>
                            <th>Test Name</th>
                            <th>Duration</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each tests}}
                        <tr>
                            <td>{{name}}</td>
                            <td>{{duration}}</td>
                            <td><span class="badge {{status}}">{{status}}</span></td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>
            
            {{#if hasFailures}}
            <div class="failures">
                <h2>Test Failures</h2>
                
                {{#each failures}}
                <div class="failure-item">
                    <h3>{{testName}}</h3>
                    <p><strong>Class:</strong> {{className}}</p>
                    <p><strong>Method:</strong> {{methodName}}</p>
                    <p><strong>Error:</strong> {{errorMessage}}</p>
                    
                    <div class="failure-details">{{stackTrace}}</div>
                </div>
                {{/each}}
            </div>
            {{/if}}
            
            <a href="{{reportUrl}}" class="button">View Full Report</a>
        </div>
        
        <div class="footer">
            <p>This is an automated email from CSTestForge. Please do not reply.</p>
            <p>&copy; 2025 CSTestForge. All rights reserved.</p>
        </div>
    </div>
</body>
</html>
