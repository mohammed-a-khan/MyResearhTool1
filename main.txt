CSTestForgeApplication.java
-----------------------------------------

package com.cstestforge;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.Ordered;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
import org.springframework.web.socket.config.annotation.StompEndpointRegistry;
import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;
import org.springframework.messaging.simp.config.MessageBrokerRegistry;

import javax.annotation.PostConstruct;
import java.util.Collections;
import java.util.TimeZone;

/**
 * Main Application class for CSTestForge
 * 
 * This class serves as the entry point for the CSTestForge application.
 * It initializes the Spring Boot application context and configures essential
 * components such as CORS, async processing, and scheduling.
 */
@SpringBootApplication
@EnableWebMvc
@EnableAsync
@EnableScheduling
public class CSTestForgeApplication {

    /**
     * Main method to start the application.
     * 
     * @param args Command line arguments
     */
    public static void main(String[] args) {
        SpringApplication.run(CSTestForgeApplication.class, args);
    }

    /**
     * Sets the default timezone for the application.
     * Ensures consistent date/time handling across the application.
     */
    @PostConstruct
    public void init() {
        TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
    }

    /**
     * Configures CORS (Cross-Origin Resource Sharing) for the application.
     * Allows frontend applications to communicate with this backend service.
     * 
     * @return FilterRegistrationBean for CORS configuration
     */
    @Bean
    public FilterRegistrationBean<CorsFilter> corsFilter() {
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        CorsConfiguration config = new CorsConfiguration();
        
        // Allow all origins for development, restrict in production
        config.setAllowCredentials(true);
        config.setAllowedOriginPatterns(Collections.singletonList("*"));
        
        // Allow common HTTP methods
        config.addAllowedMethod("GET");
        config.addAllowedMethod("POST");
        config.addAllowedMethod("PUT");
        config.addAllowedMethod("DELETE");
        config.addAllowedMethod("OPTIONS");
        
        // Allow common headers
        config.addAllowedHeader("Authorization");
        config.addAllowedHeader("Content-Type");
        config.addAllowedHeader("Accept");
        config.addAllowedHeader("Origin");
        
        // Apply CORS to all paths
        source.registerCorsConfiguration("/**", config);
        
        FilterRegistrationBean<CorsFilter> bean = new FilterRegistrationBean<>(new CorsFilter(source));
        bean.setOrder(Ordered.HIGHEST_PRECEDENCE);
        
        return bean;
    }

    /**
     * Configures custom property sources for the application.
     * This allows loading configuration from various sources.
     * 
     * @return PropertySourcesPlaceholderConfigurer
     */
    @Bean
    public org.springframework.context.support.PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer() {
        org.springframework.context.support.PropertySourcesPlaceholderConfigurer configurer = 
            new org.springframework.context.support.PropertySourcesPlaceholderConfigurer();
        configurer.setIgnoreUnresolvablePlaceholders(true);
        configurer.setIgnoreResourceNotFound(true);
        return configurer;
    }

    /**
     * Configures thread pool for async operations.
     * This ensures efficient handling of concurrent operations.
     * 
     * @return ThreadPoolTaskExecutor for async processing
     */
    @Bean
    public org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor taskExecutor() {
        org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor executor = 
            new org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor();
        executor.setCorePoolSize(10);
        executor.setMaxPoolSize(50);
        executor.setQueueCapacity(100);
        executor.setThreadNamePrefix("CSTestForge-");
        executor.initialize();
        return executor;
    }

    /**
     * WebSocket configuration for real-time communication
     */
    @Configuration
    @EnableWebSocketMessageBroker
    public static class WebSocketConfig implements WebSocketMessageBrokerConfigurer {
        
        @Override
        public void configureMessageBroker(MessageBrokerRegistry registry) {
            registry.enableSimpleBroker("/topic", "/queue");
            registry.setApplicationDestinationPrefixes("/app");
        }

        @Override
        public void registerStompEndpoints(StompEndpointRegistry registry) {
            registry.addEndpoint("/cstestforge-websocket")
                   .setAllowedOriginPatterns("*")
                   .withSockJS();
        }
    }

    /**
     * Configures file storage service initialization.
     * This ensures the file system storage is ready for use on startup.
     * 
     * @return CommandLineRunner for initialization
     */
    @Bean
    public org.springframework.boot.CommandLineRunner init(com.cstestforge.service.storage.FileSystemStorageService fileSystemStorageService) {
        return args -> {
            // Initialize storage directories
            fileSystemStorageService.init();
        };
    }

    /**
     * Configures ObjectMapper for JSON serialization/deserialization.
     * This ensures consistent JSON handling across the application.
     * 
     * @return Configured ObjectMapper
     */
    @Bean
    public com.fasterxml.jackson.databind.ObjectMapper objectMapper() {
        com.fasterxml.jackson.databind.ObjectMapper objectMapper = new com.fasterxml.jackson.databind.ObjectMapper();
        
        // Configure date/time serialization
        objectMapper.registerModule(new com.fasterxml.jackson.datatype.jsr310.JavaTimeModule());
        objectMapper.disable(com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        
        // Configure other serialization features
        objectMapper.configure(com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        objectMapper.configure(com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
        
        return objectMapper;
    }
}



CSTestForgeExceptionHandler.java
-------------------------------------------------

package com.cstestforge.exception;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import javax.validation.ConstraintViolationException;
import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * Global exception handler for CSTestForge application
 * 
 * This class provides centralized exception handling across all controllers
 * and ensures consistent error responses for API clients.
 */
@ControllerAdvice
public class CSTestForgeExceptionHandler extends ResponseEntityExceptionHandler {

    private static final Logger logger = LoggerFactory.getLogger(CSTestForgeExceptionHandler.class);

    /**
     * Structure for error responses
     */
    private static class ErrorResponse {
        private Date timestamp;
        private int status;
        private String error;
        private String message;
        private String path;
        private Map<String, Object> details;

        public ErrorResponse(Date timestamp, int status, String error, String message, String path) {
            this.timestamp = timestamp;
            this.status = status;
            this.error = error;
            this.message = message;
            this.path = path;
        }

        public ErrorResponse(Date timestamp, int status, String error, String message, String path, Map<String, Object> details) {
            this(timestamp, status, error, message, path);
            this.details = details;
        }

        // Getters and setters - required for JSON serialization
        public Date getTimestamp() {
            return timestamp;
        }

        public void setTimestamp(Date timestamp) {
            this.timestamp = timestamp;
        }

        public int getStatus() {
            return status;
        }

        public void setStatus(int status) {
            this.status = status;
        }

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }

        public String getMessage() {
            return message;
        }

        public void setMessage(String message) {
            this.message = message;
        }

        public String getPath() {
            return path;
        }

        public void setPath(String path) {
            this.path = path;
        }

        public Map<String, Object> getDetails() {
            return details;
        }

        public void setDetails(Map<String, Object> details) {
            this.details = details;
        }
    }

    /**
     * Handle general exceptions with a 500 Internal Server Error
     * 
     * @param ex The exception
     * @param request The current request
     * @return ResponseEntity with error details
     */
    @ExceptionHandler(Exception.class)
    public ResponseEntity<Object> handleAllExceptions(Exception ex, WebRequest request) {
        logger.error("Unhandled exception occurred", ex);
        
        ErrorResponse errorResponse = new ErrorResponse(
            new Date(),
            HttpStatus.INTERNAL_SERVER_ERROR.value(),
            HttpStatus.INTERNAL_SERVER_ERROR.getReasonPhrase(),
            ex.getMessage(),
            request.getDescription(false).replace("uri=", "")
        );
        
        return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    /**
     * Handle ResourceNotFoundException with a 404 Not Found
     * 
     * @param ex The exception
     * @param request The current request
     * @return ResponseEntity with error details
     */
    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<Object> handleResourceNotFoundException(ResourceNotFoundException ex, WebRequest request) {
        logger.warn("Resource not found: {}", ex.getMessage());
        
        ErrorResponse errorResponse = new ErrorResponse(
            new Date(),
            HttpStatus.NOT_FOUND.value(),
            HttpStatus.NOT_FOUND.getReasonPhrase(),
            ex.getMessage(),
            request.getDescription(false).replace("uri=", "")
        );
        
        return new ResponseEntity<>(errorResponse, HttpStatus.NOT_FOUND);
    }

    /**
     * Handle IOException with a 500 Internal Server Error
     * 
     * @param ex The exception
     * @param request The current request
     * @return ResponseEntity with error details
     */
    @ExceptionHandler(IOException.class)
    public ResponseEntity<Object> handleIOException(IOException ex, WebRequest request) {
        logger.error("IO exception occurred", ex);
        
        ErrorResponse errorResponse = new ErrorResponse(
            new Date(),
            HttpStatus.INTERNAL_SERVER_ERROR.value(),
            "I/O Error",
            ex.getMessage(),
            request.getDescription(false).replace("uri=", "")
        );
        
        return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    /**
     * Handle InvalidRequestException with a 400 Bad Request
     * 
     * @param ex The exception
     * @param request The current request
     * @return ResponseEntity with error details
     */
    @ExceptionHandler(InvalidRequestException.class)
    public ResponseEntity<Object> handleInvalidRequestException(InvalidRequestException ex, WebRequest request) {
        logger.warn("Invalid request: {}", ex.getMessage());
        
        ErrorResponse errorResponse = new ErrorResponse(
            new Date(),
            HttpStatus.BAD_REQUEST.value(),
            HttpStatus.BAD_REQUEST.getReasonPhrase(),
            ex.getMessage(),
            request.getDescription(false).replace("uri=", ""),
            ex.getDetails()
        );
        
        return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
    }

    /**
     * Handle ConstraintViolationException with a 400 Bad Request
     * 
     * @param ex The exception
     * @param request The current request
     * @return ResponseEntity with error details
     */
    @ExceptionHandler(ConstraintViolationException.class)
    public ResponseEntity<Object> handleConstraintViolationException(ConstraintViolationException ex, WebRequest request) {
        logger.warn("Constraint violation: {}", ex.getMessage());
        
        Map<String, Object> details = new HashMap<>();
        details.put("violations", ex.getConstraintViolations().stream()
            .map(violation -> {
                Map<String, String> violationDetails = new HashMap<>();
                violationDetails.put("field", violation.getPropertyPath().toString());
                violationDetails.put("message", violation.getMessage());
                return violationDetails;
            })
            .collect(Collectors.toList()));
        
        ErrorResponse errorResponse = new ErrorResponse(
            new Date(),
            HttpStatus.BAD_REQUEST.value(),
            "Validation Error",
            "Validation failed",
            request.getDescription(false).replace("uri=", ""),
            details
        );
        
        return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
    }

    /**
     * Handle method argument validation failures
     * 
     * @param ex The exception
     * @param headers The HTTP headers
     * @param status The HTTP status
     * @param request The current request
     * @return ResponseEntity with error details
     */
    @Override
    protected ResponseEntity<Object> handleMethodArgumentNotValid(
            MethodArgumentNotValidException ex, 
            HttpHeaders headers, 
            HttpStatus status, 
            WebRequest request) {
        
        logger.warn("Method argument validation failed");
        
        Map<String, Object> details = new HashMap<>();
        details.put("errors", ex.getBindingResult().getFieldErrors().stream()
            .map(error -> {
                Map<String, String> errorDetails = new HashMap<>();
                errorDetails.put("field", error.getField());
                errorDetails.put("message", error.getDefaultMessage());
                errorDetails.put("rejectedValue", error.getRejectedValue() != null ? error.getRejectedValue().toString() : "null");
                return errorDetails;
            })
            .collect(Collectors.toList()));
        
        ErrorResponse errorResponse = new ErrorResponse(
            new Date(),
            HttpStatus.BAD_REQUEST.value(),
            "Validation Error",
            "Validation failed for request arguments",
            request.getDescription(false).replace("uri=", ""),
            details
        );
        
        return new ResponseEntity<>(errorResponse, headers, HttpStatus.BAD_REQUEST);
    }

    /**
     * Handle BrowserFrameException with a 500 Internal Server Error
     * 
     * @param ex The exception
     * @param request The current request
     * @return ResponseEntity with error details
     */
    @ExceptionHandler(BrowserFrameException.class)
    public ResponseEntity<Object> handleBrowserFrameException(BrowserFrameException ex, WebRequest request) {
        logger.error("Browser frame error occurred", ex);
        
        ErrorResponse errorResponse = new ErrorResponse(
            new Date(),
            HttpStatus.INTERNAL_SERVER_ERROR.value(),
            "Browser Frame Error",
            ex.getMessage(),
            request.getDescription(false).replace("uri=", "")
        );
        
        return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    /**
     * Handle RecordingException with a 500 Internal Server Error
     * 
     * @param ex The exception
     * @param request The current request
     * @return ResponseEntity with error details
     */
    @ExceptionHandler(RecordingException.class)
    public ResponseEntity<Object> handleRecordingException(RecordingException ex, WebRequest request) {
        logger.error("Recording error occurred", ex);
        
        ErrorResponse errorResponse = new ErrorResponse(
            new Date(),
            HttpStatus.INTERNAL_SERVER_ERROR.value(),
            "Recording Error",
            ex.getMessage(),
            request.getDescription(false).replace("uri=", "")
        );
        
        return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    /**
     * Handle ExportException with a 500 Internal Server Error
     * 
     * @param ex The exception
     * @param request The current request
     * @return ResponseEntity with error details
     */
    @ExceptionHandler(ExportException.class)
    public ResponseEntity<Object> handleExportException(ExportException ex, WebRequest request) {
        logger.error("Export error occurred", ex);
        
        ErrorResponse errorResponse = new ErrorResponse(
            new Date(),
            HttpStatus.INTERNAL_SERVER_ERROR.value(),
            "Export Error",
            ex.getMessage(),
            request.getDescription(false).replace("uri=", "")
        );
        
        return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);
    }
}



ResourceNotFoundException.java
--------------------------------------

package com.cstestforge.exception;

/**
 * Exception thrown when a requested resource could not be found
 */
public class ResourceNotFoundException extends RuntimeException {
    
    private static final long serialVersionUID = 1L;
    
    private String resourceName;
    private String fieldName;
    private Object fieldValue;
    
    public ResourceNotFoundException(String resourceName, String fieldName, Object fieldValue) {
        super(String.format("%s not found with %s : '%s'", resourceName, fieldName, fieldValue));
        this.resourceName = resourceName;
        this.fieldName = fieldName;
        this.fieldValue = fieldValue;
    }
    
    public ResourceNotFoundException(String message) {
        super(message);
    }
    
    public String getResourceName() {
        return resourceName;
    }
    
    public String getFieldName() {
        return fieldName;
    }
    
    public Object getFieldValue() {
        return fieldValue;
    }
}


InvalidRequestException.java
----------------------------------------

package com.cstestforge.exception;

import java.util.HashMap;
import java.util.Map;

/**
 * Exception thrown when a request is invalid
 */
public class InvalidRequestException extends RuntimeException {
    
    private static final long serialVersionUID = 1L;
    
    private Map<String, Object> details = new HashMap<>();
    
    public InvalidRequestException(String message) {
        super(message);
    }
    
    public InvalidRequestException(String message, Map<String, Object> details) {
        super(message);
        this.details = details;
    }
    
    public InvalidRequestException(String message, String key, Object value) {
        super(message);
        this.details.put(key, value);
    }
    
    public InvalidRequestException addDetail(String key, Object value) {
        this.details.put(key, value);
        return this;
    }
    
    public Map<String, Object> getDetails() {
        return details;
    }
}



BrowserFrameException.java
-------------------------------------
package com.cstestforge.exception;

/**
 * Exception thrown when a browser frame operation fails
 */
public class BrowserFrameException extends RuntimeException {
    
    private static final long serialVersionUID = 1L;
    
    public BrowserFrameException(String message) {
        super(message);
    }
    
    public BrowserFrameException(String message, Throwable cause) {
        super(message, cause);
    }
}


RecordingException.java
------------------------------

package com.cstestforge.exception;

/**
 * Exception thrown when a recording operation fails
 */
public class RecordingException extends RuntimeException {
    
    private static final long serialVersionUID = 1L;
    
    public RecordingException(String message) {
        super(message);
    }
    
    public RecordingException(String message, Throwable cause) {
        super(message, cause);
    }
}

ExportException.java
-------------------------------

package com.cstestforge.exception;

/**
 * Exception thrown when an export operation fails
 */
public class ExportException extends RuntimeException {
    
    private static final long serialVersionUID = 1L;
    
    public ExportException(String message) {
        super(message);
    }
    
    public ExportException(String message, Throwable cause) {
        super(message, cause);
    }
}


StorageException.java
-------------------------------

package com.cstestforge.exception;

/**
 * Exception thrown when a file storage operation fails
 */
public class StorageException extends RuntimeException {
    
    private static final long serialVersionUID = 1L;
    
    public StorageException(String message) {
        super(message);
    }
    
    public StorageException(String message, Throwable cause) {
        super(message, cause);
    }
}


StorageFileNotFoundException.java
----------------------------------------
package com.cstestforge.exception;

/**
 * Exception thrown when a file could not be found
 */package com.cstestforge.service.storage;

import org.springframework.core.io.Resource;
import org.springframework.web.multipart.MultipartFile;

import java.nio.file.Path;
import java.util.stream.Stream;

/**
 * Interface for operations with the file system storage
 */
public interface FileSystemStorageService {

    /**
     * Initialize the storage
     */
    void init();

    /**
     * Store a file
     * 
     * @param file the file to store
     * @return the name of the file
     */
    String store(MultipartFile file);

    /**
     * Store a file with a specific name
     * 
     * @param file the file to store
     * @param filename the name to use
     * @return the name of the file
     */
    String store(MultipartFile file, String filename);

    /**
     * Get all files
     * 
     * @return stream of all file paths
     */
    Stream<Path> loadAll();

    /**
     * Load a file as a Path
     * 
     * @param filename the name of the file
     * @return the Path object
     */
    Path load(String filename);

    /**
     * Load a file as a Resource
     * 
     * @param filename the name of the file
     * @return the Resource object
     */
    Resource loadAsResource(String filename);

    /**
     * Delete all files
     */
    void deleteAll();

    /**
     * Delete a specific file
     * 
     * @param filename the name of the file
     */
    void delete(String filename);
    
    /**
     * Create a directory
     * 
     * @param directory the directory name
     * @return the Path object
     */
    Path createDirectory(String directory);
    
    /**
     * Write content to a file
     * 
     * @param content the content to write
     * @param filename the name of the file
     * @return the name of the file
     */
    String writeToFile(String content, String filename);
    
    /**
     * Read content from a file
     * 
     * @param filename the name of the file
     * @return the file content
     */
    String readFromFile(String filename);
}



public class StorageFileNotFoundException extends StorageException {
    
    private static final long serialVersionUID = 1L;
    
    public StorageFileNotFoundException(String message) {
        super(message);
    }
    
    public StorageFileNotFoundException(String message, Throwable cause) {
        super(message, cause);
    }
}

FileSystemStorageService.java
----------------------------------------


